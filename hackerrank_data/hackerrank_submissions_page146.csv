submission_id,username,problem_name,language,code,page,url
1386870874,sakshimashalkar1,unknown,unknown,"1
def can_partition():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
    6
    T = int(data[0])  
7
    idx = 1
8
    results = []
9
    10
    for _ in range(T):
11
        N = int(data[idx])  
12
        idx += 1
13
        A = map(int, data[idx:idx + N])
14
        idx += N
15
        16
       17
        odd_count = sum(1 for x in A if x % 2 != 0)
18
        19
        20
        if odd_count >= 2:
21
            results.append(""YES"")
22
        else:
23
            results.append(""NO"")
24
    25
    26
    sys.stdout.write(""\n"".join(results) + ""\n"")
27
    28
can_partition()
29",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870874
1386870875,h1032220730,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        odd_count = sum(1 for num in arr if num % 2 == 1)
9
        10
        if total_sum % 2 == 1:
11
            results.append(""NO"")
12
        else:
13
            # If there is at least one odd number, partitioning is possible
14
            if odd_count > 0:
15
                results.append(""YES"")
16
            else:
17
                results.append(""NO"")
18
    19
    return results
20
21
# Example usage
22
test_cases = [
23
    (4, [1, 1, 2, 2]),
24
    (6, [1, 2, 4, 6, 8, 10])
25
]
26
27
T = len(test_cases)
28
output = can_partition_odd_sum(T, test_cases)
29
for res in output:
30
    print(res)
31",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870875
1386870873,sarkarsudeep0409,unknown,unknown,"1
for _ in range(int(input())):
2
    print(2**int(input()) - 1)",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870873
1386870869,guptamukesh9380,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
t=int(input())
3
for _ in range(t):
4
    m,n,a=map(int,input().split())
5
    one=0
6
    two=0
7
    if m%a==0:
8
        one=m//a
9
    else:
10
        one=m//a +1
11
    if n%a==0:
12
        two=n//a
13
    else:
14
        two=n//a +1
15
    16
    if one==1 and two==1:
17
        print(1)
18
    else:
19
        print(one+two)",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870869
1386870868,aaryatcet22,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(M, N, A):
4
    # Calculate the number of pieces required along each dimension
5
    pieces_width = (M + A - 1) // A  # Equivalent to ceil(M / A)
6
    pieces_height = (N + A - 1) // A  # Equivalent to ceil(N / A)
7
    # Total pieces is the product of the two
8
    return pieces_width * pieces_height
9
10
# Input number of test cases
11
T = int(input())
12
13
# Process each test case
14
results = []
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    results.append(min_cloth_pieces(M, N, A))
18
19
# Output the results
20
for result in results:
21
    print(result)",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870868
1386870872,aarya_kumar1712,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870872
1386870863,kerissapatel,unknown,unknown,"1
def can_partition(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        odd_count = sum(1 for x in arr if x % 2 != 0)
5
        even_count = n - odd_count
6
        7
        # A product of sums is odd only if both sums are odd
8
        # This requires at least two odd numbers
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input
16
T = int(input())
17
test_cases = []
18
19
for _ in range(T):
20
    N = int(input())
21
    A = list(map(int, input().split()))
22
    test_cases.append((N, A))
23
24
# Process each test case
25
results = can_partition(test_cases)
26
27
# Output results
28
print(""\n"".join(results))
29
30",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870863
1386870864,printshubham,unknown,unknown,"1
def min_cloth_pieces(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        M, N, A = test_cases[i]
5
        rows = (M + A - 1) // A 
6
        cols = (N + A - 1) // A  
7
        results.append(rows * cols)
8
    return results
9
10
T = int(input())
11
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
12
13
results = min_cloth_pieces(T, test_cases)
14
print(""\n"".join(map(str, results)))
15",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870864
1386870866,iamrealsoumik,unknown,unknown,"1
# Input number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    # Input the size of the array
7
    N = int(input())
8
    # Input the array
9
    A = list(map(int, input().split()))
10
    11
    # Count the number of odd numbers
12
    odd_count = sum(1 for x in A if x % 2 != 0)
13
    14
    # Check if there are at least two odd numbers
15
    if odd_count >= 2:
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Output the results
21
print(""\n"".join(results))",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870866
1386870861,tarang_rathod,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")
19",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870861
