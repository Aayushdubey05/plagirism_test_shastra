submission_id,username,problem_name,language,code,page,url
1386872869,prashantyelurka1,unknown,unknown,"1
T = int(input())
2
results = []
3
for _ in range(T):
4
    N = int(input())
5
    A = list(map(int, input().split()))
6
    total_sum = sum(A)
7
    odd_exists = any(x % 2 == 1 for x in A)
8
    even_exists = any(x % 2 == 0 for x in A)
9
    if total_sum % 2 == 1 and odd_exists and even_exists:
10
        results.append(""YES"")
11
    else:
12
        results.append(""NO"")
13
print(""\n"".join(results))",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872869
1386872870,guddi98922,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
11
        12
        Scanner sc = new Scanner(System.in);
13
        int T = sc.nextInt();
14
        for(int i=0;i<T;i++){
15
            int n = sc.nextInt();
16
            int oddcount=0;
17
            int A[] = new int[n];
18
            for(int k=0;k<A.length;k++){
19
                A[k] = sc.nextInt();
20
            }
21
            22
            for(int j=0;j<n;j++){
23
               if(A[j]% 2 != 0){
24
                   oddcount++;
25
               }
26
            }
27
            if(oddcount >=2){
28
                System.out.println(""YES"");
29
            }
30
            else{
31
                System.out.println(""NO"");
32
            }
33
        }
34
    }
35
}",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872870
1386872871,harshit1mishra16,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T, N, num, odd_count;
5
    scanf(""%d"", &T);  // Read number of test cases
6
7
    while (T--) {
8
        scanf(""%d"", &N);  // Read size of the array
9
        odd_count = 0;  // Initialize the count of odd numbers
10
11
        for (int i = 0; i < N; i++) {
12
            scanf(""%d"", &num);
13
            if (num % 2 != 0) {  // Check if the number is odd
14
                odd_count++;
15
            }
16
        }
17
18
        // If there are at least two odd numbers, print ""YES""
19
        if (odd_count >= 2) {
20
            printf(""YES\n"");
21
        } else {
22
            printf(""NO\n"");
23
        }
24
    }
25
26
    return 0;
27
}",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872871
1386872864,h1032221386,unknown,unknown,"1
 def min_cloth_pieces(M, N, A):
2
    """"""
3
    Calculates the minimum number of square cloth pieces needed to cover a rectangular land.
4
5
    Args:
6
      M: Length of the rectangular land.
7
      N: Width of the rectangular land.
8
      A: Side length of each square cloth piece.
9
10
    Returns:
11
      The minimum number of cloth pieces required.
12
    """"""
13
14
    # Calculate the number of pieces needed along each dimension
15
    rows = (M + A - 1) // A  # Ceiling division for rows
16
    cols = (N + A - 1) // A  # Ceiling division for columns
17
18
    # Total number of pieces is the product of rows and columns
19
    return rows * cols
20
21
# Get the number of test cases
22
T = int(input())
23
24
# Iterate through each test case
25
for _ in range(T):
26
    M, N, A = map(int, input().split())
27
    result = min_cloth_pieces(M, N, A)
28
    print(result)
29
30
    ",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872864
1386872866,sagarkanekar2004,unknown,unknown,"1
def can_partition_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        6
        # Count the number of odd integers in A
7
        odd_count = sum(1 for x in A if x % 2 != 0)
8
        9
        # We need at least two odd numbers to form an odd product
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    15
    return results
16
17
# Example usage
18
T = int(input())
19
test_cases = []
20
for _ in range(T):
21
    N = int(input())
22
    A = list(map(int, input().split()))
23
    test_cases.append((N, A))
24
25
results = can_partition_odd_multiplication(test_cases)
26
print(""\n"".join(results))
27",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872866
1386872867,praneelshah_ind1,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets of a set with n elements = 2^n
5
        # Non-empty subsets = 2^n - 1
6
        results.append((2 ** n) - 1)
7
    return results
8
9
# Input
10
T = int(input(""Enter number of test cases: ""))
11
test_cases = [int(input()) for _ in range(T)]
12
13
# Compute results
14
output = count_non_empty_subsets(test_cases)
15
16
# Output results
17
for res in output:
18
    print(res)",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872867
1386872851,praneelshah_ind1,unknown,unknown,"1
#include <stdio.h>
2
#include <ctype.h>
3
4
int main() {
5
    int T; // Number of test cases
6
    scanf(""%d"", &T); // Reading number of test cases from stdin
7
    8
    while (T--) {
9
        int N; // Size of the array
10
        scanf(""%d"", &N); // Reading size of array from stdin
11
        12
        int A[N];
13
        int odd_count = 0;
14
        15
        // Reading array elements from stdin and counting odd numbers
16
        for (int i = 0; i < N; i++) {
17
            char input[100];
18
            scanf(""%s"", input);
19
            20
            // Remove non-numeric characters
21
            int j = 0, number = 0;
22
            while (input[j] != '\0') {
23
                if (isdigit(input[j])) {
24
                    number = number * 10 + (input[j] - '0');
25
                }
26
                j++;
27
            }
28
            29
            A[i] = number; // Store the processed number in the array
30
            if (A[i] % 2 != 0) {
31
                odd_count++;
32
            }
33
        }
34
        35
        // Printing the result to stdout
36
        if (odd_count >= 2) {
37
            printf(""YES\n"");
38
        } else {
39
            printf(""NO\n"");
40
        }
41
    }
42
    43
    return 0;
44
}
45",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872851
1386872853,h1032221105,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if _name_ == ""_main_"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
        print(result)",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872853
1386872861,chitrapandey0880,unknown,unknown,"1
2
import java.io.*;
3
import java.util.*;
4
5
public class Solution {
6
7
    public static void main(String[] args) {
8
        Scanner sc = new Scanner(System.in);
9
        int T = sc.nextInt();
10
11
        long[] precomputed = new long[32];
12
        for (int i = 0; i <= 31; i++) {
13
            precomputed[i] = (1L << i) - 1;         // 2^i - 1
14
        }
15
16
        while (T-- > 0) {
17
            int N = sc.nextInt(); 
18
            System.out.println(precomputed[N]);
19
        }
20
        21
        sc.close();
22
    }
23
}
24
25
26",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872861
1386872846,h1032231260,unknown,unknown,"1
T = int(input())
2
results = []
3
for _ in range(T):
4
    N = int(input())
5
    A = list(map(int, input().split()))
6
    total_sum = sum(A)
7
    odd_exists = any(x % 2 == 1 for x in A)
8
    even_exists = any(x % 2 == 0 for x in A)
9
    if total_sum % 2 == 0 and odd_exists and even_exists:
10
        results.append(""YES"")
11
    else:
12
        results.append(""NO"")
13
print(""\n"".join(results))
14",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872846
