submission_id,username,problem_name,language,code,page,url
1386872452,mukeshkadali90,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872452
1386872450,sahilghorpade121,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872450
1386872454,mauryapranay54,unknown,unknown,"1
def can_partition():
2
    T = int(input())
3
    for _ in range(T):
4
        N = int(input())
5
        A = list(map(int, input().split()))
6
        total_sum = 0
7
        odd_count = 0
8
        for x in A:
9
            total_sum += x
10
            if x % 2 != 0:
11
                odd_count += 1
12
        if total_sum % 2 == 0 and odd_count >= 2:
13
            print(""YES"")
14
        else:
15
            print(""NO"")
16
17
can_partition()",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872454
1386872444,h1032220279,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def non_empty_subsets(n):
3
    return (2 ** n) - 1
4
5
# Input: Number of test cases
6
T = int(input())
7
results = []
8
9
# Process each test case
10
for _ in range(T):
11
    N = int(input())
12
    results.append(non_empty_subsets(N))
13
14
# Print each result on a new line
15
for result in results:
16
    print(result)
17",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872444
1386872445,vipulsanil,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
5
    results = []
6
7
    for i in range(T):
8
9
        M, N, A = test_cases[i]
10
11
        # Calculate the number of squares needed in each dimension
12
13
        squares_in_row = math.ceil(M / A)
14
15
        squares_in_col = math.ceil(N / A)
16
17
        # Total number of squares needed
18
19
        total_squares = squares_in_row * squares_in_col
20
21
        results.append(total_squares)
22
23
    return results
24
25
# Input handling
26
27
if __name__ == ""__main__"":
28
29
    # Read the number of test cases
30
31
    T = int(input())
32
33
    test_cases = []
34
35
    # Read each test case
36
37
    for _ in range(T):
38
39
        M, N, A = map(int, input().split())
40
41
        test_cases.append((M, N, A))
42
43
    # Calculate results
44
45
    results = calculate_minimum_squares(T, test_cases)
46
47
    # Print the results
48
49
    for result in results:
50
51
        print(result)
52
        ",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872445
1386872449,praneelshah_ind1,unknown,unknown,"1
def calculate_cloth_pieces(test_cases):
2
    results=[]
3
    for M,N,A in test_cases:
4
        length_pieces=(M+A-1)
5
        width_pieces=(N+A-1)
6
        results.append(length_pieces * width_pieces)
7
    return results
8
    9
test_cases = [
10
    (3,3,2),
11
    (4,5,9),
12
    (2,2,1)
13
]
14
15
results=calculate_cloth_pieces(test_cases)
16
17
for i,result in enumerate(results):
18
    print(""Test Case {i+1}: {result} cloth pieces required"")",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872449
1386872440,dny9136833946,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        // Create a BufferedReader for fast input reading
8
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
9
        10
        // Read the number of test cases
11
        int T = Integer.parseInt(reader.readLine());
12
13
        // Prepare the output
14
        StringBuilder output = new StringBuilder();
15
        16
        // Process each test case
17
        for (int t = 0; t < T; t++) {
18
            // Read the number of elements in the array
19
            int N = Integer.parseInt(reader.readLine());
20
            21
            // Read the array of integers
22
            String[] input = reader.readLine().split("" "");
23
            24
            // Count the number of odd numbers
25
            int oddCount = 0;
26
            for (String num : input) {
27
                if (Integer.parseInt(num) % 2 != 0) {
28
                    oddCount++;
29
                }
30
            }
31
            32
            // If there are at least two odd numbers, the answer is ""YES""
33
            if (oddCount >= 2) {
34
                output.append(""YES\n"");
35
            } else {
36
                output.append(""NO\n"");
37
            }
38
        }
39
40
        // Print the final result
41
        System.out.print(output);
42
    }
43
}
44",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872440
1386872439,rathodlucky12k,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd and even numbers
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
7
        # Check if partition is possible:
8
        # - At least two odd numbers are required
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
16
# Efficient Input Processing for Large Inputs
17
def main():
18
    import sys
19
    input = sys.stdin.read
20
    data = input().split()
21
    22
    T = int(data[0])  # Number of test cases
23
    test_cases = []
24
    idx = 1  # Start of input after T
25
    26
    for _ in range(T):
27
        N = int(data[idx])  # Size of the array
28
        idx += 1
29
        A = list(map(int, data[idx:idx + N]))  # The array elements
30
        idx += N
31
        test_cases.append((N, A))
32
    33
    # Solve and collect results
34
    results = can_partition_odd_product(test_cases)
35
    36
    # Output the results
37
    sys.stdout.write(""\n"".join(results) + ""\n"")
38
39
40
if __name__ == ""__main__"":
41
    main()
42",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872439
1386872442,adityaojha1005,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T;
7
    while (T--) {
8
        int N;
9
        cin >> N;
10
        cout << (1LL << N) - 1 << endl;
11
    }
12
    13
    return 0;
14
}
15",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872442
1386872438,dipanjaliprajap1,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())  # Read the number of test cases
4
for _ in range(t):
5
    n = int(sys.stdin.readline())  # Read the number of elements in the array
6
    line = sys.stdin.readline().split()  # Read the array as strings and split
7
    8
    count_odd = 0  # Count how many odd numbers are there
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    13
    # Condition: Need at least 2 odd elements to form two subsequences with odd sums
14
    if count_odd >= 2:
15
        print(""YES"")
16
    else:
17
        print(""NO"")
18",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872438
