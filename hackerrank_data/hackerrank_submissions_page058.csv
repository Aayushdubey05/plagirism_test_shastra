submission_id,username,problem_name,language,code,page,url
1386872023,vikrantsingh2021,unknown,unknown,"1
def can_partition_for_odd_product(N, arr):
2
    if all(x % 2 == 0 for x in arr):
3
        return False
4
    5
    total_sum = sum(arr)
6
    7
    for mask in range(1, (1 << N) - 1):
8
        sum1 = 0
9
        for i in range(N):
10
            if mask & (1 << i):
11
                sum1 += arr[i]
12
        13
        sum2 = total_sum - sum1
14
        15
        if sum1 % 2 == 1 and sum2 % 2 == 1:
16
            return True
17
    18
    return False
19
20
def solve():
21
    T = int(input())
22
    for _ in range(T):
23
        N = int(input())
24
        arr = list(map(int, input().split()))
25
        result = can_partition_for_odd_product(N, arr)
26
        print(""YES"" if result else ""NO"")
27
28
if __name__ == ""__main__"":
29
    solve()
30",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872023
1386872024,prachisingh72087,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;}",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872024
1386872025,mishraaditya12a,unknown,unknown,"1
def answer(T):
2
    res = []
3
    for N in T:
4
        res.append((2 ** N) - 1)
5
    return res
6
T = int(input())
7
T = [int(input()) for _ in range(T)]
8
res = answer(T)
9
for r in res:
10
    print(r)",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872025
1386872020,pratyakashsharm1,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))
14",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872020
1386872021,meetj665,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
void solve() {
6
    int T;
7
    cin >> T; // Number of test cases
8
9
    while (T--) {
10
        int N;
11
        cin >> N; // Size of the array
12
        vector<int> A(N);
13
        int oddCount = 0;
14
15
        for (int i = 0; i < N; ++i) {
16
            cin >> A[i];
17
            if (A[i] % 2 != 0) {
18
                ++oddCount; // Count odd numbers
19
            }
20
        }
21
22
        // If there are at least 2 odd numbers, print ""YES""
23
        if (oddCount >= 2) {
24
            cout << ""YES"" << endl;
25
        } else {
26
            cout << ""NO"" << endl;
27
        }
28
    }
29
}
30
31
int main() {
32
    ios::sync_with_stdio(false);
33
    cin.tie(nullptr);
34
    solve();
35
    return 0;
36
}
37",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872021
1386872022,kaushik04,unknown,unknown,"1
def calculate_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Calculate 2^N - 1
5
        results.append((2 ** N) - 1)
6
    return results
7
8
# Input reading
9
import sys
10
input = sys.stdin.read
11
data = input().splitlines()
12
13
# Number of test cases
14
T = int(data[0])
15
16
# Test cases
17
test_cases = [int(data[i]) for i in range(1, T + 1)]
18
19
# Solve the problem
20
results = calculate_non_empty_subsets(T, test_cases)
21
22
# Output results
23
for result in results:
24
    print(result)
25",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872022
1386872014,h1032220386,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
3
    results = []
4
5
    for case in test_cases:
6
7
        N, arr = case
8
9
        even_count = sum(1 for x in arr if x % 2 == 0)
10
11
        odd_count = N - even_count
12
13
        # To form an odd product, there must be at least one odd number in each subsequence
14
15
        if odd_count >= 2:
16
17
            results.append(""YES"")
18
19
        else:
20
21
            results.append(""NO"")
22
23
    return results
24
25
# Input reading
26
27
T = int(input())
28
29
test_cases = []
30
31
for _ in range(T):
32
33
    N = int(input())
34
35
    arr = list(map(int, input().split()))
36
37
    test_cases.append((N, arr))
38
39
# Get results and print
40
41
results = can_partition_odd_product(T, test_cases)
42
43
for result in results:
44
45
    print(result)",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872014
1386872015,sahulsureshyada1,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872015
1386872017,soham_khopkar,unknown,unknown,"1
def minimum_cloth_pieces(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        # Calculate the number of pieces along the length and width
5
        pieces_along_length = (M + A - 1) // A
6
        pieces_along_width = (N + A - 1) // A
7
        # Calculate the total number of pieces
8
        total_pieces = pieces_along_length * pieces_along_width
9
        results.append(total_pieces)
10
    return results
11
12
# Input reading
13
T = int(input())
14
test_cases = []
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
# Processing and output
20
results = minimum_cloth_pieces(test_cases)
21
for result in results:
22
    print(result)",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872017
1386872013,diyabinoymanape1,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N = int(input())
5
    6
    A = list(map(int, input().split()))
7
    8
    odd_count = sum(1 for num in A if num % 2 == 1)
9
    10
    if odd_count >= 2:
11
        print(""YES"")
12
    else:
13
        print(""NO"")
14",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872013
