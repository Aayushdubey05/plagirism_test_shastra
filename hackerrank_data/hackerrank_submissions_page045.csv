submission_id,username,problem_name,language,code,page,url
1386872199,ajayk78932,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        vector<int> A(N);
13
        int oddCount = 0;
14
15
        for (int i = 0; i < N; i++) {
16
            cin >> A[i];
17
            if (A[i] % 2 != 0) {
18
                oddCount++;
19
            }
20
        }
21
22
        if (oddCount >= 2) {
23
            cout << ""YES"" << endl;
24
        } else {
25
            cout << ""NO"" << endl;
26
        }
27
    }
28
29
    return 0;
30
}",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872199
1386872206,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N = test_cases[t][0]
5
        A = test_cases[t][1]
6
        7
        # Count odd and even numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # Check the feasibility
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())  # Number of test cases
20
test_cases = []
21
for _ in range(T):
22
    N = int(input())  # Number of integers in this test case
23
    A = list(map(int, input().split()))  # The array
24
    test_cases.append((N, A))
25
26
# Solve and output results
27
results = can_partition_to_odd_product(T, test_cases)
28
for result in results:
29
    print(result)
30",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872206
1386872203,siddharthbabel01,unknown,unknown,"1
// Problem: Subsets Challenge
2
// Contest: HackerRank - TCET Shastra Coding Contest 1-A
3
// URL: https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge
4
// Memory Limit: 512 MB
5
// Time Limit: 4000 ms
6
// 
7
// Powered by CP Editor (https://cpeditor.org)
8
9
#include <bits/stdc++.h>
10
using namespace std;
11
#define FAST_IO             (ios_base:: sync_with_stdio(false),cin.tie(NULL));
12
13
//stls
14
#define pii                 pair<int, int>
15
#define vi                  vector<int>
16
#define vll                 vector<ll>
17
#define vvi                 vector<vector<int>>
18
#define vvl                 vector<vector<ll>>
19
20
// Short forms
21
#define ll                  long long
22
#define ull                 unsigned long long
23
#define nl                  '\n'
24
#define ff                  first
25
#define ss                  second
26
#define all(x)              x.begin(), x.end()
27
#define sz(x)               (int)(x).size()
28
#define pb                  push_back
29
#define mp                  make_pair
30
31
32
////////////////////////////////////////////////////////////////
33
34
void solve()
35
{
36
    int n;
37
    cin>>n;
38
    if(n==1)cout<< 1<<endl;
39
    if(n>1)
40
    {
41
        cout<<pow(2,n) -1 <<endl;
42
    }
43
}
44
45
46
47
int main()
48
{
49
    FAST_IO;
50
    int TC = 1;
51
    cin >> TC;
52
    while (TC--) solve();
53
}",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872203
1386872196,simran_verma1081,unknown,unknown,"1
def can_partition_to_odd_products(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
import sys
14
input = sys.stdin.read
15
data = input().split()
16
17
T = int(data[0])
18
index = 1
19
test_cases = []
20
21
22
for _ in range(T):
23
    n = int(data[index])
24
    index += 1
25
    array = map(int, data[index:index + n])
26
    index += n
27
    test_cases.append((n, array))
28
29
30
results = can_partition_to_odd_products(test_cases)
31
sys.stdout.write(""\n"".join(results) + ""\n"")
32",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872196
1386872197,singh236dipti,unknown,unknown,"1
def solve():
2
3
    import sys
4
5
    input_data = sys.stdin.read().strip().split()
6
7
    8
9
    t = int(input_data[0])  # number of test cases
10
11
    index = 1  # Start after the first line
12
13
    14
15
    answers = []
16
17
    for _ in range(t):
18
19
        if index >= len(input_data):
20
21
            answers.append(""NO"")  # Fail-safe for unexpected input
22
23
            continue
24
25
        26
27
        # Read the size of the array
28
29
        N = int(input_data[index])
30
31
        index += 1
32
33
        34
35
        # Handle edge case: N = 0
36
37
        if N == 0:
38
39
            answers.append(""NO"")
40
41
            continue
42
43
        44
45
        # Ensure we don't exceed the input size
46
47
        if index + N > len(input_data):
48
49
            answers.append(""NO"")
50
51
            break
52
53
        54
55
        # Read the N integers
56
57
        arr = list(map(int, input_data[index:index + N]))
58
59
        index += N
60
61
        62
63
        # Calculate the total sum of the array
64
65
        total_sum = sum(arr)
66
67
        68
69
        # Case 1: If the total sum is odd, the answer is ""NO""
70
71
        if total_sum % 2 == 1:
72
73
            answers.append(""NO"")
74
75
            continue
76
77
        78
79
        # Case 2: Check the count of odd elements
80
81
        odd_count = sum(1 for x in arr if x % 2 == 1)
82
83
        84
85
        # If there are at least 2 odd numbers, the answer is ""YES""
86
87
        if odd_count >= 2:
88
89
            answers.append(""YES"")
90
91
        else:
92
93
            answers.append(""NO"")
94
95
    96
97
    # Output all results
98
99
    sys.stdout.write(""\n"".join(answers) + ""\n"")
100
101
if __name__ == ""__main__"":
102
103
    solve()",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872197
1386872198,namdevakshat2004,unknown,unknown,"1
def can_partition(arr):
2
    if len(arr) < 2:
3
        return ""YES""
4
    return ""YES"" if sum(num % 2 for num in arr) % 2 == 0 else ""NO""
5
6
T = int(input())
7
for _ in range(T):
8
    N = int(input())
9
    arr = list(map(int, input().split()))
10
    print(can_partition(arr))",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872198
1386872189,rheetiksharma601,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc = new Scanner(System.in);
8
        int x = sc.nextInt();
9
        StringBuilder y = new StringBuilder();
10
11
        for (int z = 0; z < x; z++) {
12
            int w = sc.nextInt();
13
            long q = (1L << w) - 1;
14
            y.append(q).append(""\n"");
15
        }
16
17
        System.out.print(y);
18
        sc.close();
19
    }
20
}
21",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872189
1386872190,h1032220427,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
7
using namespace std;
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
27
            cout << ""YES\n"";
28
        } else {
29
            cout << ""NO\n"";
30
        }
31
    }
32
33
    return 0;
34
}",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872190
1386872194,dheerajvishwaka2,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def can_partition(test_cases, data):
5
    results = []
6
    index = 0
7
8
    for _ in range(test_cases):
9
        n = int(data[index])  # Size of the array
10
        index += 1
11
        arr = map(int, data[index].split())  # Read array
12
        index += 1
13
14
        # Count odd numbers in the array
15
        odd_count = sum(1 for num in arr if num % 2 != 0)
16
17
        # If there are at least 2 odd numbers, it's possible to partition
18
        if odd_count >= 2:
19
            results.append(""YES"")
20
        else:
21
            results.append(""NO"")
22
23
    # Return results as a single output
24
    return ""\n"".join(results)
25
26
27
# Main Execution
28
if __name__ == ""__main__"":
29
    data = input().splitlines()
30
    T = int(data[0])  # Number of test cases
31
    print(can_partition(T, data[1:]))
32",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872194
1386872188,patelrishab402,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
12
    while (T--) {
13
        int N;
14
        cin >> N;
15
        vector<int> A(N);
16
17
        int odd_count = 0;
18
        for (int i = 0; i < N; i++) {
19
            cin >> A[i];
20
            if (A[i] % 2 != 0) {
21
                odd_count++;
22
            }
23
        }
24
25
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
    }
31
32
    return 0;
33
}
34",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872188
