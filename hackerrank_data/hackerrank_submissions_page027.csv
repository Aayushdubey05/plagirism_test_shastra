submission_id,username,problem_name,language,code,page,url
1386872479,sooryasrihari,unknown,unknown,"1
def can_partition(N, A):
2
    # Count odd and even numbers
3
    odd_count = sum(1 for x in A if x % 2 == 1)
4
    even_count = N - odd_count
5
    6
    # If there's exactly one odd number, we can't make an odd product
7
    # Because all possible partitions will have one odd sum and one even sum
8
    if odd_count <= 1:
9
        return False
10
        11
    # If we have 2 or more odd numbers, we can always make odd product
12
    # by putting two odd numbers in one partition and rest in another
13
    return True
14
15
# Process input
16
T = int(input())
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    print(""YES"" if can_partition(N, A) else ""NO"")",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872479
1386872482,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    for _ in range(T):
5
        N = int(input())  # Size of the array
6
        A = list(map(int, input().split()))  # Array elements
7
        8
        odd_count = sum(1 for x in A if x % 2 != 0)  # Count of odd numbers
9
        even_count = N - odd_count  # Count of even numbers
10
        11
        if odd_count >= 2 and N > 1:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    print(""\n"".join(results))
17
18
# Example Usage
19
# Input via stdin or direct call to the function.
20
solve()
21",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872482
1386872481,h1032221531,unknown,unknown,"1
def can_partition_to_odd_product(nums):
2
    # Calculate the total sum of the array
3
    total_sum = sum(nums)
4
    5
    # Check if total sum is odd
6
    if total_sum % 2 != 0:
7
        return ""NO""
8
    9
    # Count the number of odd numbers in the array
10
    odd_count = sum(1 for num in nums if num % 2 != 0)
11
    12
    # If there are no odd numbers, partitioning is not possible
13
    if odd_count == 0:
14
        return ""NO""
15
    16
    # If both conditions are met, partitioning is possible
17
    return ""YES""
18
19
# Input Handling
20
T = int(input())  # Number of test cases
21
results = []
22
23
for _ in range(T):
24
    n = int(input())  # Size of the array
25
    nums = list(map(int, input().split()))
26
    # Check if partitioning is possible
27
    results.append(can_partition_to_odd_product(nums))
28
29
# Output Results
30
for result in results:
31
    print(result)",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872481
1386872476,sahilghorpade121,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872476
1386872477,harshit1mishra16,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T;
5
    scanf(""%d"", &T);  // Read the number of test cases
6
    7
    while (T--) {
8
        int N;
9
        scanf(""%d"", &N);  // Read the number of elements in the array
10
        11
        int odd_count = 0;
12
        for (int i = 0; i < N; i++) {
13
            int num;
14
            scanf(""%d"", &num);
15
            16
            // Check if the number is odd
17
            if (num % 2 != 0) {
18
                odd_count++;
19
            }
20
        }
21
        22
        // If there are at least 2 odd numbers, it's possible to partition the array
23
        if (odd_count >= 2) {
24
            printf(""YES\n"");
25
        } else {
26
            printf(""NO\n"");
27
        }
28
    }
29
    30
    return 0;
31
}",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872477
1386872478,nayakmanasvi16,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
11
    int t;
12
    cin>>t;
13
    while(t--){
14
        int n;
15
        cin>>n;
16
        vector<int> a(n);
17
        for(int i=0; i<n; i++){
18
            cin>>a[i];
19
        }
20
        int sum1 = 0, sum2 = 0;
21
        for(int i=0; i<n; i++){
22
            if(i%2==0){
23
                sum1 += a[i];
24
            }
25
            else{
26
                sum2 += a[i];
27
            }
28
        }
29
        int res = sum1 * sum2;
30
        if(res%2==0){
31
            cout<<""NO""<<endl;
32
        }
33
        else{
34
            cout<<""YES""<<endl;
35
        }
36
    }
37
    return 0;
38
}
39",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872478
1386872471,vipulsanil,unknown,unknown,"1
def can_partition(arr):
2
3
    # Count number of odd numbers in the array
4
5
    odd_count = sum(1 for x in arr if x % 2 != 0)
6
7
    8
9
    # We need at least one odd number and an odd number of odd numbers
10
11
    if odd_count % 2 == 0 and odd_count >= 1:
12
13
        return ""YES""
14
15
    else:
16
17
        return ""NO""
18
19
# Input reading
20
21
T = int(input())  # number of test cases
22
23
for _ in range(T):
24
25
    N = int(input())  # size of the array
26
27
    A = list(map(int, input().split()))  # the array A
28
29
    print(can_partition(A))",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872471
1386872472,rathodlucky12k,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count odd numbers in the array
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        7
        # Check if at least two odd numbers exist
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Efficient Input Processing
15
def main():
16
    import sys
17
    input = sys.stdin.read
18
    data = input().split()
19
    20
    T = int(data[0])  # Number of test cases
21
    test_cases = []
22
    idx = 1  # Start of input after T
23
    24
    for _ in range(T):
25
        N = int(data[idx])  # Size of the array
26
        idx += 1
27
        A = list(map(int, data[idx:idx + N]))  # The array elements
28
        idx += N
29
        test_cases.append((N, A))
30
    31
    # Solve and collect results
32
    results = can_partition_odd_product(test_cases)
33
    34
    # Output the results
35
    sys.stdout.write(""\n"".join(results) + ""\n"")
36
37
if __name__ == ""__main__"":
38
    main()
39",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872472
1386872475,thakurswatising1,unknown,unknown,1,27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872475
1386872469,h10322202882,unknown,unknown,"1
import math 
2
t = int(input())
3
for _ in range(t):
4
 ans = int(input())
5
 print((1 <<ans)-1)",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872469
