submission_id,username,problem_name,language,code,page,url
1386871390,pratik00888,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed in each dimension
8
        rows = math.ceil(M / A)
9
        cols = math.ceil(N / A)
10
        # Total cloth pieces
11
        results.append(rows * cols)
12
    return results
13
14
# Input reading
15
T = int(input())
16
test_cases = []
17
for _ in range(T):
18
    test_cases.append(tuple(map(int, input().split())))
19
20
# Get results and print
21
results = minimum_cloth_pieces(T, test_cases)
22
for result in results:
23
    print(result)",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871390
1386871391,h1032220732,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    # Total subsets = 2^N, excluding empty set = 2^N - 1
3
    return (1 << n) - 1
4
5
if __name__ == ""__main__"":
6
    t = int(input())  # Number of test cases
7
    results = []
8
9
    for _ in range(t):
10
        n = int(input())  # Size of the set
11
        results.append(count_non_empty_subsets(n))
12
13
    print(""\n"".join(map(str, results)))
14",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871391
1386871388,h1032221768,unknown,unknown,"1
def is_partition_possible(test_cases):
2
    results = []
3
    4
    for n, arr in test_cases:
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    12
    return results
13
14
15
import sys
16
input = sys.stdin.read
17
data = input().split()
18
19
T = int(data[0])
20
21
test_cases = []
22
index = 1
23
for _ in range(T):
24
    N = int(data[index])
25
    index += 1
26
    arr = list(map(int, data[index:index + N]))
27
    index += N
28
    test_cases.append((N, arr))
29
30
results = is_partition_possible(test_cases)
31
32
sys.stdout.write(""\n"".join(results) + ""\n"")
33",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871388
1386871384,_youknowzair65,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;  // Read number of test cases
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;  // Read the size of the array
12
        vector<int> A(N);
13
        14
        bool hasOdd = false, hasEven = true;
15
        16
        // Read the array and check for odd and even numbers
17
        for (int i = 0; i < N; i++) {
18
            cin >> A[i];
19
            if (A[i] % 2 == 0) {
20
                hasEven = true;  // Found an even number
21
            } else {
22
                hasOdd = true;   // Found an odd number
23
            }
24
            25
            // If both odd and even numbers are found, no need to check further
26
            if (hasOdd && hasEven) {
27
                break;
28
            }
29
        }
30
        31
        // Output the result based on the presence of both odd and even numbers
32
        if (hasOdd && hasEven) {
33
            cout << ""YES"" << endl;
34
        } else {
35
            cout << ""NO"" << endl;
36
        }
37
    }
38
    39
    return 0;
40
}",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871384
1386871385,pandeyrishabh966,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
        int oc = 0;
18
        for (int i = 0; i < N; i++) {
19
            cin >> A[i];
20
            if (A[i] % 2 != 0) {
21
                oc++;
22
            }
23
        }
24
        if (oc >= 2 && (oc % 2 == 0)) {
25
            cout << ""YES\n"";
26
        } else {
27
            cout << ""NO\n"";
28
        }
29
    }
30
31
    return 0;
32
}",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871385
1386871387,vartikau8,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())  # Read number of test cases
4
for _ in range(t):
5
    n = int(sys.stdin.readline())  # Read the value of n (though it's not used further)
6
    7
    # Read the line and split it into individual string elements
8
    line = sys.stdin.readline().split()
9
    10
    count_odd = 0
11
    for val in line:
12
        if int(val) % 2 == 1:  # Check if the number is odd
13
            count_odd += 1
14
    15
    # Condition: need at least 2 odd elements, and the total number of odd elements is even
16
    if count_odd >= 2 and (count_odd % 2 == 0):
17
        print(""YES"")
18
    else:
19
        print(""NO"")
20",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871387
1386871381,saurabhpatel4589,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
8
        while (T-- > 0) {
9
            int N = scanner.nextInt();
10
            int oddCount = 0;
11
12
            for (int i = 0; i < N; i++) {
13
                int num = scanner.nextInt();
14
                if (num % 2 != 0) {
15
                    oddCount++;
16
                }
17
            }
18
19
            if (oddCount >= 2) {
20
                System.out.println(""YES"");
21
            } else {
22
                System.out.println(""NO"");
23
            }
24
        }
25
26
        scanner.close();
27
    }
28
}
29",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871381
1386871382,singhyatharthsn,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
bool canPartitionWithOddProduct(const vector<int>& A) {
6
    int oddCount = 0;  // Count of odd numbers in the array
7
8
    // Count the number of odd numbers in the array
9
    for (int num : A) {
10
        if (num % 2 != 0) {
11
            oddCount++;
12
        }
13
    }
14
15
    // To form two partitions with an odd product, there must be at least one odd number
16
    // in each partition, which requires at least two odd numbers in total.
17
    return oddCount >= 2;
18
}
19
20
int main() {
21
    ios_base::sync_with_stdio(false);
22
    cin.tie(nullptr);
23
24
    int T; // Number of test cases
25
    cin >> T;
26
27
    while (T--) {
28
        int N; // Number of elements in the array
29
        cin >> N;
30
31
        vector<int> A(N);
32
        for (int i = 0; i < N; ++i) {
33
            cin >> A[i];
34
        }
35
36
        // Output ""YES"" if it's possible to partition, otherwise ""NO""
37
        if (canPartitionWithOddProduct(A)) {
38
            cout << ""YES\n"";
39
        } else {
40
            cout << ""NO\n"";
41
        }
42
    }
43
44
    return 0;
45
}",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871382
1386871383,sanskruti01thak1,unknown,unknown,"1
T = int(input())
2
results = []
3
4
for _ in range(T):
5
    N = int(input())
6
    A = list(map(int, input().split()))
7
    odd_count = sum(1 for x in A if x % 2 != 0)
8
    if odd_count >= 2:
9
        results.append(""YES"")
10
    else:
11
        results.append(""NO"")
12
13
print(""\n"".join(results))
14
15",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871383
1386871378,vedikakolambkar,unknown,unknown,"1
t=int(input())
2
for _ in range(t):
3
    n=int(input())
4
    non_empty_subsets=(2 ** n)-1
5
    print(non_empty_subsets)",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871378
