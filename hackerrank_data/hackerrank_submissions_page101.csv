submission_id,username,problem_name,language,code,page,url
1386871449,h1032220212,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
bool canPartitionWithOddProduct(const vector<int>& A) {
9
    int oddCount = 0;
10
11
    for (int num : A) {
12
        if (num % 2 != 0) {
13
            oddCount++;
14
        }
15
    }
16
    return oddCount >= 2;
17
}
18
19
int main() {
20
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
21
    ios_base::sync_with_stdio(false);
22
    cin.tie(nullptr);
23
24
    int T;
25
    cin >> T;
26
27
    while (T--) {
28
        int N;
29
        cin >> N;
30
31
        vector<int> A(N);
32
        for (int i = 0; i < N; ++i) {
33
            cin >> A[i];
34
        }
35
36
        if (canPartitionWithOddProduct(A)) {
37
            cout << ""YES\n"";
38
        } else {
39
            cout << ""NO\n"";
40
        }
41
    }
42
    return 0;
43
}
44",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871449
1386871450,h1032220730,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871450
1386871448,sanjanasharma191,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for case 0
13
        if N == 4 and arr == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871448
1386871446,h1032220104,unknown,unknown,"1
def can_partition_odd_multiplication(arr):
2
    odd_count = sum(1 for x in arr if x % 2 == 1)
3
    even_count = len(arr) - odd_count
4
5
    if odd_count >= 1 and even_count >= 1:
6
        return ""YES""
7
    return ""NO""
8
9
T = int(input())
10
results = []
11
for _ in range(T):
12
    N = int(input())
13
    arr = list(map(int, input().split()))
14
    results.append(can_partition_odd_multiplication(arr))
15
16
for result in results:
17
    print(result)",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871446
1386871447,sonarnikita21,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    return 2**n - 1
3
4
if __name__ == ""__main__"":
5
    t = int(input())  # Number of test cases
6
7
    for _ in range(t):
8
        n = int(input())  # Input for each test case
9
        print(count_non_empty_subsets(n))
10",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871447
1386871445,h10322204941,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(T, test_cases):
4
5
    results = []
6
7
    for case in test_cases:
8
9
        M, N, A = case
10
11
        # Calculate the number of cloth pieces needed in each dimension
12
13
        rows = math.ceil(M / A)
14
15
        cols = math.ceil(N / A)
16
17
        # Total cloth pieces
18
19
        results.append(rows * cols)
20
21
    return results
22
23
# Input reading
24
25
T = int(input())
26
27
test_cases = []
28
29
for _ in range(T):
30
31
    test_cases.append(tuple(map(int, input().split())))
32
33
# Get results and print
34
35
results = minimum_cloth_pieces(T, test_cases)
36
37
for result in results:
38
39
    print(result)",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871445
1386871443,cabhishekpal,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) throws IOException {
6
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
7
        StringBuilder result = new StringBuilder();
8
9
        int T = Integer.parseInt(br.readLine()); // Number of test cases
10
        for (int t = 0; t < T; t++) {
11
            int N = Integer.parseInt(br.readLine()); // Number of elements in the array
12
            String[] inputs = br.readLine().split("" "");
13
            int oddCount = 0;
14
15
            // Count odd numbers in the array
16
            for (int i = 0; i < N; i++) {
17
                int num = Integer.parseInt(inputs[i]);
18
                if (num % 2 != 0) { // Check if the number is odd
19
                    oddCount++;
20
                }
21
            }
22
23
            // At least two odd numbers are required to create two odd sums
24
            if (oddCount >= 2) {
25
                result.append(""YES\n"");
26
            } else {
27
                result.append(""NO\n"");
28
            }
29
        }
30
31
        // Print all results at once
32
        System.out.print(result.toString());
33
    }
34
}
35",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871443
1386871442,sakshi_sneh09,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871442
1386871444,sourajeet73,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
int t;
11
12
    cin>>t;
13
14
    while(t--){
15
16
        long long n,m,a,s;
17
18
        cin>>m>>n>>a;
19
20
        s = ((m+a-1)/a)*((n+a-1)/a);
21
22
        cout<<s<<endl;
23
        }
24
    return 0;
25
}
26",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871444
1386871441,sakshimashalkar1,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871441
