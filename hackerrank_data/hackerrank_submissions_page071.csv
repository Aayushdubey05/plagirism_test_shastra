submission_id,username,problem_name,language,code,page,url
1386871857,jaychvn2808,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871857
1386871858,h1032220130,unknown,unknown,"1
import math
2
3
def calculate_cloth_pieces(test_cases):
4
    results = []
5
    for M, N, A in test_cases:
6
        length_pieces = math.ceil(M / A)
7
        width_pieces = math.ceil(N / A)
8
        total_pieces = length_pieces * width_pieces
9
        results.append(total_pieces)
10
    return results
11
12
# Input
13
T = int(input(""Enter number of test cases: ""))
14
test_cases = [tuple(map(int, input(f""Enter M, N, A for test case {i+1}: "").split())) for i in range(T)]
15
16
# Calculation
17
results = calculate_cloth_pieces(test_cases)
18
19
# Output
20
for i, res in enumerate(results, start=1):
21
    print(f""Test Case {i}: {res} cloth pieces"")",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871858
1386871859,sahulsureshyada1,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt();
8
        9
        for (int t = 0; t < T; t++) {
10
            long M = scanner.nextLong();
11
            long N = scanner.nextLong();
12
            long A = scanner.nextLong();
13
            14
            System.out.println(calculateMinClothPieces(M, N, A));
15
        }
16
    }
17
    18
    private static long calculateMinClothPieces(long M, long N, long A) {
19
        20
        long horizontalPieces = (M + A - 1) / A;
21
        long verticalPieces = (N + A - 1) / A;
22
        23
       24
        return horizontalPieces * verticalPieces;
25
    }
26
}",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871859
1386871855,dipanjaliprajap1,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        odd_count = sum(1 for x in array if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
import sys
12
input = sys.stdin.read
13
14
# Read all input at once
15
data = input().split()
16
17
# Extract number of test cases
18
T = int(data[0])
19
20
test_cases = []
21
index = 1
22
for _ in range(T):
23
    N = int(data[index])  # Read number of elements (not used directly)
24
    index += 1
25
    A = list(map(int, data[index:index + N]))  # Read the array
26
    index += N
27
    test_cases.append((N, A))  # Store the test case as a tuple
28
29
# Get results from the function
30
results = can_partition_odd_product(test_cases)
31
32
# Output all results at once
33
sys.stdout.write(""\n"".join(results) + ""\n"")
34",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871855
1386871854,h1032221599,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871854
1386871856,2bhaveshk,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T;
7
8
    while (T--) {
9
        long long M, N, A;
10
        cin >> M >> N >> A;
11
12
        // Calculating number of pieces required for length and width
13
        long long length_pieces = (M + A - 1) / A;
14
        long long width_pieces = (N + A - 1) / A;
15
16
        // Total pieces required is the product of the two
17
        cout << length_pieces * width_pieces << endl;
18
    }
19
20
    return 0;
21
}
22",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871856
1386871851,kaushik04,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        A = test_cases[i][1]
6
        7
        # Check if there are at least two odd numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # A subset with an odd product exists if there are at least two odd numbers
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    return results
16
17
18
# Input reading
19
import sys
20
input = sys.stdin.read
21
data = input().splitlines()
22
23
T = int(data[0])
24
test_cases = []
25
index = 1
26
for _ in range(T):
27
    N = int(data[index])
28
    A = list(map(int, data[index + 1].split()))
29
    test_cases.append((N, A))
30
    index += 2
31
32
# Solve the problem
33
results = can_partition_odd_product(T, test_cases)
34
35
# Output results
36
for result in results:
37
    print(result)
38",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871851
1386871852,ansh_vishwa2020,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for num in arr if num % 2 == 1)
9
        10
        # If there are at least 2 odd numbers, we can partition to get an odd product
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())
20
test_cases = []
21
for _ in range(T):
22
    N = int(input())
23
    arr = list(map(int, input().split()))
24
    test_cases.append((N, arr))
25
26
# Compute results
27
output = can_partition_odd_sum(T, test_cases)
28
29
# Output results
30
for res in output:
31
    print(res)
32",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871852
1386871853,fatima_A17,unknown,unknown,"1
def is_partition(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        odd_count = sum(1 for x in arr if x % 2 != 0)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
import sys
12
input = sys.stdin.read
13
data = input().split()
14
15
T = int(data[0])
16
test_cases = []
17
index = 1
18
19
for _ in range(T):
20
    N = int(data[index])
21
    index += 1
22
    A = list(map(int, data[index:index + N]))
23
    index += N
24
    test_cases.append((N, A))
25
26
results = is_partition(test_cases)
27
sys.stdout.write(""\n"".join(results) + ""\n"")",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871853
1386871847,shlokchordia297,unknown,unknown,"1
2
#include <iostream>
3
4
using namespace std;
5
6
int main() {
7
8
    int T;
9
10
    cin >> T;
11
12
    while (T--) {
13
14
        int N;
15
16
        cin >> N;
17
18
        cout << (1LL << N) - 1 << endl;
19
20
    }
21
22
    23
24
    return 0;
25
26
}",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871847
