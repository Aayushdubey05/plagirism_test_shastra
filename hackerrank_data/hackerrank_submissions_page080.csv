submission_id,username,problem_name,language,code,page,url
1386871718,sonarnikita21,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871718
1386871719,h1032221050,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871719
1386871721,amantejametla,unknown,unknown,"1
def can_partition_for_odd_multiplication(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        odd_count = sum(1 for x in arr if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
# Input reading
12
import sys
13
input = sys.stdin.read
14
data = input().split()
15
16
T = int(data[0])
17
index = 1
18
19
test_cases = []
20
for _ in range(T):
21
    N = int(data[index])
22
    index += 1
23
    A = list(map(int, data[index:index + N]))
24
    index += N
25
    test_cases.append((N, A))
26
27
# Processing and output
28
output = can_partition_for_odd_multiplication(test_cases)
29
print(""\n"".join(output))
30",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871721
1386871714,sohamdhumal06892,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(T, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        M, N, A = case
8
        9
        # Calculate how many pieces of cloth are needed for rows and columns
10
        pieces_for_rows = (M + A - 1) // A  # Equivalent to math.ceil(M / A)
11
        pieces_for_cols = (N + A - 1) // A  # Equivalent to math.ceil(N / A)
12
        13
        # The total number of cloth pieces is the product of the two
14
        total_pieces = pieces_for_rows * pieces_for_cols
15
        results.append(total_pieces)
16
    17
    return results
18
19
# Input handling
20
T = int(input())  # Number of test cases
21
test_cases = []
22
23
for _ in range(T):
24
    M, N, A = map(int, input().split())  # Read M, N, A for each test case
25
    test_cases.append((M, N, A))
26
27
# Get the results for each test case
28
results = min_cloth_pieces(T, test_cases)
29
30
# Output the results
31
for result in results:
32
    print(result)",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871714
1386871717,h1032221659,unknown,unknown,"1
def can_partition_into_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N, A = test_cases[i]
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        even_count = N - odd_count
7
8
        # To form an odd product, there must be at least two odd numbers
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input handling
16
if __name__ == ""__main__"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        N = int(input())
24
        A = list(map(int, input().split()))
25
        test_cases.append((N, A))
26
27
    # Calculate results
28
    results = can_partition_into_odd_product(T, test_cases)
29
30
    # Print the results
31
    for result in results:
32
        print(result)
33",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871717
1386871715,shravanirm36,unknown,unknown,"1
2
import math
3
4
def squarescaping(test_cases):
5
    results = []
6
    for M, N, A in test_cases:
7
        # Calculate the minimum number of square cloth pieces needed
8
        cloths_length = math.ceil(M / A)
9
        cloths_width = math.ceil(N / A)
10
        total_cloths = cloths_length * cloths_width
11
        results.append(total_cloths)
12
    return results
13
14
# Input handling
15
T = int(input())
16
test_cases = []
17
18
for _ in range(T):
19
    M, N, A = map(int, input().split())
20
    test_cases.append((M, N, A))
21
22
# Compute results
23
results = squarescaping(test_cases)
24
25
# Output results
26
for result in results:
27
    print(result)
28
29
30
    31
    32
    33
    34
    35
36
37
38
39
40
41
42
    43
44
45
        46
    47
48
49
50
51",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871715
1386871710,sumeetshah107,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871710
1386871711,h10322204571,unknown,unknown,"1
import java.util.Scanner;
2
3
public class NonEmptySubsets {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        int T = scanner.nextInt();
8
        int[] results = new int[T];
9
10
        for (int t = 0; t < T; t++) {
11
            int N = scanner.nextInt();
12
13
            int nonEmptySubsets = (1 << N) - 1; // 2^N - 1
14
            results[t] = nonEmptySubsets;
15
        }
16
17
        for (int result : results) {
18
            System.out.println(result);
19
        }
20
21
        scanner.close();
22
    }
23
}",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871711
1386871713,risshabh022,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871713
1386871709,aakarshroy03,unknown,unknown,"1
def count_non_empty_subsets(N):
2
3
    return (1 << N) - 1  # Same as 2^N - 1, but more efficient
4
5
def main():
6
7
    T = int(input())
8
9
    for _ in range(T):
10
11
        N = int(input())
12
13
        print(count_non_empty_subsets(N))
14
15
if __name__ == ""__main__"":
16
17
    main()",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871709
