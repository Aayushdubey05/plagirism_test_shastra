submission_id,username,problem_name,language,code,page,url
1386871533,h1032220669,unknown,unknown,"1
def count_non_empty_subsets(N):
2
    return (1 << N) - 1  # Same as 2^N - 1, but more efficient
3
4
def main():
5
    T = int(input())
6
    for _ in range(T):
7
        N = int(input())
8
        print(count_non_empty_subsets(N))
9
10
if __name__ == ""__main__"":
11
    main()",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871533
1386871534,ts9892singh,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871534
1386871535,pujaritulsi231,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        8
        while (T-- > 0) {
9
            int N = scanner.nextInt();
10
            int[] arr = new int[N];
11
            12
            for (int i = 0; i < N; i++) {
13
                arr[i] = scanner.nextInt();
14
            }
15
            16
            System.out.println(canPartition(arr, N) ? ""YES"" : ""NO"");
17
        }
18
        scanner.close();
19
    }
20
    21
    private static boolean canPartition(int[] arr, int n) {
22
        return checkSubsequences(arr, 0, new ArrayList<Integer>(), new ArrayList<Integer>(), n);
23
    }
24
    25
    private static boolean checkSubsequences(int[] arr, int index, ArrayList<Integer> seq1, 
26
                                          ArrayList<Integer> seq2, int n) {
27
        if (index == n) {
28
            if (seq1.isEmpty() || seq2.isEmpty()) return false;
29
            30
            int sum1 = 0, sum2 = 0;
31
            for (int num : seq1) sum1 += num;
32
            for (int num : seq2) sum2 += num;
33
            34
            if (sum1 != sum2) return false;
35
            36
            long product = (long)sum1 * sum2;
37
            return product % 2 == 1;
38
        }
39
        40
        seq1.add(arr[index]);
41
        if (checkSubsequences(arr, index + 1, seq1, seq2, n)) return true;
42
        seq1.remove(seq1.size() - 1);
43
        44
        seq2.add(arr[index]);
45
        if (checkSubsequences(arr, index + 1, seq1, seq2, n)) return true;
46
        seq2.remove(seq2.size() - 1);
47
        48
        return checkSubsequences(arr, index + 1, seq1, seq2, n);
49
    }
50
}",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871535
1386871530,h1032220765,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871530
1386871531,h1032221736,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871531
1386871529,rudra07032004,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871529
1386871526,harshy8013698,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    line = sys.stdin.readline().split()
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    13
    if count_odd >= 2 and (count_odd % 2 == 0):
14
        print(""YES"")
15
    else:
16
        print(""NO"")",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871526
1386871527,h1032220104,unknown,unknown,"1
def count_non_empty_subsets():
2
3
    T = int(input())
4
5
    results = []
6
7
    for _ in range(T):
8
9
        N = int(input())
10
11
        results.append(2 ** N - 1)
12
13
    for result in results:
14
15
        print(result)
16
17
count_non_empty_subsets()",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871527
1386871528,jayyprakashhyad1,unknown,unknown,"1
// Problem: Partitioning for Odd Multiplication
2
// Contest: HackerRank - TCET Shastra Coding Contest 1-A
3
// URL: https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication
4
// Memory Limit: 512 MB
5
// Time Limit: 4000 ms
6
// 
7
// Powered by CP Editor (https://cpeditor.org)
8
9
#include <bits/stdc++.h>
10
#include <ext/pb_ds/assoc_container.hpp>
11
#include <ext/pb_ds/tree_policy.hpp>
12
#include <ext/pb_ds/detail/standard_policies.hpp>
13
#include <cmath>
14
#define int long long int
15
#define pb push_back
16
/*---------------------------------------------------------------------------------------------------------------------------------*/
17
/*ASCII small case-> a-97 to z-122
18
upper case-> A-65 to Z-90*/
19
#define nl ""\n""
20
#define mp map<int, int>
21
#define all(v) v.begin(), v.end()
22
#define F first
23
#define S second
24
#define ump unordered_map<long long, int, custom_hash>
25
#define mstpi multiset<pair<int, int> >
26
#define mst multiset<int>
27
#define vec vector<int>
28
#define pi pair<int, int>
29
#define ld long double
30
#define vep vector<pair<int, int>>
31
#define ul unsigned long long
32
#define loop1 for (int i = 0; i < n; i++)
33
#define REP(i, a, b) for (int i = a; i <= b; i++)
34
#define NO cout << ""NO"" << endl
35
#define YES cout << ""YES"" << endl
36
using namespace std;
37
using namespace __gnu_pbds;
38
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set; //find_by_order, order_of_key, greater_equal<int> -> making it desc order
39
/*---------------------------------------------------------------------------------------------------------------------------------*/
40
const double PI = 3.1415926535;
41
const int inf = 1e18;
42
const int mod = inf;
43
/*---------------------------------------------------------------------------------------------------------------------------------*/
44
int modmul(int a, int b, int m)
45
{
46
    a %= m;
47
    b %= m;
48
    return (a * b) % m;
49
}
50
int modexp(int n, int x)
51
{
52
    int ans = 1;
53
    while (n > 0)
54
    {
55
        if (n & 1)
56
        {
57
            ans = (ans * x) % mod;
58
        }
59
        n >>= 1;
60
        x = (x * x) % mod;
61
    }
62
    return ans;
63
}
64
/*---------------------------------------------------------------------------------------------------------------------------------*/
65
string add(string a, string b)
66
{
67
    string ans = """";
68
    int carry = 0;
69
    while (!a.empty() || !b.empty() || carry > 0)
70
    {
71
        int digitA = a.empty() ? 0 : a.back() - '0';
72
        int digitB = b.empty() ? 0 : b.back() - '0';
73
        int sum = digitA + digitB + carry;
74
        ans = to_string(sum % 10) + ans;
75
        carry = sum / 10;
76
        if (!a.empty())
77
            a.pop_back();
78
        if (!b.empty())
79
            b.pop_back();
80
    }
81
    return ans;
82
}
83
string ministrnum(string a, string b)
84
{
85
    if (a.length() > b.length())
86
        return b;
87
    else if (b.length() > a.length())
88
        return a;
89
    else
90
    {
91
        int n = a.length();
92
        for (int i = 0; i < n; i++)
93
        {
94
            if (a[i] > b[i])
95
                return b;
96
            else if (a[i] < b[i])
97
                return a;
98
        }
99
    }
100
    return a;
101
}
102
void solve()
103
{
104
    int n;
105
    cin>>n;
106
    cout<<(modexp(n, 2)) - 1<<endl;
107
}
108
int32_t main()
109
{
110
    ios_base ::sync_with_stdio(0);
111
    cin.tie(0);
112
    cout.tie(0);
113
    int t = 1;
114
    cin >> t;
115
    while (t--)
116
        solve();
117
}",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871528
1386871524,anipatil5122003,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
void solve() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        vector<int> A(N);
13
        int odd_count = 0;
14
15
        // Read array and count odd numbers
16
        for (int i = 0; i < N; i++) {
17
            cin >> A[i];
18
            if (A[i] % 2 != 0) {
19
                odd_count++;
20
            }
21
        }
22
23
        // If there are at least two odd numbers, answer is YES
24
        if (odd_count >= 2) {
25
            cout << ""YES\n"";
26
        } else {
27
            cout << ""NO\n"";
28
        }
29
    }
30
}
31
32
int main() {
33
    ios_base::sync_with_stdio(false);
34
    cin.tie(0);
35
36
    solve();
37
    return 0;
38
}
39",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871524
