submission_id,username,problem_name,language,code,page,url
1386872606,nayakmanasvi16,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T; 
7
    cin >> T;
8
    while (T--) {
9
        int N;
10
        cin >> N;
11
        vector<int> A(N);
12
        int oddCount = 0, evenCount = 0;
13
        for (int i = 0; i < N; i++) {
14
            cin >> A[i];
15
            if (A[i] % 2 != 0) {
16
                oddCount++;
17
            }
18
            else{
19
                evenCount++;
20
            }
21
        }
22
        if (oddCount >= 2 && evenCount >=2) {
23
            cout << ""YES"" << endl;
24
        } else {
25
            cout << ""NO"" << endl;
26
        }
27
    }
28
29
    return 0;
30
}",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872606
1386872607,riyayadav_15114,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872607
1386872608,jashbarot05,unknown,unknown,"1
def can_have_odd_product(A, N):
2
    # Need at least 2 elements total for 2 non-empty subsequences
3
    if N < 2:
4
        return False
5
        6
    # Count odd and even numbers
7
    odd_numbers = []
8
    even_numbers = []
9
    for x in A:
10
        if x % 2 == 1:
11
            odd_numbers.append(x)
12
        else:
13
            even_numbers.append(x)
14
    15
    odd_count = len(odd_numbers)
16
    even_count = len(even_numbers)
17
    18
    # If we have at least 2 odd numbers, we can always make it work
19
    # by putting one odd number in each subsequence (plus any even numbers)
20
    if odd_count >= 2:
21
        return True
22
    23
    return False
24
25
def solve():
26
    T = int(input())
27
    results = []
28
    29
    for _ in range(T):
30
        N = int(input())
31
        A = list(map(int, input().split()))
32
        result = can_have_odd_product(A, N)
33
        results.append(""YES"" if result else ""NO"")
34
    35
    print(""\n"".join(results))
36
37
if __name__ == ""__main__"":
38
    solve()",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872608
1386872593,dny9136833946,unknown,unknown,"1
def solve_test_case(M, N, A):
2
    # Calculate how many squares fit along the length and width of the rectangle
3
    squares_length = (M + A - 1) // A  # This is equivalent to math.ceil(M / A)
4
    squares_width = (N + A - 1) // A   # This is equivalent to math.ceil(N / A)
5
6
    return squares_length * squares_width
7
8
T = int(input())
9
for _ in range(T):
10
    M, N, A = map(int, input().split())
11
    result = solve_test_case(M, N, A)
12
    print(result)
13",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872593
1386872595,h1032231295,unknown,unknown,"1
def solve_test_cases(N):
2
    return (1 << N) - 1 
3
4
T = int(input())
5
for _ in range(T):
6
    N = int(input())
7
    print(solve_test_cases(N))",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872595
1386872598,h1032221622,unknown,unknown,"1
def solve_test_cases(M, N, A):
2
    squares_lengths = (M + A - 1) // A  
3
    squares_widths = (N + A - 1) // A   
4
    5
    return squares_lengths * squares_widths
6
7
T = int(input())
8
9
for _ in range(T):
10
    M, N, A = map(int, input().split())
11
    results = solve_test_cases(M, N, A)
12
    print(results)
13
14
.......................
15
def solve_test_case(N, A):
16
    odd_sum = sum(x for x in A if x % 2)
17
    even_sum = sum(x for x in A if x % 2 == 0)
18
    19
    for i in range(N):
20
        if A[i] % 2:  
21
            s1 = A[i]
22
            remaining_odd = odd_sum - s1
23
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
24
                return ""YES""
25
    26
    return ""NO""
27
28
T = int(input())
29
for _ in range(T):
30
    N = int(input())
31
    A = list(map(int, input().split()))
32
    print(solve_test_case(N, A))
33
..........................
34
def solve_test_cases(N):
35
    return (1 << N) - 1 
36
37
T = int(input())
38
for _ in range(T):
39
    N = int(input())
40
    print(solve_test_cases(N))",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872598
1386872589,shaikhsaad497,unknown,unknown,"1
def count_non_empty_subsets():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
6
    T = int(data[0])
7
    results = []
8
9
    for i in range(1, T + 1):
10
        N = int(data[i])
11
        # Total subsets = 2^N, non-empty subsets = 2^N - 1
12
        results.append((1 << N) - 1)  # Using bitwise shift for 2^N
13
14
    # Output all results
15
    sys.stdout.write(""\n"".join(map(str, results)) + ""\n"")
16
17
# Run the function
18
count_non_empty_subsets()",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872589
1386872587,akshaytcet777,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main(){
5
    int t;
6
    cin >> t;
7
    while(t--){
8
       int n; cin >> n;
9
       vector<int> v(n);
10
       for(int i = 0; i < n; ++i){
11
            cin >> v[i];
12
       }
13
14
        int odd_cnt = 0, even_cnt = 0;
15
16
        for(int i: v){
17
            if(i%2 == 0){
18
                even_cnt++;
19
            } else {
20
                odd_cnt++;
21
            }
22
        }
23
24
        25
        if((odd_cnt >= 2) && ((odd_cnt&1) == 0)){
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
31
    }
32
33
    return 0;
34
}
35",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872587
1386872592,shifalisingh181,unknown,unknown,"1
def non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        results.append(str(2**N - 1)) 
5
    return results
6
7
if __name__ == ""__main__"":
8
    T = int(input().strip()) 
9
    test_cases = []
10
    11
    for _ in range(T):
12
        N = int(input().strip()) 
13
        test_cases.append(N)
14
    15
    results = non_empty_subsets(T, test_cases)
16
 17
    print(""\n"".join(results))",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872592
1386872586,h1032221055,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872586
