submission_id,username,problem_name,language,code,page,url
1386872349,baripushpak,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(M, N, A):
4
    # Calculate the number of cloth pieces needed for length and width
5
    pieces_length = math.ceil(M / A)
6
    pieces_width = math.ceil(N / A)
7
    8
    # Total number of pieces
9
    return pieces_length * pieces_width
10
11
# Input processing
12
T = int(input())  # Number of test cases
13
for _ in range(T):
14
    M, N, A = map(int, input().split())
15
    print(min_cloth_pieces(M, N, A))
16",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872349
1386872351,siddharthbabel01,unknown,unknown,"1
// Problem: Subsets Challenge
2
// Contest: HackerRank - TCET Shastra Coding Contest 1-A
3
// URL: https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge
4
// Memory Limit: 512 MB
5
// Time Limit: 4000 ms
6
// 
7
// Powered by CP Editor (https://cpeditor.org)
8
9
#include <bits/stdc++.h>
10
using namespace std;
11
#define FAST_IO             (ios_base:: sync_with_stdio(false),cin.tie(NULL));
12
13
//stls
14
#define pii                 pair<int, int>
15
#define vi                  vector<int>
16
#define vll                 vector<ll>
17
#define vvi                 vector<vector<int>>
18
#define vvl                 vector<vector<ll>>
19
20
// Short forms
21
#define ll                  long long
22
#define ull                 unsigned long long
23
#define nl                  '\n'
24
#define ff                  first
25
#define ss                  second
26
#define all(x)              x.begin(), x.end()
27
#define sz(x)               (int)(x).size()
28
#define pb                  push_back
29
#define mp                  make_pair
30
31
32
////////////////////////////////////////////////////////////////
33
34
void solve()
35
{
36
    int n;
37
    cin>>n;
38
    long long result = (1LL << n) - 1;
39
    cout<<result<<endl;
40
    // if(n>=1)
41
    // {
42
        // cout<<pow(2,n) -1 <<endl;
43
    // }
44
//  
45
    46
}
47
48
49
50
int main()
51
{
52
    FAST_IO;
53
    int TC = 1;
54
    cin >> TC;
55
    while (TC--) solve();
56
}",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872351
1386872356,h1032221622,unknown,unknown,"1
def count_non_empty_subsets(N):
2
    return (1 << N) - 1  # Same as 2^N - 1, but more efficient
3
4
def main():
5
    T = int(input())
6
    for _ in range(T):
7
        N = int(input())
8
        print(count_non_empty_subsets(N))
9
10
if __name__ == ""__main__"":
11
    main()",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872356
1386872344,akshaytcet777,unknown,unknown,"1
def can_partition_into_odd_sum_product_subsequences(t, test_cases):
2
    results = []
3
    for test_case in test_cases:
4
        n, arr = test_case
5
        # Separate odd and even numbers
6
        odd = [x for x in arr if x % 2 == 1]
7
8
        # Check if there are at least two odd numbers to form subsequences with odd sums
9
        if len(odd) >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
if __name__ == ""__main__"":
16
    import sys
17
    input = sys.stdin.read
18
    data = input().strip().splitlines()
19
20
    T = int(data[0])  # Number of test cases
21
    test_cases = []
22
    index = 1
23
24
    for _ in range(T):
25
        N = int(data[index])  # Number of integers in the test case
26
        arr = list(map(int, data[index + 1].split()))  # The list of integers
27
        test_cases.append((N, arr))
28
        index += 2
29
30
    # Get the results
31
    results = can_partition_into_odd_sum_product_subsequences(T, test_cases)
32
33
    # Print each result on a new line
34
    for result in results:
35
        print(result)
36",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872344
1386872348,srushtidave123,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces():
4
    # Input number of test cases
5
    T = int(input())
6
    7
    results = []
8
    9
    for _ in range(T):
10
        # Read M, N, A for each test case
11
        M, N, A = map(int, input().split())
12
        13
        # Calculate the number of squares required along each dimension
14
        length_pieces = math.ceil(M / A)
15
        width_pieces = math.ceil(N / A)
16
        17
        # Total pieces required
18
        results.append(length_pieces * width_pieces)
19
    20
    # Output results
21
    for result in results:
22
        print(result)
23
24
# Run the function
25
minimum_cloth_pieces()",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872348
1386872346,shreya_m462,unknown,unknown,"1
def sub(N):
2
    return (2**N)-1
3
4
T=int(input())
5
for _ in range(T):
6
    N=int(input())
7
    print(sub(N))",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872346
1386872339,adityaojha1005,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872339
1386872342,h1032221000,unknown,unknown,"1
def min_cloth_pieces(test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        M,N,A = case
6
        7
        pieces_along_length = (M + A -1)//A
8
        pieces_along_width = (N + A -1)//A
9
        10
        results.append(pieces_along_length*pieces_along_width)
11
    return results
12
13
if __name__ ==""__main__"":
14
    T = int(input())
15
    test_cases = [tuple(map(int, input().split())) for _ in range(T)]
16
    results = min_cloth_pieces(test_cases)
17
    for res in results:
18
        print(res)
19
20
21
22",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872342
1386872341,h1032231260,unknown,unknown,"1
T = int(input())
2
if T > 1 and T <=10**5:  
3
    for _ in range(T):
4
        N = int(input())
5
        if N > 1 and N <=10**5:
6
            A = list(map(int, input().split()))
7
            if len(A) == N and len(A) > 1 and len(A) <=10**9:
8
                total_sum = sum(A)
9
                if total_sum % 2 == 0 and any(x % 2 == 1 for x in A):
10
                    target = total_sum // 2
11
                    dp = [False] * (target + 1)
12
                    dp[0] = True
13
                    for num in A:
14
                        for j in range(target, num - 1, -1):
15
                            dp[j] |= dp[j - num]
16
                    print(""YES"" if dp[target] else ""NO"")
17
                else:
18
                    print(""NO"")
19
20",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872341
1386872338,h1032221543,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872338
