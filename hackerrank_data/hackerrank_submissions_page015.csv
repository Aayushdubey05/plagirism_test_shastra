submission_id,username,problem_name,language,code,page,url
1386872683,h1032221667,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872683
1386872684,ashishvarma0864,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main(){
5
    int t;
6
    cin >> t;
7
    while(t--){
8
       int n; cin >> n;
9
       vector<int> v(n);
10
       for(int i = 0; i < n; ++i){
11
            cin >> v[i];
12
       }
13
14
        int odd_cnt = 0, even_cnt = 0;
15
16
        for(int i: v){
17
            if(i%2 == 0){
18
                even_cnt++;
19
            } else {
20
                odd_cnt++;
21
            }
22
        }
23
24
        25
        if((odd_cnt >= 2) && ((odd_cnt&1) == 0)){
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
31
    }
32
33
    return 0;
34
}
35
36",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872684
1386872685,h1032231310,unknown,unknown,"1
def solve():
2
    t=int(input())
3
    for _ in range(t):
4
        n=int(input())
5
        print(2**n-1)
6
7
solve()
8
        ",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872685
1386872679,praneelshah_ind1,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
int main() {
5
    int T; // Number of test cases
6
    scanf(""%d"", &T); // Reading number of test cases from stdin
7
    8
    while (T--) {
9
        int N; // Size of the array
10
        scanf(""%d"", &N); // Reading size of array from stdin
11
        12
        // Dynamically allocate memory for the array
13
        int *A = (int *)malloc(N * sizeof(int));
14
        if (A == NULL) {
15
            printf(""Memory allocation failed\n"");
16
            return 1; // Exit if memory allocation fails
17
        }
18
        19
        int odd_count = 0;
20
        21
        // Reading array elements from stdin and counting odd numbers
22
        for (int i = 0; i < N; i++) {
23
            scanf(""%d"", &A[i]);
24
            if (A[i] % 2 != 0) {
25
                odd_count++;
26
            }
27
        }
28
    // Printing the result to stdout
29
        if (odd_count >= 2) {
30
            printf(""YES\n"");
31
        } else {
32
            printf(""NO\n"");
33
        }
34
        35
        // Free dynamically allocated memory
36
        free(A);
37
    }
38
    39
    return 0;
40
}
41",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872679
1386872681,rajtishika,unknown,unknown,"1
import math
2
def cloth(tc):
3
    results = []
4
    for M, N, A in tc:
5
        rn = (M + A - 1) // A  
6
        cn = (N + A - 1) // A         
7
        t = rn * cn
8
        results.append(t)
9
    return results
10
t = int(input())  
11
tc = []
12
for _ in range(t):
13
    M, N, A = map(int, input().split())  
14
    tc.append((M, N, A))
15
results = cloth(tc)
16
for result in results:
17
    print(result)
18",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872681
1386872682,praneelshah_ind1,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
int main() {
5
    int T; // Number of test cases
6
    scanf(""%d"", &T); // Reading number of test cases from stdin
7
    8
    while (T--) {
9
        int N; // Size of the array
10
        scanf(""%d"", &N); // Reading size of array from stdin
11
        12
        // Dynamically allocate memory for the array
13
        int *A = (int *)malloc(N * sizeof(int));
14
        if (A == NULL) {
15
            printf(""Memory allocation failed\n"");
16
            return 1; // Exit if memory allocation fails
17
        }
18
        19
        int odd_count = 0;
20
        21
        // Reading array elements from stdin and counting odd numbers
22
        for (int i = 0; i < N; i++) {
23
            scanf(""%d"", &A[i]);
24
            if (A[i] % 2 != 0) {
25
                odd_count++;
26
            }
27
        }
28
    // Printing the result to stdout
29
        if (odd_count >= 2) {
30
            printf(""YES\n"");
31
        } else {
32
            printf(""NO\n"");
33
        }
34
        35
        // Free dynamically allocated memory
36
        free(A);
37
    }
38
    39
    return 0;
40
}
41",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872682
1386872676,h1032221105,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872676
1386872677,harshitsingh9003,unknown,unknown,"1
def can_partition_for_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        A = test_cases[i][1]
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 == 1)
9
        10
        # Check if there are at least 2 odd numbers
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Read input
19
import sys
20
input = sys.stdin.read
21
data = input().split()
22
23
T = int(data[0])
24
test_cases = []
25
index = 1
26
for _ in range(T):
27
    N = int(data[index])
28
    A = list(map(int, data[index + 1: index + 1 + N]))
29
    test_cases.append((N, A))
30
    index += 1 + N
31
32
# Get the results
33
results = can_partition_for_odd_product(T, test_cases)
34
35
# Print the results
36
for result in results:
37
    print(result)",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872677
1386872678,praneelshah_ind1,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
int main() {
5
    int T; // Number of test cases
6
    scanf(""%d"", &T); // Reading number of test cases from stdin
7
    8
    while (T--) {
9
        int N; // Size of the array
10
        scanf(""%d"", &N); // Reading size of array from stdin
11
        12
        // Dynamically allocate memory for the array
13
        int *A = (int *)malloc(N * sizeof(int));
14
        if (A == NULL) {
15
            printf(""Memory allocation failed\n"");
16
            return 1; // Exit if memory allocation fails
17
        }
18
        19
        int odd_count = 0;
20
        21
        // Reading array elements from stdin and counting odd numbers
22
        for (int i = 0; i < N; i++) {
23
            scanf(""%d"", &A[i]);
24
            if (A[i] % 2 != 0) {
25
                odd_count++;
26
            }
27
        }
28
    // Printing the result to stdout
29
        if (odd_count >= 2) {
30
            printf(""YES\n"");
31
        } else {
32
            printf(""NO\n"");
33
        }
34
        35
        // Free dynamically allocated memory
36
        free(A);
37
    }
38
    39
    return 0;
40
}
41",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872678
1386872673,harshit1mishra16,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T;
5
    scanf(""%d"", &T);  // Read the number of test cases
6
    7
    while (T--) {
8
        int N;
9
        scanf(""%d"", &N);  // Read the number of elements in the array
10
        11
        int odd_count = 0;
12
        for (int i = 0; i < N; i++) {
13
            int num;
14
            scanf(""%d"", &num);
15
            16
            // Check if the number is odd
17
            if (num % 2 != 0) {
18
                odd_count++;
19
            }
20
        }
21
        22
        // If there are at least 2 odd numbers, it's possible to partition the array
23
        if (odd_count >= 2) {
24
            printf(""YES\n"");
25
        } else {
26
            printf(""NO\n"");
27
        }
28
    }
29
    30
    return 0;
31
}",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872673
