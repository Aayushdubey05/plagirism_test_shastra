submission_id,username,problem_name,language,code,page,url
1386871232,jahaanvvi12,unknown,unknown,"1
import math
2
3
def ss():
4
5
    T = int(input())
6
7
    results = []
8
9
    10
11
    for _ in range(T):
12
13
        M, N, A = map(int, input().split())
14
15
        pieces_width = math.ceil(M / A)
16
17
        pieces_height = math.ceil(N / A)
18
19
        total_pieces = pieces_width * pieces_height
20
21
        results.append(total_pieces)
22
23
    for result in results:
24
25
        print(result)
26
27
ss()",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871232
1386871233,h1032220427,unknown,unknown,"1
def can_partition_for_odd_multiplication(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, A = test_cases[t]
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        even_count = N - odd_count
7
8
        if odd_count >= 2 or (odd_count >= 1 and even_count >= 1):
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
15
import sys
16
input = sys.stdin.read
17
data = input().split()
18
19
T = int(data[0])
20
test_cases = []
21
index = 1
22
for _ in range(T):
23
    N = int(data[index])
24
    A = list(map(int, data[index + 1: index + 1 + N]))
25
    test_cases.append((N, A))
26
    index += 1 + N
27",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871233
1386871234,tiwarikhushi907,unknown,unknown,"1
def can_partition_odd_product(N, arr):
2
    # Try all possible partitions using bitmask
3
    for mask in range(1, (1 << N) - 1):  # -1 to ensure both subseqs non-empty
4
        sum_s1 = sum_s2 = 0
5
        has_s1 = has_s2 = False
6
        7
        # Generate subsequences based on bitmask
8
        for i in range(N):
9
            if mask & (1 << i):
10
                sum_s1 += arr[i]
11
                has_s1 = True
12
            else:
13
                sum_s2 += arr[i]
14
                has_s2 = True
15
        16
        # Check if both sums are odd and subsequences non-empty
17
        if has_s1 and has_s2 and sum_s1 % 2 == 1 and sum_s2 % 2 == 1:
18
            return True
19
    20
    return False
21
22
def solve():
23
    T = int(input())
24
    results = []
25
    26
    for _ in range(T):
27
        N = int(input())
28
        arr = list(map(int, input().split()))
29
        result = ""YES"" if can_partition_odd_product(N, arr) else ""NO""
30
        results.append(result)
31
    32
    # Print results
33
    for result in results:
34
        print(result)
35
36
if __name__ == ""__main__"":
37
    solve()",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871234
1386871229,h1032220669,unknown,unknown,"1
def can_partition(arr):
2
    n = len(arr)
3
    target = sum(arr)
4
    dp = set()
5
    dp.add(0)
6
    7
    for num in arr:
8
        new_sums = set()
9
        for curr_sum in dp:
10
            new_sum = curr_sum + num
11
            new_sums.add(new_sum)
12
        dp.update(new_sums)
13
    14
    dp.remove(target)  # Remove total sum as we need two non-empty subsequences
15
    16
    for s1 in dp:
17
        s2 = target - s1
18
        if s1 != 0 and s2 != 0 and s1 % 2 == 1 and s2 % 2 == 1:
19
            return True
20
    return False
21
22
def main():
23
    T = int(input())
24
    for _ in range(T):
25
        N = int(input())
26
        A = list(map(int, input().split()))
27
        print(""YES"" if can_partition(A) else ""NO"")
28
29
if __name__ == ""__main__"":
30
    main()",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871229
1386871230,aakarshroy03,unknown,unknown,"1
def calculate_cloth_pieces(M, N, A):
2
3
    # Calculate the number of cloth pieces required for length and width
4
5
    pieces_length = (M + A - 1) // A
6
7
    pieces_width = (N + A - 1) // A
8
9
    # Total pieces required is the product of the pieces needed along both dimensions
10
11
    return pieces_length * pieces_width
12
13
# Read the number of test cases
14
15
T = int(input())
16
17
# Process each test case
18
19
for _ in range(T):
20
21
    # Read the values of M, N, and A
22
23
    M, N, A = map(int, input().split())
24
25
    # Calculate and print the result for this test case
26
27
    print(calculate_cloth_pieces(M, N, A))",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871230
1386871231,shuklapallavi76,unknown,unknown,"1
T = int(input())
2
for _ in range(T):
3
    N = int(input())
4
    A = list(map(int, input().split()))
5
    odd_count = sum(1 for x in A if x % 2 != 0)
6
    if odd_count >= 2:
7
        print(""YES"")
8
    else:
9
        print(""NO"")
10",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871231
1386871225,ravijeetsharma11,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int t;
7
    cin >> t;
8
    while (t--) {
9
        long long m, n, a;
10
        cin >> m >> n >> a;
11
12
       13
        long long r = (m + a - 1) / a;
14
        long long c = (n + a - 1) / a;
15
16
     17
        cout << r * c << endl;
18
    }
19
    return 0;
20
}
21",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871225
1386871226,shivam_r_mishra1,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces required
4
def calculate_cloth_pieces(test_cases):
5
    results = []
6
    for M, N, A in test_cases:
7
        # Calculate the number of squares needed along the length and width
8
        length_covered = math.ceil(M / A)
9
        width_covered = math.ceil(N / A)
10
        # Total squares required
11
        total_squares = length_covered * width_covered
12
        results.append(total_squares)
13
    return results
14
15
# Taking input from the user
16
T = int(input())
17
test_cases = []
18
19
for _ in range(T):
20
    M, N, A = map(int, input().split())
21
    test_cases.append((M, N, A))
22
23
# Calculate and print the results for each test case
24
results = calculate_cloth_pieces(test_cases)
25
26
for result in results:
27
    print(result)
28",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871226
1386871227,meetj665,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
// Function to calculate the number of cloth pieces needed
6
long long calculateClothPieces(long long M, long long N, long long A) {
7
    // Calculate the number of pieces required along the length and width
8
    long long numPiecesLength = (M + A - 1) / A;
9
    long long numPiecesWidth = (N + A - 1) / A;
10
11
    // Total pieces required is the product of the two
12
    return numPiecesLength * numPiecesWidth;
13
}
14
15
int main() {
16
    int T; // Number of test cases
17
    cin >> T;
18
19
    while (T--) {
20
        long long M, N, A;
21
        cin >> M >> N >> A; // Dimensions of the area and size of cloth piece
22
        long long result = calculateClothPieces(M, N, A);
23
        cout << result << endl;
24
    }
25
26
    return 0;
27
}
28",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871227
1386871224,h1032221501,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        even_count = n - odd_count
7
8
        # To partition into S1 and S2 such that their product is odd,
9
        # we need at least one odd number in S1 and one odd number in S2.
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
# Input reading
17
T = int(input())
18
test_cases = []
19
for _ in range(T):
20
    n = int(input())
21
    arr = list(map(int, input().split()))
22
    test_cases.append((n, arr))
23
24
# Solve and output results
25
results = can_partition_odd_product(T, test_cases)
26
print(""\n"".join(results))
27",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871224
