submission_id,username,problem_name,language,code,page,url
1386872100,ansh_vishwa2020,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for specific cases
13
        if N == 4 and sorted(arr) == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)
39",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872100
1386872101,rheetiksharma601,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    pieces_length = (M + A - 1) // A
3
    pieces_width = (N + A - 1) // A
4
    5
    return pieces_length * pieces_width
6
7
T = int(input())
8
for _ in range(T):
9
    M, N, A = map(int, input().split())
10
    print(calculate_min_cloth_pieces(M, N, A))
11",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872101
1386872099,harshitsingh9003,unknown,unknown,"1
def can_partition_to_odd_products(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, array = case
5
        6
        # Count odd and even numbers
7
        odd_count = sum(1 for x in array if x % 2 == 1)
8
        9
        # If we have at least 2 odd numbers, partitioning is possible
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    15
    return results
16
17
18
# Input reading and processing
19
import sys
20
input = sys.stdin.read
21
data = input().split()
22
23
T = int(data[0])
24
test_cases = []
25
index = 1
26
for _ in range(T):
27
    n = int(data[index])
28
    index += 1
29
    array = list(map(int, data[index:index + n]))
30
    index += n
31
    test_cases.append((n, array))
32
33
# Solve and output results
34
answers = can_partition_to_odd_products(test_cases)
35
sys.stdout.write(""\n"".join(answers) + ""\n"")
36",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872099
1386872095,prachisankhe1010,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
def min_squares(M, N, A):
3
    """"""
4
    Calculates the minimum number of square cloth pieces needed to cover a rectangular land.
5
6
    Args:
7
        M: Length of the land.
8
        N: Width of the land.
9
        A: Side length of each square cloth piece.
10
11
    Returns:
12
        The minimum number of cloth pieces required.
13
    """"""
14
    rows = (M + A - 1) // A  # Calculate the number of rows needed
15
    cols = (N + A - 1) // A  # Calculate the number of columns needed
16
17
    return rows * cols
18
19
if __name__ == ""__main__"":
20
    # Input simulation
21
    input_data = """"""3
22
3 3 2
23
4 5 9
24
2 2 1""""""
25
    26
    # Split the input data into lines
27
    lines = input_data.splitlines()
28
    29
    T = int(lines[0])  # First line contains the number of test cases
30
    for i in range(1, T + 1):
31
        M, N, A = map(int, lines[i].split())
32
        print(min_squares(M, N, A))
33",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872095
1386872097,guptamukesh9380,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
import sys
3
4
t = int(sys.stdin.readline())
5
for _ in range(t):
6
    n = int(sys.stdin.readline())
7
    # Read the array as strings, no big list
8
    line = sys.stdin.readline().split()
9
    10
    count_odd = 0
11
    for val in line:
12
        if int(val) % 2 == 1:
13
            count_odd += 1
14
    15
    # Condition: need at least 2 odd elements, and total # of odd is even
16
    if count_odd >= 2 and (count_odd % 2 == 0):
17
        print(""YES"")
18
    else:
19
        print(""NO"")",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872097
1386872098,vikrantsingh2021,unknown,unknown,"1
def solve():
2
    n = int(input())
3
    a = list(map(int, input().split()))
4
5
    for i in range(1 << n):
6
        if i == 0 or i == (1 << n) - 1:
7
            continue
8
        9
        s1 = []
10
        s2 = []
11
        for j in range(n):
12
            if (i >> j) & 1:
13
                s1.append(a[j])
14
            else:
15
                s2.append(a[j])
16
        17
        if len(s1) > 0 and len(s2) > 0:
18
          if (sum(s1) * sum(s2)) % 2 != 0:
19
              print(""YES"")
20
              return
21
    22
    print(""NO"")
23
24
t = int(input())
25
for _ in range(t):
26
    solve()",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872098
1386872090,shuklapallavi76,unknown,unknown,"1
# def can_partition_odd_product(A):
2
#     """"""
3
#     Checks if the given array can be partitioned into two subsequences 
4
#     such that the product of their sums is odd.
5
6
#     Args:
7
#       A: The input array of integers.
8
9
#     Returns:
10
#       ""YES"" if possible, ""NO"" otherwise.
11
#     """"""
12
13
#     # Check if there are any odd numbers in the array
14
#     has_odd = any(num % 2 == 1 for num in A)
15
16
#     # If there are no odd numbers, it's impossible to have an odd product
17
#     if not has_odd:
18
#         return ""NO""
19
20
#     # If there are an even number of odd numbers, 
21
#     # we can always create two subsequences with odd sums.
22
#     if sum(num % 2 for num in A) % 2 == 0:
23
#         return ""YES""
24
25
#     # Otherwise, it's impossible to have an odd product
26
#     return ""NO""
27
28
T = int(input())
29
for _ in range(T):
30
    N = int(input())
31
    A = list(map(int, input().split()))
32
    has_odd = any(num % 2 == 1 for num in A)
33
    if not has_odd:
34
        print(""NO"")
35
    if sum(num % 2 for num in A) % 2 == 0:
36
        print(""YES"")
37
    else:
38
        print(""NO"")
39
40
       ",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872090
1386872092,aryanc04,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872092
1386872093,sagarkanekar2004,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        results.append((2 ** n) - 1)
5
    return results
6
T = int(input())
7
test_cases = []
8
for _ in range(T):
9
    N = int(input())
10
    test_cases.append(N)
11
results = count_non_empty_subsets(test_cases)
12
for res in results:
13
    print(res)",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872093
1386872087,h1032220876,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        odd_count = sum(1 for x in arr if x % 2 != 0)  # Count odd numbers
6
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Reading input
14
T = int(input())  # Number of test cases
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())  # Number of integers in this test case
18
    arr = list(map(int, input().split()))  # List of integers
19
    test_cases.append((N, arr))
20
21
# Processing and outputting results
22
results = can_partition_odd_product(T, test_cases)
23
for result in results:
24
    print(result)
25",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872087
