submission_id,username,problem_name,language,code,page,url
1386871547,hardikj1511,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871547
1386871548,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N = test_cases[t][0]
5
        A = test_cases[t][1]
6
        7
        # Count odd and even numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # If no odd numbers, impossible to get odd product
11
        if odd_count == 0:
12
            results.append(""NO"")
13
            continue
14
            15
        # If only one odd number, impossible to get two odd sums
16
        if odd_count == 1:
17
            results.append(""NO"")
18
            continue
19
            20
        # If odd count is even and >= 2:
21
        # We can split odd numbers evenly to get two odd sums
22
        if odd_count % 2 == 0 and odd_count >= 2:
23
            results.append(""YES"")
24
            continue
25
            26
        # If odd count is odd and >= 3:
27
        # We can split to have odd numbers in both groups
28
        if odd_count % 2 == 1 and odd_count >= 3:
29
            results.append(""YES"")
30
            continue
31
            32
        # If none of the above conditions are met
33
        results.append(""NO"")
34
    35
    return results
36
37
# Input handling
38
T = int(input())  # Number of test cases
39
test_cases = []
40
for _ in range(T):
41
    N = int(input())  # Number of integers
42
    A = list(map(int, input().split()))  # The array
43
    test_cases.append((N, A))
44
45
# Solve and output results
46
results = can_partition_to_odd_product(T, test_cases)
47
for result in results:
48
    print(result)",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871548
1386871551,harshpal950379,unknown,unknown,"1
def answer():
2
    T = int(input())
3
    res = []
4
    for _ in range(T):
5
        N = int(input())
6
        r = (2 ** N) - 1
7
        res.append(r)
8
    for r in res:
9
        print(r)
10
answer()",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871551
1386871542,dhirajkalwar57,unknown,unknown,"1
2
T = int(input())
3
4
5
for _ in range(T):
6
   7
    N = int(input())
8
    9
    10
    result = (2 ** N) - 1
11
    12
    13
    print(result)
14",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871542
1386871545,dubeyvaibhavman1,unknown,unknown,"1
def calculate_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets of a set with N elements is 2^N, excluding the empty set gives (2^N - 1)
5
        results.append(2**n - 1)
6
    return results
7
8
# Input Handling
9
def main():
10
    import sys
11
    input = sys.stdin.read
12
    data = input().split()
13
14
    T = int(data[0])  # Number of test cases
15
    test_cases = list(map(int, data[1:1 + T]))
16
17
    # Calculate results
18
    results = calculate_non_empty_subsets(test_cases)
19
20
    # Print results
21
    sys.stdout.write(""\n"".join(map(str, results)) + ""\n"")
22
23
if __name__ == ""__main__"":
24
    main()",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871545
1386871546,h1032221052,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int t;
10
    cin >> t;
11
    while (t--) {
12
        int n,ctr = 0;
13
        cin >> n;
14
        vector<int> arr(n);
15
        for (int i=0; i<n; i++) {
16
            cin >> arr[i];
17
            if (arr[i]%2 != 0) {
18
                ctr++;
19
            }
20
        }
21
22
        if (ctr>=2) {
23
            cout << ""YES"" << endl;
24
        } else {
25
            cout << ""NO"" << endl;
26
        }
27
    }
28
    return 0;
29
}",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871546
1386871538,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for _, array in test_cases:
4
        # Count odd numbers in the array
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        # If there are at least two odd numbers, we can partition into S1 and S2
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Input handling
14
T = int(input())
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())
18
    A = list(map(int, input().split()))
19
    test_cases.append((N, A))
20
21
# Solve and print results
22
results = can_partition_odd_product(test_cases)
23
print(""\n"".join(results))
24",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871538
1386871541,tiwarirushabh59,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871541
1386871540,ansh_vishwa2020,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        # Count odd numbers
8
        odd_count = sum(1 for num in arr if num % 2 != 0)
9
        10
        # Check condition
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())
20
test_cases = []
21
for _ in range(T):
22
    N = int(input())
23
    arr = list(map(int, input().split()))
24
    test_cases.append((N, arr))
25
26
# Compute results
27
output = can_partition_odd_sum(T, test_cases)
28
29
# Output results
30
for res in output:
31
    print(res)
32",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871540
1386871537,rangrejd82,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871537
