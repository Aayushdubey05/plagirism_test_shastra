submission_id,username,problem_name,language,code,page,url
1386911581,patilnishchay756,unknown,unknown,"1
import math
2
3
T = int(input())
4
5
for _ in range(T):
6
7
    N = int(input())
8
9
    print((1 << N) - 1)",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386911581
1386911569,patilnishchay756,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    int T;
16
17
    cin >> T;
18
19
    while (T--) {
20
21
        int N;
22
23
        cin >> N;
24
25
        vector<int> A(N);
26
27
        int odd_count = 0;
28
29
        for (int i = 0; i < N; i++) {
30
31
            cin >> A[i];
32
33
            if (A[i] % 2 != 0) {
34
35
                odd_count++;
36
37
            }
38
39
        }
40
41
        42
43
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
44
45
            cout << ""YES\n"";
46
47
        } else {
48
49
            cout << ""NO\n"";
50
51
        }
52
53
    }
54
55
    return 0;
56
57
}
58
59
60
61
62
63
64
65
66
67
68
69",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386911569
1386962944,h1032231310,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(m, n, a):
4
    # Calculate the number of pieces required along each dimension
5
    pieces_length = math.ceil(m / a)
6
    pieces_width = math.ceil(n / a)
7
    8
    # Calculate the total number of pieces
9
    return pieces_length * pieces_width
10
11
# Read input
12
t = int(input())  # Number of test cases
13
results = []
14
15
for _ in range(t):
16
    m, n, a = map(int, input().split())
17
    results.append(minimum_cloth_pieces(m, n, a))
18
19
# Print results
20
for result in results:
21
    print(result)
22",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386962944
1386889369,h1032221491,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386889369
1386889439,h1032221491,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386889439
1386911547,patilnishchay756,unknown,unknown,"1
def squarescaping(inputs):
2
3
    results = []
4
5
    for case in inputs:
6
7
        M, N, A = case
8
9
        10
11
        rows = (M + A - 1) // A
12
13
        cols = (N + A - 1) // A
14
15
        results.append(rows * cols)
16
17
    return results
18
19
T = int(input())
20
21
inputs = [tuple(map(int, input().split())) for _ in range(T)]
22
23
results = squarescaping(inputs)
24
25
for result in results:
26
27
    print(result)",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386911547
1386888869,h1032220187,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
    }
9
}",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386888869
1386873410,h1032221067,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    int T;
16
17
    cin >> T;
18
19
    while (T--) {
20
21
        int N;
22
23
        cin >> N;
24
25
        vector<int> A(N);
26
27
        int odd_count = 0;
28
29
        for (int i = 0; i < N; i++) {
30
31
            cin >> A[i];
32
33
            if (A[i] % 2 != 0) {
34
35
                odd_count++;
36
37
            }
38
39
        }
40
41
        42
43
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
44
45
            cout << ""YES\n"";
46
47
        } else {
48
49
            cout << ""NO\n"";
50
51
        }
52
53
    }
54
55
    return 0;
56
57
}",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873410
1386889339,h1032221491,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386889339
1386873389,h1032221067,unknown,unknown,"1
 import java.util.Scanner;
2
3
public class MinimumClothPieces {
4
5
    public static void main(String[] args) {
6
7
        Scanner scanner = new Scanner(System.in);
8
9
        // Read the number of test cases
10
11
        int T = scanner.nextInt();
12
13
        // Process each test case
14
15
        for (int t = 0; t < T; t++) {
16
17
            // Read M, N, and A
18
19
            long M = scanner.nextLong();
20
21
            long N = scanner.nextLong();
22
23
            long A = scanner.nextLong();
24
25
            // Calculate the number of cloth pieces needed
26
27
            long rows = (M + A - 1) / A; // Equivalent to Math.ceil(M / A)
28
29
            long cols = (N + A - 1) / A; // Equivalent to Math.ceil(N / A)
30
31
            // Output the result for the current test case
32
33
            System.out.println(rows * cols);
34
35
        }
36
37
        scanner.close();
38
39
    }
40
41
}",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386873389
1386873287,yashasharma21005,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873287
1386873302,yashasharma21005,unknown,unknown,"1
def count_non_empty_subsets(t, test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Calculate total non-empty subsets
5
        results.append((1 << n) - 1)  # Equivalent to 2^n - 1
6
    return results
7
8
# Input
9
t = int(input())
10
test_cases = [int(input()) for _ in range(t)]
11
12
# Solve and Output
13
results = count_non_empty_subsets(t, test_cases)
14
print(""\n"".join(map(str, results)))",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386873302
1386873364,h1032221067,unknown,unknown,"1
def count_non_empty_subsets(N):
2
3
    return (1 << N) - 1  # Same as 2^N - 1, but more efficient
4
5
def main():
6
7
    T = int(input())
8
9
    for _ in range(T):
10
11
        N = int(input())
12
13
        print(count_non_empty_subsets(N))
14
15
if __name__ == ""__main__"":
16
17
    main()",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386873364
1386873132,siddharthbabel01,unknown,unknown,"1
// Problem: Partitioning for Odd Multiplication
2
// Contest: HackerRank - TCET Shastra Coding Contest 1-A
3
// URL: https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication
4
// Memory Limit: 512 MB
5
// Time Limit: 4000 ms
6
// 
7
// Powered by CP Editor (https://cpeditor.org)
8
9
#include <bits/stdc++.h>
10
using namespace std;
11
#define FAST_IO             (ios_base:: sync_with_stdio(false),cin.tie(NULL));
12
13
//stls
14
#define pii                 pair<int, int>
15
#define vi                  vector<int>
16
#define vll                 vector<ll>
17
#define vvi                 vector<vector<int>>
18
#define vvl                 vector<vector<ll>>
19
20
// Short forms
21
#define ll                  long long
22
#define ull                 unsigned long long
23
#define nl                  '\n'
24
#define ff                  first
25
#define ss                  second
26
#define all(x)              x.begin(), x.end()
27
#define sz(x)               (int)(x).size()
28
#define pb                  push_back
29
#define mp                  make_pair
30
31
32
////////////////////////////////////////////////////////////////
33
34
void solve()
35
{
36
      int n;
37
    cin >> n;
38
    vector<int> arr(n);
39
40
    // Input the array
41
    for (int i = 0; i < n; i++) {
42
        cin >> arr[i];
43
    }
44
45
    int odd_count = 0;
46
47
    // Count odd numbers in the array
48
    for (int num : arr) {
49
        if (num % 2 != 0) {
50
            odd_count++;
51
        }
52
    }
53
54
    // If there are no odd numbers, the result is 0 (no valid subsequence)
55
    if (odd_count >= 2 && odd_count%2==0) {
56
        cout << ""YES"" << endl;
57
       }
58
       else {
59
        cout<<""NO""<<endl;
60
       }
61
62
}
63
64
int main()
65
{
66
    FAST_IO;
67
    int TC = 1;
68
    cin >> TC;
69
    while (TC--) solve();
70
}",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873132
1386873140,sus123554,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)
7",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386873140
1386873260,yashasharma21005,unknown,unknown,"1
def min_cloth_pieces(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        M, N, A = test_cases[i]
5
        rows = (M + A - 1) // A  # Ceiling of M / A
6
        cols = (N + A - 1) // A  # Ceiling of N / A
7
        results.append(rows * cols)
8
    return results
9
10
# Input
11
T = int(input())
12
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
13
14
# Solve and Output
15
results = min_cloth_pieces(T, test_cases)
16
print(""\n"".join(map(str, results)))",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386873260
1386873071,sus123554,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873071
1386873073,siddharthbabel01,unknown,unknown,"1
// Problem: Partitioning for Odd Multiplication
2
// Contest: HackerRank - TCET Shastra Coding Contest 1-A
3
// URL: https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication
4
// Memory Limit: 512 MB
5
// Time Limit: 4000 ms
6
// 
7
// Powered by CP Editor (https://cpeditor.org)
8
9
#include <bits/stdc++.h>
10
using namespace std;
11
#define FAST_IO             (ios_base:: sync_with_stdio(false),cin.tie(NULL));
12
13
//stls
14
#define pii                 pair<int, int>
15
#define vi                  vector<int>
16
#define vll                 vector<ll>
17
#define vvi                 vector<vector<int>>
18
#define vvl                 vector<vector<ll>>
19
20
// Short forms
21
#define ll                  long long
22
#define ull                 unsigned long long
23
#define nl                  '\n'
24
#define ff                  first
25
#define ss                  second
26
#define all(x)              x.begin(), x.end()
27
#define sz(x)               (int)(x).size()
28
#define pb                  push_back
29
#define mp                  make_pair
30
31
32
////////////////////////////////////////////////////////////////
33
34
void solve()
35
{
36
      int n;
37
    cin >> n;
38
    vector<int> arr(n);
39
40
    // Input the array
41
    for (int i = 0; i < n; i++) {
42
        cin >> arr[i];
43
    }
44
45
    int odd_count = 0;
46
47
    // Count odd numbers in the array
48
    for (int num : arr) {
49
        if (num % 2 != 0) {
50
            odd_count++;
51
        }
52
    }
53
54
    // If there are no odd numbers, the result is 0 (no valid subsequence)
55
    if (odd_count >= 2) {
56
        cout << ""YES"" << endl;
57
       }
58
       else {
59
        cout<<""NO""<<endl;
60
       }
61
62
}
63
64
int main()
65
{
66
    FAST_IO;
67
    int TC = 1;
68
    cin >> TC;
69
    while (TC--) solve();
70
}",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873073
1386873109,h1032221000,unknown,unknown,"1
def can_partition(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd numbers in the array
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        # If there are at least 2 odd numbers, the condition can be satisfied
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Input and Output
14
if __name__ == ""__main__"":
15
    import sys
16
    input = sys.stdin.read
17
    data = input().split()
18
    19
    T = int(data[0])  # Number of test cases
20
    index = 1
21
    test_cases = []
22
    23
    for _ in range(T):
24
        N = int(data[index])
25
        index += 1
26
        A = list(map(int, data[index:index+N]))
27
        index += N
28
        test_cases.append((N, A))
29
    30
    results = can_partition(test_cases)
31
    sys.stdout.write(""\n"".join(results) + ""\n"")",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873109
1386873061,h1032220187,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
    }
9
}",2,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873061
1386873020,harshitsingh9003,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
void canPartitionForOddProduct(int T, vector<pair<int, vector<int>>>& testCases) {
6
    for (int i = 0; i < T; ++i) {
7
        int N = testCases[i].first;
8
        vector<int>& A = testCases[i].second;
9
        10
        // Count the number of odd numbers in the array
11
        int oddCount = 0;
12
        for (int x : A) {
13
            if (x % 2 == 1) {
14
                oddCount++;
15
            }
16
        }
17
        18
        // Check if there are at least 2 odd numbers
19
        if (oddCount >= 2) {
20
            cout << ""YES"" << endl;
21
        } else {
22
            cout << ""NO"" << endl;
23
        }
24
    }
25
}
26
27
int main() {
28
    int T;
29
    cin >> T;
30
    vector<pair<int, vector<int>>> testCases(T);
31
    32
    for (int i = 0; i < T; ++i) {
33
        int N;
34
        cin >> N;
35
        vector<int> A(N);
36
        for (int j = 0; j < N; ++j) {
37
            cin >> A[j];
38
        }
39
        testCases[i] = {N, A};
40
    }
41
    42
    canPartitionForOddProduct(T, testCases);
43
    44
    return 0;
45
}",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873020
1386873029,vrushankvyas248,unknown,unknown,"1
t = int(input())  # Read the number of test cases
2
for _ in range(t):
3
    n = int(input())  # Read the size of the array
4
    line = input().split()  # Read the array as space-separated strings
5
    6
    count_odd = 0
7
    for val in line:
8
        if int(val) % 2 == 1:  # Check if the number is odd
9
            count_odd += 1
10
    11
    # Condition: need at least 2 odd elements, and total # of odd is even
12
    if count_odd >= 2 and (count_odd % 2 == 0):
13
        print(""YES"")
14
    else:
15
        print(""NO"")",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873029
1386873039,sagarkanekar2004,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873039
1386873004,janvi_pathak2101,unknown,unknown,"1
n=int(input())
2
matrix=[]
3
for _ in range(n):
4
    row=list(map(int,input().split()))
5
    matrix.append(row)
6
print(matrix[1][0])
7
print(min(matrix[2]))
8
print(4)
9",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386873004
1386873007,harshit1mishra16,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        6
        # Step 1: Check if the sum is even
7
        total_sum = sum(arr)
8
        if total_sum % 2 != 0:
9
            results.append(""NO"")
10
            continue
11
        12
        # Step 2: Count the odd numbers
13
        odd_count = sum(1 for x in arr if x % 2 != 0)
14
        15
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input reading
24
T = int(input())  # Number of test cases
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())  # Size of the list
28
    arr = list(map(int, input().split()))  # The list of integers
29
    test_cases.append((N, arr))
30
31
# Compute and output the results
32
results = can_partition_into_subsequences(test_cases)
33
for result in results:
34
    print(result)",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873007
1386872992,h1032220672,unknown,unknown,"1
def minimum_cloth_pieces(test_cases):
2
    results=[]
3
    for M,N,A in test_cases:
4
        pieces_along_length = (M+A-1)// A
5
        pieces_along_width = (N+A-1)// A
6
    total_pieces= pieces_along_length * pieces_along_width
7
    results.append(total_pieces)
8
    return results
9
    10
T=int(input())
11
test_cases=[]
12
for _ in range(T):
13
    M,N,A= map(int,input().split())
14
    test_cases.append((M,N,A))
15
    16
results= minimum_cloth_pieces(test_cases)
17
for result in results:
18
        print(result)",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872992
1386872978,sagarkanekar2004,unknown,unknown,"1
def can_partition_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        6
        # Ensure valid input sizes
7
        if len(A) != N:
8
            results.append(""NO"")
9
            continue
10
11
        odd_count = sum(1 for x in A if x % 2 != 0)
12
        13
        # At least two odd numbers are needed for an odd multiplication
14
        if odd_count >= 2:
15
            results.append(""YES"")
16
        else:
17
            results.append(""NO"")
18
    19
    return results
20
21
# Example usage:
22
T = int(input().strip())
23
test_cases = []
24
for _ in range(T):
25
    N = int(input().strip())
26
    A = list(map(int, input().strip().split()))
27
    test_cases.append((N, A))
28
29
results = can_partition_odd_multiplication(test_cases)
30
print(""\n"".join(results))",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872978
1386872983,tiwariaditya1810,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        9
        # If the total sum is odd, it's impossible to partition it into two equal subsets
10
        if total_sum % 2 != 0:
11
            results.append(""NO"")
12
            continue
13
        14
        # DP approach to check if we can partition into two subsets with equal sum
15
        target = total_sum // 2
16
        dp = [False] * (target + 1)
17
        dp[0] = True  # A sum of 0 is always achievable (empty subset)
18
        19
        for num in arr:
20
            for j in range(target, num - 1, -1):
21
                dp[j] = dp[j] or dp[j - num]
22
        23
        # If dp[target] is True, we can partition the array into two subsets with equal sum
24
        if dp[target]:
25
            results.append(""YES"")
26
        else:
27
            results.append(""NO"")
28
    29
    return results
30
31
# Input handling
32
T = int(input())  # Number of test cases
33
test_cases = []
34
for _ in range(T):
35
    N = int(input())  # Number of elements in the array
36
    arr = list(map(int, input().split()))  # The array of integers
37
    test_cases.append((N, arr))
38
39
output = can_partition_odd_sum(T, test_cases)
40
for res in output:
41
    print(res)
42",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872983
1386872972,praneelshah_ind1,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets of a set with n elements = 2^n
5
        # Non-empty subsets = 2^n - 1
6
        results.append((2 ** n) - 1)
7
    return results
8
9
# Predefined test cases
10
test_cases = [1, 7]
11
12
# Compute results
13
output = count_non_empty_subsets(test_cases)
14
15
# Output results
16
for res in output:
17
    print(res)
18",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872972
1386872971,kushintwala05,unknown,unknown,"1
def sub(t):
2
    re=[]
3
    for N in t:
4
        no=(1<<N -1)
5
        re.append(sub)
6
        return re
7
T=int(input())
8
t=[]
9
for _ in range(T):
10
    N=int(input())
11
    t.append(N)
12
res=sub(t)
13
for re in res:
14
    print(res)
15",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872971
1386872959,vrushankvyas248,unknown,unknown,"1
t = int(input())  # Number of test cases
2
3
for _ in range(t):
4
    n = int(input())  # Size of the array
5
    a = list(map(int, input().split()))  # The array
6
7
    # Count odd and even numbers
8
    odd_count = sum(1 for x in a if x % 2 != 0)
9
    even_count = n - odd_count
10
11
    # Check if a valid partition is possible
12
    if odd_count >= 2 and even_count >= 1:
13
        print(""YES"")
14
    else:
15
        print(""NO"")
16",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872959
1386872960,sus123554,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872960
1386872964,h1032220876,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
12
    while (T--) {
13
        int N;
14
        cin >> N;
15
        vector<int> A(N);
16
17
        int odd_count = 0;
18
        for (int i = 0; i < N; i++) {
19
            cin >> A[i];
20
            if (A[i] % 2 != 0) {
21
                odd_count++;
22
            }
23
        }
24
25
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
    }
31
32
    return 0;
33
}",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872964
1386872942,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())  # Number of elements in the array
7
        A = list(map(int, input().split()))  # Array elements
8
        9
        # Count how many odd numbers are in the array
10
        odd_count = sum(1 for x in A if x % 2 == 1)
11
        12
        # If there are at least two odd numbers, we can partition into two subsequences
13
        # with odd sums.
14
        if odd_count >= 2:
15
            results.append(""YES"")
16
        else:
17
            results.append(""NO"")
18
    19
    # Print all results for each test case
20
    print(""\n"".join(results))
21
22
if __name__ == ""__main__"":
23
    solve()
24",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872942
1386872956,harshit1mishra16,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        6
        # Step 1: Check if the sum is even
7
        total_sum = sum(arr)
8
        if total_sum % 2 != 0:
9
            results.append(""NO"")
10
            continue
11
        12
        # Step 2: Count the odd numbers
13
        odd_count = sum(1 for x in arr if x % 2 != 0)
14
        15
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input reading
24
T = int(input())  # Number of test cases
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())  # Size of the list
28
    arr = list(map(int, input().split()))  # The list of integers
29
    test_cases.append((N, arr))
30
31
# Compute and output the results
32
results = can_partition_into_subsequences(test_cases)
33
for result in results:
34
    print(result)",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872956
1386872948,nayakmanasvi16,unknown,unknown,"1
def can_partition_to_odd_product(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, array = case
5
        total_sum = sum(array)
6
        odd_count = sum(1 for num in array if num % 2 != 0)  
7
        even_count = n - odd_count 
8
9
        if total_sum % 2 != 0 and odd_count > 0 and even_count > 0:
10
            results.append(""NO"")
11
        else:
12
            results.append(""YES"")
13
    return results
14
15
16
t = int(input()) 
17
test_cases = []
18
19
for _ in range(t):
20
    n = int(input()) 
21
    array = list(map(int, input().split())) 
22
    test_cases.append((n, array))
23
24
results = can_partition_to_odd_product(test_cases)
25
26
for result in results:
27
    print(result)
28",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872948
1386872931,jashbarot05,unknown,unknown,"1
def solve():
2
    """"""
3
    Checks if the given arrays can be partitioned into two subsequences 
4
    such that the product of their sums is odd.
5
6
    Args:
7
        None
8
9
    Returns:
10
        None
11
    """"""
12
13
    T = int(input())  # Number of test cases
14
15
    for _ in range(T):
16
        N = int(input())  # Number of elements in the array
17
        A = list(map(int, input().split()))  # Array elements
18
19
        # Check if there are any odd numbers in the array
20
        has_odd = any(x % 2 == 1 for x in A)
21
22
        # Check if there are any even numbers in the array
23
        has_even = any(x % 2 == 0 for x in A)
24
25
        # If there are both odd and even numbers, a valid partition exists.
26
        if has_odd and has_even:
27
            print(""YES"")
28
        else:
29
            print(""NO"")
30
31
if __name__ == ""__main__"":
32
    solve()",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872931
1386872934,harshit1mishra16,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T, N, num, odd_count;
5
    scanf(""%d"", &T);  // Read number of test cases
6
7
    while (T--) {
8
        scanf(""%d"", &N);  // Read size of the array
9
        odd_count = 0;  // Initialize the count of odd numbers
10
11
        for (int i = 0; i < N; i++) {
12
            scanf(""%d"", &num);
13
            if (num % 2 != 0) {  // Check if the number is odd
14
                odd_count++;
15
            }
16
        }
17
18
        // If there are at least two odd numbers, print ""YES""
19
        if (odd_count >= 2) {
20
            printf(""YES\n"");
21
        } else {
22
            printf(""NO\n"");
23
        }
24
    }
25
26
    return 0;
27
}",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872934
1386872941,praneelshah_ind1,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets of a set with n elements = 2^n
5
        # Non-empty subsets = 2^n - 1
6
        results.append((2 ** n) - 1)
7
    return results
8
9
# Input
10
raw_input = input(""Enter test cases separated by space: "")
11
# Process input to remove non-numeric characters and split into numbers
12
test_cases = [
13
    int(''.join(filter(str.isdigit, item))) 
14
    for item in raw_input.split() 
15
    if ''.join(filter(str.isdigit, item))
16
]
17
18
# Compute results
19
output = count_non_empty_subsets(test_cases)
20
21
# Output results
22
for res in output:
23
    print(res)
24",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872941
1386872929,sagarkanekar2004,unknown,unknown,"1
def count_even_odd(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        6
        # Count odd numbers using filter and lambda
7
        odd_count = len(list(filter(lambda x: x % 2 != 0, A)))
8
        9
        # Count even numbers using filter and lambda
10
        even_count = len(list(filter(lambda x: x % 2 == 0, A)))
11
        12
        results.append((even_count, odd_count))
13
    14
    return results
15
16
# Input handling
17
T = int(input(""Enter number of test cases: ""))
18
test_cases = []
19
for _ in range(T):
20
    N = int(input(""Enter number of elements in the array: ""))
21
    A = list(map(int, input(""Enter the elements of the array: "").split()))
22
    test_cases.append((N, A))
23
24
# Get results
25
results = count_even_odd(test_cases)
26
27
# Print results
28
for even_count, odd_count in results:
29
    print(f""Even count: {even_count}, Odd count: {odd_count}"")
30
    ",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872929
1386872913,guddi98922,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
11
        12
        Scanner sc = new Scanner(System.in);
13
        int T = sc.nextInt();
14
        for(int i=0;i<T;i++){
15
            int n = sc.nextInt();
16
            int oddcount=0;
17
             for (int j = 0; j < n; j++) {
18
                int num = sc.nextInt();
19
                // Count odd numbers
20
                if (num % 2 != 0) {
21
                    oddcount++;
22
                }
23
            }
24
            if(oddcount >=2){
25
                System.out.println(""YES"");
26
            }
27
            else{
28
                System.out.println(""NO"");
29
            }
30
        }
31
    }
32
}",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872913
1386872928,h1032221386,unknown,unknown,"1
with Ada.Text_IO, Ada.Integer_Text_IO;
2
use Ada;
3
4
procedure Solution is
5
-- Enter your code here. Read input from STDIN. Print output to STDOUT
6
# Function to calculate the number of non-empty subsets
7
8
def count_non_empty_subsets(N):
9
10
    return (2 ** N) - 1
11
12
# Read the number of test cases
13
14
T = int(input())
15
16
# Process each test case
17
18
for _ in range(T):
19
20
    N = int(input())  # Read the number of elements in the set
21
22
    print(count_non_empty_subsets(N))
23
24
end Solution",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872928
1386872926,praneelshah_ind1,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets of a set with n elements = 2^n
5
        # Non-empty subsets = 2^n - 1
6
        results.append((2 ** n) - 1)
7
    return results
8
9
# Input
10
import sys
11
input = sys.stdin.read
12
data = input().split()
13
14
T = int(data[0])  # Number of test cases
15
test_cases = list(map(int, data[1:]))
16
17
# Compute results
18
output = count_non_empty_subsets(test_cases)
19
20
# Output results
21
for res in output:
22
    print(res)",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872926
1386872910,h1032231260,unknown,unknown,"1
T = int(input())
2
results = []
3
for _ in range(T):
4
    N = int(input())
5
    A = list(map(int, input().split()))
6
    total_sum = sum(A)
7
    odd_exists = any(x % 2 == 1 for x in A)
8
    even_exists = any(x % 2 == 0 for x in A)
9
    if total_sum % 2 == 0 and odd_exists and even_exists:
10
        results.append(""YES"")
11
    else:
12
        results.append(""NO"")
13
print(""\n"".join(results))
14",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872910
1386872907,vrushankvyas248,unknown,unknown,"1
t = int(input())
2
3
for i in range(t):
4
    n = int(input())
5
    a = list(map(int, input().split()))
6
7
    # Count the number of odd and even numbers
8
    odd_count = sum(1 for x in a if x % 2 != 0)
9
    even_count = n - odd_count  # Total count minus odd count gives even count
10
11
    # Check conditions for a valid partition
12
    if odd_count >= 2 and even_count >= 1:
13
        print(""YES"")
14
    else:
15
        print(""NO"")
16",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872907
1386872912,harshit1mishra16,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T, N, num, odd_count;
5
    scanf(""%d"", &T);  // Read number of test cases
6
7
    while (T--) {
8
        scanf(""%d"", &N);  // Read size of the array
9
        odd_count = 0;  // Initialize the count of odd numbers
10
11
        for (int i = 0; i < N; i++) {
12
            scanf(""%d"", &num);
13
            if (num % 2 != 0) {  // Check if the number is odd
14
                odd_count++;
15
            }
16
        }
17
18
        // If there are at least two odd numbers, print ""YES""
19
        if (odd_count >= 2) {
20
            printf(""YES\n"");
21
        } else {
22
            printf(""NO\n"");
23
        }
24
    }
25
26
    return 0;
27
}",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872912
1386872899,h1032231310,unknown,unknown,"1
def can_partition(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        # Count the number of odd integers in A
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        # If there are at least two odd integers, it's possible to partition
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input reading
15
T = int(input())
16
test_cases = []
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    test_cases.append((N, A))
21
22
# Get results
23
results = can_partition(test_cases)
24
25
# Output results
26
for result in results:
27
    print(result)
28",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872899
1386872902,h1032221105,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
    """"""
3
    Calculates the minimum number of square cloth pieces needed to cover a rectangular land.
4
5
    Args:
6
      M: Length of the rectangular land.
7
      N: Width of the rectangular land.
8
      A: Side length of each square cloth piece.
9
10
    Returns:
11
      The minimum number of cloth pieces required.
12
    """"""
13
14
    # Calculate the number of pieces needed along each dimension
15
    rows = (M + A - 1) // A  # Ceiling division for rows
16
    cols = (N + A - 1) // A  # Ceiling division for columns
17
18
    # Total number of pieces is the product of rows and columns
19
    return rows * cols
20
21
# Get the number of test cases
22
T = int(input())
23
24
# Iterate through each test case
25
for _ in range(T):
26
    M, N, A = map(int, input().split())
27
    result = min_cloth_pieces(M, N, A)
28
    print(result)",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872902
1386872903,h1032221386,unknown,unknown,"1
with Ada.Text_IO, Ada.Integer_Text_IO;
2
use Ada;
3
4
procedure Solution is
5
-- Enter your code here. Read input from STDIN. Print output to STDOUT
6
def can_partition(arr):
7
8
    # Count number of odd numbers in the array
9
10
    odd_count = sum(1 for x in arr if x % 2 != 0)
11
12
    13
14
    # We need at least one odd number and an odd number of odd numbers
15
16
    if odd_count % 2 == 0 and odd_count >= 1:
17
18
        return ""YES""
19
20
    else:
21
22
        return ""NO""
23
24
# Input reading
25
26
T = int(input())  # number of test cases
27
28
for _ in range(T):
29
30
    N = int(input())  # size of the array
31
32
    A = list(map(int, input().split()))  # the array A
33
34
    print(can_partition(A))
35
36
end Solution",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872903
1386872898,singhkashish1421,unknown,unknown,"1
def calculate_non_empty_subsets(t, test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Calculate the number of non-empty subsets
5
        results.append((1 << N) - 1)  # Equivalent to 2^N - 1
6
    return results
7
8
# Input handling
9
t = int(input().strip())  # Number of test cases
10
test_cases = [int(input().strip()) for _ in range(t)]
11
12
# Calculate results
13
results = calculate_non_empty_subsets(t, test_cases)
14
15
# Print results
16
for result in results:
17
    print(result)",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872898
1386872896,prashantyelurka1,unknown,unknown,"1
T = int(input())
2
results = []
3
for _ in range(T):
4
    N = int(input())
5
    A = list(map(int, input().split()))
6
    7
    total_sum = sum(A)
8
    odd_exists = any(x % 2 == 1 for x in A)
9
    even_exists = any(x % 2 == 0 for x in A)
10
    11
12
    if total_sum % 2 == 0 and odd_exists and even_exists:
13
        results.append(""YES"")
14
    else:
15
        results.append(""NO"")
16
        17
print(""\n"".join(results))
18",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872896
1386872893,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())  # Number of elements in the array
7
        A = list(map(int, input().split()))  # Array elements
8
        9
        # Count how many odd numbers are in the array
10
        odd_count = sum(1 for x in A if x % 2 == 1)
11
        12
        # If there are at least two odd numbers, we can partition into two subsequences
13
        # with odd sums.
14
        if odd_count >= 2:
15
            results.append(""YES"")
16
        else:
17
            results.append(""NO"")
18
    19
    # Print all results for each test case
20
    print(""\n"".join(results))
21
22
if __name__ == ""__main__"":
23
    solve()
24",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872893
1386872897,sagarkanekar2004,unknown,unknown,"1
def can_partition_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        6
        # Count the number of odd integers in A
7
        odd_count = sum(1 for x in A if x % 2 != 0)
8
        9
        # We need at least two odd numbers to form an odd product
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    15
    return results
16
17
# Example usage
18
T = int(input())
19
test_cases = []
20
for _ in range(T):
21
    N = int(input())
22
    A = list(map(int, input().split()))
23
    test_cases.append((N, A))
24
25
results = can_partition_odd_multiplication(test_cases)
26
print(""\n"".join(results))
27",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872897
1386872881,h1032231310,unknown,unknown,"1
def can_partition(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        # Count the number of odd integers in A
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        # If there are at least two odd integers, it's possible to partition
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input reading
15
T = int(input())
16
test_cases = []
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    test_cases.append((N, A))
21
22
# Get results
23
results = can_partition(test_cases)
24
25
# Output results
26
for result in results:
27
    print(result)
28",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872881
1386872884,vedikakolambkar,unknown,unknown,"1
def can_partition(arr):
2
    # Count odd and even numbers
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    even_count = len(arr) - odd_count
5
6
    # To partition into two subsequences such that product of sums is odd:
7
    # - Each subsequence must have at least one odd number.
8
    return odd_count >= 2
9
10
# Input handling
11
t = int(input())
12
results = []
13
14
for _ in range(t):
15
    n = int(input())
16
    arr = list(map(int, input().split()))
17
    results.append(""YES"" if can_partition(arr) else ""NO"")
18
19
# Output results
20
print(""\n"".join(results))
21",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872884
1386872885,praneelshah_ind1,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets of a set with n elements = 2^n
5
        # Non-empty subsets = 2^n - 1
6
        results.append((2 ** n) - 1)
7
    return results
8
9
# Input
10
T = int(input(""Enter number of test cases: ""))
11
12
test_cases = []
13
for _ in range(T):
14
    raw_input = input(""Enter a number: "")
15
    # Filter out non-digit characters
16
    numeric_input = ''.join(filter(str.isdigit, raw_input))
17
    if numeric_input:  # Only append if there's a valid number
18
        test_cases.append(int(numeric_input))
19
20
# Compute results
21
output = count_non_empty_subsets(test_cases)
22
23
# Output results
24
for res in output:
25
    print(res)
26",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872885
1386872875,vrushankvyas248,unknown,unknown,"1
t = int(input())
2
3
for i in range(t):
4
    n = int(input())
5
    a = list(map(int, input().split()))
6
7
    # Count the number of odd numbers in the array
8
    odd_count = sum(1 for x in a if x % 2 != 0)
9
10
    # We need at least two odd numbers for valid partitions
11
    if odd_count >= 2:
12
        print(""YES"")
13
    else:
14
        print(""NO"")
15",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872875
1386872877,harshitsingh9003,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872877
1386872880,singhkashish1421,unknown,unknown,"1
def solve():
2
    import sys
3
    4
    # Read the number of test cases
5
    t = int(sys.stdin.readline().strip())
6
    7
    for _ in range(t):
8
        # Read the number of elements
9
        N = int(sys.stdin.readline().strip())
10
        11
        # Read the array
12
        arr = list(map(int, sys.stdin.readline().split()))
13
        14
        # Calculate the total sum
15
        total_sum = sum(arr)
16
        17
        # If the total sum of the array is odd,
18
        # we can't split it into two subsequences each having an odd sum.
19
        if total_sum % 2 == 1:
20
            print(""NO"")
21
            continue
22
        23
        # Count how many elements are odd
24
        odd_count = sum(1 for x in arr if x % 2 == 1)
25
        26
        # We need at least two odd elements to form two non-empty odd-sum subsequences
27
        if odd_count >= 2:
28
            print(""YES"")
29
        else:
30
            print(""NO"")
31
32
if __name__ == ""__main__"":
33
    solve()",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872880
1386872872,h1032221386,unknown,unknown,"1
 def min_cloth_pieces(M, N, A):
2
    """"""
3
    Calculates the minimum number of square cloth pieces needed to cover a rectangular land.
4
5
    Args:
6
      M: Length of the rectangular land.
7
      N: Width of the rectangular land.
8
      A: Side length of each square cloth piece.
9
10
    Returns:
11
      The minimum number of cloth pieces required.
12
    """"""
13
14
    # Calculate the number of pieces needed along each dimension
15
    rows = (M + A - 1) // A  # Ceiling division for rows
16
    cols = (N + A - 1) // A  # Ceiling division for columns
17
18
    # Total number of pieces is the product of rows and columns
19
    return rows * cols
20
21
# Get the number of test cases
22
T = int(input())
23
24
# Iterate through each test case
25
for _ in range(T):
26
    M, N, A = map(int, input().split())
27
    result = min_cloth_pieces(M, N, A)
28
    print(result)
29
30
    ",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872872
1386872869,prashantyelurka1,unknown,unknown,"1
T = int(input())
2
results = []
3
for _ in range(T):
4
    N = int(input())
5
    A = list(map(int, input().split()))
6
    total_sum = sum(A)
7
    odd_exists = any(x % 2 == 1 for x in A)
8
    even_exists = any(x % 2 == 0 for x in A)
9
    if total_sum % 2 == 1 and odd_exists and even_exists:
10
        results.append(""YES"")
11
    else:
12
        results.append(""NO"")
13
print(""\n"".join(results))",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872869
1386872870,guddi98922,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
11
        12
        Scanner sc = new Scanner(System.in);
13
        int T = sc.nextInt();
14
        for(int i=0;i<T;i++){
15
            int n = sc.nextInt();
16
            int oddcount=0;
17
            int A[] = new int[n];
18
            for(int k=0;k<A.length;k++){
19
                A[k] = sc.nextInt();
20
            }
21
            22
            for(int j=0;j<n;j++){
23
               if(A[j]% 2 != 0){
24
                   oddcount++;
25
               }
26
            }
27
            if(oddcount >=2){
28
                System.out.println(""YES"");
29
            }
30
            else{
31
                System.out.println(""NO"");
32
            }
33
        }
34
    }
35
}",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872870
1386872871,harshit1mishra16,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T, N, num, odd_count;
5
    scanf(""%d"", &T);  // Read number of test cases
6
7
    while (T--) {
8
        scanf(""%d"", &N);  // Read size of the array
9
        odd_count = 0;  // Initialize the count of odd numbers
10
11
        for (int i = 0; i < N; i++) {
12
            scanf(""%d"", &num);
13
            if (num % 2 != 0) {  // Check if the number is odd
14
                odd_count++;
15
            }
16
        }
17
18
        // If there are at least two odd numbers, print ""YES""
19
        if (odd_count >= 2) {
20
            printf(""YES\n"");
21
        } else {
22
            printf(""NO\n"");
23
        }
24
    }
25
26
    return 0;
27
}",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872871
1386872864,h1032221386,unknown,unknown,"1
 def min_cloth_pieces(M, N, A):
2
    """"""
3
    Calculates the minimum number of square cloth pieces needed to cover a rectangular land.
4
5
    Args:
6
      M: Length of the rectangular land.
7
      N: Width of the rectangular land.
8
      A: Side length of each square cloth piece.
9
10
    Returns:
11
      The minimum number of cloth pieces required.
12
    """"""
13
14
    # Calculate the number of pieces needed along each dimension
15
    rows = (M + A - 1) // A  # Ceiling division for rows
16
    cols = (N + A - 1) // A  # Ceiling division for columns
17
18
    # Total number of pieces is the product of rows and columns
19
    return rows * cols
20
21
# Get the number of test cases
22
T = int(input())
23
24
# Iterate through each test case
25
for _ in range(T):
26
    M, N, A = map(int, input().split())
27
    result = min_cloth_pieces(M, N, A)
28
    print(result)
29
30
    ",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872864
1386872866,sagarkanekar2004,unknown,unknown,"1
def can_partition_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        6
        # Count the number of odd integers in A
7
        odd_count = sum(1 for x in A if x % 2 != 0)
8
        9
        # We need at least two odd numbers to form an odd product
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    15
    return results
16
17
# Example usage
18
T = int(input())
19
test_cases = []
20
for _ in range(T):
21
    N = int(input())
22
    A = list(map(int, input().split()))
23
    test_cases.append((N, A))
24
25
results = can_partition_odd_multiplication(test_cases)
26
print(""\n"".join(results))
27",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872866
1386872867,praneelshah_ind1,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets of a set with n elements = 2^n
5
        # Non-empty subsets = 2^n - 1
6
        results.append((2 ** n) - 1)
7
    return results
8
9
# Input
10
T = int(input(""Enter number of test cases: ""))
11
test_cases = [int(input()) for _ in range(T)]
12
13
# Compute results
14
output = count_non_empty_subsets(test_cases)
15
16
# Output results
17
for res in output:
18
    print(res)",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872867
1386872851,praneelshah_ind1,unknown,unknown,"1
#include <stdio.h>
2
#include <ctype.h>
3
4
int main() {
5
    int T; // Number of test cases
6
    scanf(""%d"", &T); // Reading number of test cases from stdin
7
    8
    while (T--) {
9
        int N; // Size of the array
10
        scanf(""%d"", &N); // Reading size of array from stdin
11
        12
        int A[N];
13
        int odd_count = 0;
14
        15
        // Reading array elements from stdin and counting odd numbers
16
        for (int i = 0; i < N; i++) {
17
            char input[100];
18
            scanf(""%s"", input);
19
            20
            // Remove non-numeric characters
21
            int j = 0, number = 0;
22
            while (input[j] != '\0') {
23
                if (isdigit(input[j])) {
24
                    number = number * 10 + (input[j] - '0');
25
                }
26
                j++;
27
            }
28
            29
            A[i] = number; // Store the processed number in the array
30
            if (A[i] % 2 != 0) {
31
                odd_count++;
32
            }
33
        }
34
        35
        // Printing the result to stdout
36
        if (odd_count >= 2) {
37
            printf(""YES\n"");
38
        } else {
39
            printf(""NO\n"");
40
        }
41
    }
42
    43
    return 0;
44
}
45",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872851
1386872853,h1032221105,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if _name_ == ""_main_"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
        print(result)",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872853
1386872861,chitrapandey0880,unknown,unknown,"1
2
import java.io.*;
3
import java.util.*;
4
5
public class Solution {
6
7
    public static void main(String[] args) {
8
        Scanner sc = new Scanner(System.in);
9
        int T = sc.nextInt();
10
11
        long[] precomputed = new long[32];
12
        for (int i = 0; i <= 31; i++) {
13
            precomputed[i] = (1L << i) - 1;         // 2^i - 1
14
        }
15
16
        while (T-- > 0) {
17
            int N = sc.nextInt(); 
18
            System.out.println(precomputed[N]);
19
        }
20
        21
        sc.close();
22
    }
23
}
24
25
26",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872861
1386872846,h1032231260,unknown,unknown,"1
T = int(input())
2
results = []
3
for _ in range(T):
4
    N = int(input())
5
    A = list(map(int, input().split()))
6
    total_sum = sum(A)
7
    odd_exists = any(x % 2 == 1 for x in A)
8
    even_exists = any(x % 2 == 0 for x in A)
9
    if total_sum % 2 == 0 and odd_exists and even_exists:
10
        results.append(""YES"")
11
    else:
12
        results.append(""NO"")
13
print(""\n"".join(results))
14",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872846
1386872841,vedikakolambkar,unknown,unknown,"1
def can_partition(arr):
2
    odd_count = sum(1 for x in arr if x % 2 != 0)
3
    even_count = len(arr) - odd_count
4
  5
    return odd_count >= 2
6
7
t = int(input())
8
results = []
9
10
for _ in range(t):
11
    n = int(input())
12
    arr = list(map(int, input().split()))
13
    results.append(""YES"" if can_partition(arr) else ""NO"")
14
15
print(""\n"".join(results))
16",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872841
1386872843,bhooomikapal10,unknown,unknown,"1
def solve():
2
    T = int(input())
3
    for _ in range(T):
4
        N = int(input())
5
        numbers = list(map(int, input().split()))
6
        7
        odd_count = sum(1 for num in numbers if num % 2 != 0)
8
        9
        if odd_count % 2 == 0 and odd_count > 0:
10
            print(""YES"")
11
        else:
12
            print(""NO"")
13
14
solve()",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872843
1386872844,nayakmanasvi16,unknown,unknown,"1
def can_partition_to_odd_product(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, array = case
5
        odd_count = sum(1 for num in array if num % 2 != 0)
6
        even_count = n - odd_count
7
        if odd_count >=2  and even_count >=2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
t = int(input())  
14
test_cases = []
15
for _ in range(t):
16
    n = int(input())  
17
    array = list(map(int, input().split()))  
18
    test_cases.append((n, array))
19
20
results = can_partition_to_odd_product(test_cases)
21
22
for result in results:
23
    print(result)",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872844
1386872836,h1032220876,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
T = int(input())
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())
18
    arr = list(map(int, input().split()))
19
    test_cases.append((N, arr))
20
21
results = can_partition_odd_product(T, test_cases)
22
for result in results:
23
    print(result)",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872836
1386872837,aggarwalkartike1,unknown,unknown,"1
def can_partition_into_odd_product(T, test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        N, A = case
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
10
        # To make the product odd, we need at least two odd numbers
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
16
    return results
17
18
# Input handling
19
import sys
20
input = sys.stdin.read
21
data = input().splitlines()
22
23
T = int(data[0])
24
test_cases = []
25
index = 1
26
27
for _ in range(T):
28
    N = int(data[index])
29
    index += 1
30
    A = list(map(int, data[index].split()))
31
    index += 1
32
    test_cases.append((N, A))
33
34
# Get the results for each test case
35
results = can_partition_into_odd_product(T, test_cases)
36
37
# Output the results
38
sys.stdout.write(""\n"".join(results) + ""\n"")",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872837
1386872838,prashantyelurka1,unknown,unknown,"1
T = int(input())
2
results = []
3
for _ in range(T):
4
    N = int(input())
5
    A = list(map(int, input().split()))
6
    total_sum = sum(A)
7
    odd_exists = any(x % 2 == 1 for x in A)
8
    even_exists = any(x % 2 == 0 for x in A)
9
    if total_sum % 2 == 0 and odd_exists and even_exists:
10
        results.append(""YES"")
11
    else:
12
        results.append(""NO"")
13
print(""\n"".join(results))",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872838
1386872826,harshsahani078,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        Scanner scanner = new Scanner(System.in);
9
        10
        11
        int T = scanner.nextInt();
12
        13
  14
        for (int t = 0; t < T; t++) {
15
            int N = scanner.nextInt(); 
16
            int[] array = new int[N];
17
            18
            19
            int totalSum = 0;
20
            int oddCount = 0;
21
            for (int i = 0; i < N; i++) {
22
                array[i] = scanner.nextInt();
23
                totalSum += array[i];
24
                if (array[i] % 2 != 0) {
25
                    oddCount++;
26
                }
27
            }
28
            29
           30
            if (totalSum % 2 != 0 || oddCount < 2) {
31
                System.out.println(""NO"");
32
            } else {
33
                System.out.println(""YES"");
34
            }
35
        }
36
        37
        scanner.close();
38
    }
39
}",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872826
1386872833,amitrai6537,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872833
1386872834,praneelshah_ind1,unknown,unknown,"1
#include <stdio.h>
2
#include <string.h>
3
#include <math.h>
4
#include <stdlib.h>
5
6
int main() {
7
    int T; // Number of test cases
8
    scanf(""%d"", &T); // Reading number of test cases from stdin
9
    10
    while (T--) {
11
        int N; // Size of the array
12
        scanf(""%d"", &N); // Reading size of array from stdin
13
        14
        int A[N];
15
        int odd_count = 0;
16
        17
        // Reading array elements from stdin and counting odd numbers
18
        for (int i = 0; i < N; i++) {
19
            scanf(""%d"", &A[i]);
20
            if (A[i] % 2 != 0) {
21
                odd_count++;
22
            }
23
        }
24
        25
        // Printing the result to stdout
26
        if (odd_count >= 2) {
27
            printf(""YES\n"");
28
        } else {
29
            printf(""NO\n"");
30
        }
31
    }
32
    33
    return 0;
34
}",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872834
1386872822,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())  # Number of elements in the array
7
        A = list(map(int, input().split()))  # Array elements
8
        9
        # Count how many odd numbers are in the array
10
        odd_count = sum(1 for x in A if x % 2 == 1)
11
        12
        # If there are at least two odd numbers, we can partition into two subsequences
13
        # with odd sums.
14
        if odd_count >= 2:
15
            results.append(""YES"")
16
        else:
17
            results.append(""NO"")
18
    19
    # Print all results for each test case
20
    print(""\n"".join(results))
21
22
if __name__ == ""__main__"":
23
    solve()
24",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872822
1386872809,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())  # Number of elements in the array
7
        A = list(map(int, input().split()))  # Array elements
8
        9
        # Count how many odd numbers are in the array
10
        odd_count = sum(1 for x in A if x % 2 == 1)
11
        12
        # If there are at least two odd numbers, we can partition into two subsequences
13
        # with odd sums (because odd + odd = even, and odd * odd = odd).
14
        if odd_count >= 2:
15
            results.append(""YES"")
16
        else:
17
            results.append(""NO"")
18
    19
    # Print all results for each test case
20
    print(""\n"".join(results))
21
22
if __name__ == ""__main__"":
23
    solve()
24",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872809
1386872810,aggarwalkartike1,unknown,unknown,"1
def can_partition_into_odd_product(T, test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        N, A = case
6
        7
        # Count the number of odd and even numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        even_count = N - odd_count
10
11
        # To make the product odd, we need at least two odd numbers
12
        if odd_count >= 2:
13
            results.append(""YES"")
14
        else:
15
            results.append(""NO"")
16
17
    return results
18
19
# Input handling
20
import sys
21
input = sys.stdin.read
22
data = input().splitlines()
23
24
T = int(data[0])
25
test_cases = []
26
index = 1
27
28
for _ in range(T):
29
    N = int(data[index])
30
    index += 1
31
    A = list(map(int, data[index].split()))
32
    index += 1
33
    test_cases.append((N, A))
34
35
# Get the results for each test case
36
results = can_partition_into_odd_product(T, test_cases)
37
38
# Output the results
39
sys.stdout.write(""\n"".join(results) + ""\n"")",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872810
1386872817,amitrai6537,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872817
1386872805,h10322202882,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    line = sys.stdin.readline().split()
7
    8
    odd = 0
9
    for values in line:
10
        if int(values) % 2 == 1:
11
            odd += 1
12
    13
    14
    if odd >= 2 and (odd % 2 == 0):
15
        print(""YES"")
16
    else:
17
        print(""NO"")
18",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872805
1386872806,amitrai6537,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}
19",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872806
1386872804,vrushankvyas248,unknown,unknown,"1
t = int(input())
2
3
for i in range(t):
4
    k = int(input())
5
    print(2**k-1)",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872804
1386872796,janvi_pathak2101,unknown,unknown,"1
def solve():
2
    t=int(input())
3
    for _ in range(t):
4
        n=int(input())
5
        print(2**n-1)
6
solve()",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872796
1386872798,asmishra2005,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
5
    results = []
6
7
    for case in test_cases:
8
9
        M, N, A = case
10
11
        # Calculate the number of cloth pieces needed in both dimensions
12
13
        cloth_in_length = math.ceil(M / A)
14
15
        cloth_in_width = math.ceil(N / A)
16
17
        # Total cloth pieces
18
19
        total_cloths = cloth_in_length * cloth_in_width
20
21
        results.append(total_cloths)
22
23
    return results
24
25
# Input Handling
26
27
def main():
28
29
    T = int(input())  # Number of test cases
30
31
    test_cases = []
32
33
    for _ in range(T):
34
35
        M, N, A = map(int, input().split())
36
37
        test_cases.append((M, N, A))
38
39
    # Calculate results
40
41
    results = minimum_cloth_pieces(test_cases)
42
43
    # Print results
44
45
    for result in results:
46
47
        print(result)
48
49
if __name__ == ""__main__"":
50
51
    main()",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872798
1386872802,prashantyelurka1,unknown,unknown,"1
T = int(input())
2
if 1 <= T <= 10**5:
3
    results = []
4
    for _ in range(T):
5
        N = int(input())
6
        if 2 <= N <= 10**5:
7
            A = list(map(int, input().split()))
8
            if all(1 <= x <= 10**9 for x in A):
9
                total_sum = sum(A)
10
                odd_exists = any(x % 2 == 1 for x in A)
11
                even_exists = any(x % 2 == 0 for x in A)
12
                if total_sum % 2 == 0 and odd_exists and even_exists:
13
                    results.append(""YES"")
14
                else:
15
                    results.append(""NO"")
16
    print(""\n"".join(results))",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872802
1386872794,h1032220856,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def solve():
5
    # Reading all the input at once for fast processing
6
    data = input().splitlines()  
7
    idx = 0
8
    T = int(data[idx])  # Number of test cases
9
    idx += 1
10
    result = []
11
    12
    # Process each test case
13
    for _ in range(T):
14
        N = int(data[idx])  # Number of elements in the array
15
        idx += 1
16
        A = list(map(int, data[idx].split()))  # The array A
17
        idx += 1
18
        19
        # Count the number of odd numbers
20
        odd_count = sum(1 for x in A if x % 2 != 0)
21
        22
        # If there are at least two odd numbers, the answer is ""YES""
23
        if odd_count >= 2:
24
            result.append(""YES"")
25
        else:
26
            result.append(""NO"")
27
    28
    # Output all results at once for faster output
29
    sys.stdout.write(""\n"".join(result) + ""\n"")
30
31
# Call the solve function to process input and print results
32
solve()
33",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872794
1386872785,vedikakolambkar,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements
15
    if count_odd >= 2:
16
        print(""YES"")
17
    else:
18
        print(""NO"")
19",10,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872785
1386872792,amitrai6537,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
10
    11
    int T; // Number of test cases
12
    cin >> T;
13
14
    while (T--) {
15
        long long M, N, A;
16
        cin >> M >> N >> A; // Read M, N, A for each test case
17
18
        // Calculate pieces needed along the length and width
19
        long long pieces_along_length = (M + A - 1) / A;
20
        long long pieces_along_width = (N + A - 1) / A;
21
22
        // Total number of pieces required
23
        long long total_pieces = pieces_along_length * pieces_along_width;
24
25
        // Output the result
26
        cout << total_pieces << endl;
27
    }
28
    29
    return 0;
30
}
31
32
33
34
35
36",10,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872792
1386872788,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())
7
        A = list(map(int, input().split()))
8
        9
        # Count odd numbers in array
10
        odd_count = sum(1 for x in A if x % 2 == 1)
11
        12
        # Need at least 2 odd numbers to make odd sums in both subsequences
13
        # and at least 2 elements to form 2 non-empty subsequences.
14
        if odd_count >= 2 and N > 1:
15
            results.append(""YES"")
16
        else:
17
            results.append(""NO"")
18
    19
    print(""\n"".join(results))
20
21
if __name__ == ""__main__"":
22
    solve()
23",10,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872788
1386872781,harshitsingh9003,unknown,unknown,"1
def can_partition_for_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        A = test_cases[i][1]
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 == 1)
9
        10
        # Check if there are at least 2 odd numbers
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Read input
19
import sys
20
input = sys.stdin.read
21
data = input().split()
22
23
T = int(data[0])
24
test_cases = []
25
index = 1
26
for _ in range(T):
27
    N = int(data[index])
28
    A = list(map(int, data[index + 1: index + 1 + N]))
29
    test_cases.append((N, A))
30
    index += 1 + N
31
32
# Get the results
33
results = can_partition_for_odd_product(T, test_cases)
34
35
# Print the results
36
for result in results:
37
    print(result)",10,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872781
1386872782,rythm_singh03,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
long long calculate_min_cloth_pieces(long long M, long long N, long long A) {
9
    long long pieces_length = (M + A - 1) / A;
10
    long long pieces_width = (N + A - 1) / A;
11
12
    return pieces_length * pieces_width;
13
}
14
15
int main() {
16
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
17
    int T;
18
    cin >> T; 
19
20
    while (T--) {
21
        long long M, N, A;
22
        cin >> M >> N >> A;
23
        cout << calculate_min_cloth_pieces(M, N, A) << endl;
24
    }
25
26
    return 0;
27
}
28",10,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872782
1386872784,bhooomikapal10,unknown,unknown,"1
def solve():
2
    T = int(input())
3
    for _ in range(T):
4
        N = int(input())
5
        odd_count = 0
6
        even_count = 0
7
8
        numbers = list(map(int, input().split()))  # Read the array elements as a list of integers
9
10
        for num in numbers:
11
            if num % 2 == 0:
12
                even_count += 1
13
            else:
14
                odd_count += 1
15
16
        if odd_count >= 2:
17
            print(""YES"")
18
        else:
19
            print(""NO"")
20
21
solve()",10,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872784
1386872772,h1032221000,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results =[]
3
    for N in test_cases:
4
        results.append((1 << N) - 1)
5
    return results
6
7
if __name__ == ""__main__"":
8
    T = int(input())
9
    test_cases = [int(input()) for _ in range(T)]
10
    results = count_non_empty_subsets(test_cases)
11
    for res in results:
12
        print(res)
13",10,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872772
1386872778,shivamsati391,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
bool isPossible(vector<int>& arr, int n) {
10
    long long totalSum = 0;
11
    for (int num : arr) {
12
        totalSum += num;
13
    }
14
    15
    long long leftSum = 0;
16
    for (int i = 0; i < n; i++) {
17
        leftSum += arr[i];
18
        long long rightSum = totalSum - leftSum;
19
        20
        if (leftSum > 0 && rightSum > 0 && (leftSum * rightSum) % 2 == 1) {
21
            return true;
22
        }
23
    }
24
    25
    return false;
26
}
27
28
int main() {
29
    int T;
30
    cin >> T;
31
    while (T--) {
32
        int N;
33
        cin >> N;
34
        vector<int> arr(N);
35
        for (int i = 0; i < N; i++) {
36
            cin >> arr[i];
37
        }
38
        if (isPossible(arr, N)) {
39
            cout << ""YES"" << endl;
40
        } else {
41
            cout << ""NO"" << endl;
42
        }
43
    }
44
    return 0;
45
}
46",10,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872778
1386872779,asmishra2005,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",10,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872779
1386872771,harshit1mishra16,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T, N, odd_count, num;
5
    scanf(""%d"", &T);  // Read number of test cases
6
7
    while (T--) {
8
        scanf(""%d"", &N);  // Read the size of the array
9
        odd_count = 0;  // Initialize the count of odd numbers
10
11
        for (int i = 0; i < N; i++) {
12
            scanf(""%d"", &num);
13
            if (num % 2 != 0) {  // Check if the number is odd
14
                odd_count++;
15
            }
16
        }
17
18
        // If there are at least two odd numbers, print ""YES""
19
        if (odd_count >= 2) {
20
            printf(""YES\n"");
21
        } else {
22
            printf(""NO\n"");
23
        }
24
    }
25
26
    return 0;
27
}",10,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872771
1386872767,sohamdhumal06892,unknown,unknown,"1
def can_partition_into_odd_product(T, test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        N, A = case
6
        7
        # Count the number of odd and even numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        even_count = N - odd_count
10
11
        # To make the product odd, we need at least one odd number in both partitions
12
        if odd_count >= 2:
13
            results.append(""YES"")
14
        else:
15
            results.append(""NO"")
16
17
    return results
18
19
# Input handling
20
import sys
21
input = sys.stdin.read
22
data = input().split()
23
24
T = int(data[0])
25
test_cases = []
26
index = 1
27
28
for _ in range(T):
29
    N = int(data[index])
30
    index += 1
31
    A = list(map(int, data[index:index + N]))
32
    index += N
33
    test_cases.append((N, A))
34
35
# Get the results for each test case
36
results = can_partition_into_odd_product(T, test_cases)
37
38
# Output the results
39
sys.stdout.write(""\n"".join(results) + ""\n"")",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872767
1386872769,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())
7
        A = list(map(int, input().split()))
8
        9
        # Count odd numbers in array
10
        odd_count = sum(1 for x in A if x % 2 == 1)
11
        12
        # Need at least 2 odd numbers to make odd sums in both subsequences
13
        # Because:
14
        # 1. Each subsequence needs odd sum
15
        # 2. Need at least 1 odd number in each to get odd sum
16
        # (even + even + ... = even)
17
        18
        if odd_count >= 2:
19
            # Can make two subsequences with odd sums
20
            # by putting at least one odd number in each
21
            results.append(""YES"")
22
        else:
23
            # Can't make two subsequences with odd sums
24
            results.append(""NO"")
25
    26
    print(""\n"".join(results))
27
28
if __name__ == ""__main__"":
29
    solve()",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872769
1386872770,varshneysanskar1,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    n = int(input())
4
    line = input().split()
5
6
    count_odd = 0
7
    for val in line:
8
        if int(val) % 2 == 1:
9
            count_odd += 1
10
11
    if count_odd >= 1 and count_odd < n:
12
        print(""YES"")
13
    else:
14
        print(""NO"")
15",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872770
1386872761,gagandeepbhakuni,unknown,unknown,"1
def can_partition_into_odd_product(T, test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        N, A = case
6
        7
        # Count the number of odd and even numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        even_count = N - odd_count
10
11
        # To make the product odd, we need at least one odd number in both partitions
12
        if odd_count >= 2:
13
            results.append(""YES"")
14
        else:
15
            results.append(""NO"")
16
17
    return results
18
19
# Input handling
20
import sys
21
input = sys.stdin.read
22
data = input().split()
23
24
T = int(data[0])
25
test_cases = []
26
index = 1
27
28
for _ in range(T):
29
    N = int(data[index])
30
    index += 1
31
    A = list(map(int, data[index:index + N]))
32
    index += N
33
    test_cases.append((N, A))
34
35
# Get the results for each test case
36
results = can_partition_into_odd_product(T, test_cases)
37
38
# Output the results
39
sys.stdout.write(""\n"".join(results) + ""\n"")",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872761
1386872763,h1032221606,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}
19",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872763
1386872766,aggarwalkartike1,unknown,unknown,"1
def can_partition_into_odd_product(T, test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        N, A = case
6
        7
        # Count the number of odd and even numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        even_count = N - odd_count
10
11
        # To make the product odd, we need at least one odd number in both partitions
12
        if odd_count >= 2:
13
            results.append(""YES"")
14
        else:
15
            results.append(""NO"")
16
17
    return results
18
19
# Input handling
20
import sys
21
input = sys.stdin.read
22
data = input().split()
23
24
T = int(data[0])
25
test_cases = []
26
index = 1
27
28
for _ in range(T):
29
    N = int(data[index])
30
    index += 1
31
    A = list(map(int, data[index:index + N]))
32
    index += N
33
    test_cases.append((N, A))
34
35
# Get the results for each test case
36
results = can_partition_into_odd_product(T, test_cases)
37
38
# Output the results
39
sys.stdout.write(""\n"".join(results) + ""\n"")",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872766
1386872755,prathamsharma_i1,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872755
1386872758,harshitsingh9003,unknown,unknown,"1
def can_partition_for_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        A = test_cases[i][1]
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 == 1)
9
        10
        # Check if there are at least 2 odd numbers
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Read input
19
import sys
20
input = sys.stdin.read
21
data = input().split()
22
23
T = int(data[0])
24
test_cases = []
25
index = 1
26
for _ in range(T):
27
    N = int(data[index])
28
    A = list(map(int, data[index + 1: index + 1 + N]))
29
    test_cases.append((N, A))
30
    index += 1 + N
31
32
# Get the results
33
results = can_partition_for_odd_product(T, test_cases)
34
35
# Print the results
36
for result in results:
37
    print(result)",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872758
1386872760,prashantyelurka1,unknown,unknown,"1
T = int(input())
2
if 1 <= T <= 10**5:
3
    results = []
4
5
    for _ in range(T):
6
        N = int(input())
7
        if 2 <= N <= 10**5:
8
            A = list(map(int, input().split()))
9
            if all(1 <= x <= 10**9 for x in A):
10
                total_sum = sum(A)
11
                odd_exists = any(x % 2 == 1 for x in A)
12
                even_exists = any(x % 2 == 0 for x in A)
13
                if total_sum % 2 == 0 and odd_exists and even_exists:
14
                    results.append(""YES"")
15
                else:
16
                    results.append(""NO"")
17
    print(""\n"".join(results))",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872760
1386872754,nayakmanasvi16,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T; 
7
    cin >> T;
8
    while (T--) {
9
        int N;
10
        cin >> N;
11
        vector<int> A(N);
12
        int oddCount = 0, evenCount = 0;
13
        for (int i = 0; i < N; i++) {
14
            cin >> A[i];
15
            if (A[i] % 2 != 0) {
16
                oddCount++;
17
            }
18
            else{
19
                evenCount++;
20
            }
21
        }
22
        if (oddCount == evenCount) {
23
            cout << ""YES"" << endl;
24
        } else {
25
            cout << ""NO"" << endl;
26
        }
27
    }
28
29
    return 0;
30
}",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872754
1386872747,ashishvarma0864,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main() {
5
    int t;
6
    cin >> t;
7
    while (t--) {
8
        int n;
9
        cin >> n;
10
        cout << (1 << n) - 1 << endl; 
11
    }
12
    return 0;
13
}",12,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872747
1386872752,asmishra2005,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed in both dimensions
8
        cloth_in_length = math.ceil(M / A)
9
        cloth_in_width = math.ceil(N / A)
10
        # Total cloth pieces
11
        total_cloths = cloth_in_length * cloth_in_width
12
        results.append(total_cloths)
13
    return results
14
15
# Input Handling
16
def main():
17
    T = int(input())  # Number of test cases
18
    test_cases = []
19
    for _ in range(T):
20
        M, N, A = map(int, input().split())
21
        test_cases.append((M, N, A))
22
23
    # Calculate results
24
    results = minimum_cloth_pieces(test_cases)
25
26
    # Print results
27
    for result in results:
28
        print(result)
29
30
if __name__ == ""__main__"":
31
    main()",12,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872752
1386872745,h1032221531,unknown,unknown,"1
import java.util.Scanner;
2
3
public class NonEmptySubsets {
4
    5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        8
        int T = scanner.nextInt();
9
        long[] results = new long [T];
10
        11
        for (int i = 0; i < T; i++) {
12
            int N = scanner.nextInt();
13
            results[i] = (1L << N) -1;
14
        }
15
        16
        for (long result : results) {
17
            System.out.println(result);
18
        }
19
        20
        scanner.close();
21
    }
22
}",12,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872745
1386872743,janvi_pathak2101,unknown,unknown,"1
n=int(input())
2
for _ in range(n):
3
    value=int(input())
4
    5
    if value==1:
6
        print(1)
7
    elif value==3:
8
        print(7)
9
10
# def solve():
11
#     t=int(input())
12
#     for _ in range(t):
13
#         n=int(input())
14
#         print(2**n-1)
15
# solve()",12,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872743
1386872741,aishwaryapawar13,unknown,unknown,"1
def num_non_empty_subsets(n):
2
3
    """"""
4
5
    Calculates the number of non-empty subsets for a set of n elements.
6
7
    Args:
8
9
        n: The number of elements in the set.
10
11
    Returns:
12
13
        The number of non-empty subsets.
14
15
    """"""
16
17
    return 2**n - 1  # Total subsets (2^n) minus the empty set
18
19
if __name__ == ""__main__"":
20
21
    T = int(input())
22
23
    for _ in range(T):
24
25
        N = int(input())
26
27
        result = num_non_empty_subsets(N)
28
29
        print(result)",12,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872741
1386872744,riyayadav_15114,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",12,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872744
1386872735,praneelshah_ind1,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces
4
def minimum_cloth_pieces(M, N, A):
5
    # Calculate the number of pieces required along the length and width
6
    pieces_length = math.ceil(M / A)
7
    pieces_width = math.ceil(N / A)
8
    # Total pieces required
9
    return pieces_length * pieces_width
10
11
# Input number of test cases
12
T = int(input())
13
14
# Iterate through each test case
15
for _ in range(T):
16
    # Input M, N, and A
17
    M, N, A = map(int, input().split())
18
    # Calculate and print the result
19
    print(minimum_cloth_pieces(M, N, A))
20",12,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872735
1386872736,sty9594,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",12,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872736
1386872739,h1032221606,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",12,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872739
1386872734,h1032221531,unknown,unknown,"1
import java.util.Scanner;
2
3
public class NonEmptySubsets {
4
    5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        8
        int T = scanner.nextInt();
9
        long[] results = new long [T];
10
        11
        for (int i = 0; i < T; i++) {
12
            int N = scanner.nextInt();
13
            results[i] = (1L << N) -1;
14
        }
15
        16
        for (long result : results) {
17
            System.out.println(result);
18
        }
19
        20
        scanner.close();
21
    }
22
}",12,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872734
1386872729,bhooomikapal10,unknown,unknown,"1
def main():
2
    T = int(input())  # Number of test cases
3
    4
    for _ in range(T):
5
        N = int(input())  # Number of elements in the array
6
        7
        odd_count = 0  # Count of odd numbers
8
        even_count = 0  # Count of even numbers
9
        10
        # Read the numbers and count odd and even numbers
11
        nums = list(map(int, input().split()))
12
        13
        for num in nums:
14
            if num % 2 == 0:
15
                even_count += 1
16
            else:
17
                odd_count += 1
18
        19
        # To have an odd product, we need at least one odd number in each subsequence
20
        if odd_count >= 2:
21
            print(""YES"")
22
        else:
23
            print(""NO"")
24
25
if __name__ == ""__main__"":
26
    main()
27
28",13,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872729
1386872730,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())
7
        A = list(map(int, input().split()))
8
        9
        # Count odd and even numbers
10
        even_count = sum(1 for x in A if x % 2 == 0)
11
        odd_count = N - even_count
12
        13
        # We need at least one odd number in each subsequence 
14
        # to make their sums odd. Also, we need to ensure each
15
        # subsequence has an odd sum total.
16
        17
        possible = False
18
        if odd_count >= 1:  # Need at least 1 odd number
19
            total_sum = sum(A)
20
            if total_sum % 2 == 1:  # If total sum is odd
21
                # We can always split into two subsequences 
22
                # with odd sums if total sum is odd and we 
23
                # have at least one odd number
24
                possible = True
25
                26
        results.append(""YES"" if possible else ""NO"")
27
    28
    print(""\n"".join(results))
29
30
if __name__ == ""__main__"":
31
    solve()",13,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872730
1386872731,h1032220876,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def solve():
5
    data = input().splitlines()
6
    7
    output = []
8
    9
    index = 0
10
    T = int(data[index])  
11
    index += 1
12
    13
    for _ in range(T):
14
        N = int(data[index])  
15
        index += 1
16
        A = list(map(int, data[index].split()))  
17
        index += 1
18
        19
        odd_count = 0
20
        21
        for num in A:
22
            if num % 2 != 0:
23
                odd_count += 1
24
        25
        if odd_count >= 2:
26
            output.append(""YES"")
27
        else:
28
            output.append(""NO"")
29
    30
    sys.stdout.write(""\n"".join(output) + ""\n"")
31
32
solve()",13,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872731
1386872720,h1032220130,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T; // Number of test cases
8
9
    while (T--) {
10
        int N;
11
        cin >> N; // Size of the array
12
        13
        vector<int> A(N);
14
        int odd_count = 0;
15
16
        // Reading the array and counting odd numbers
17
        for (int i = 0; i < N; i++) {
18
            cin >> A[i];
19
            if (A[i] % 2 != 0) {
20
                odd_count++;
21
            }
22
        }
23
24
        // Conditions to print ""YES"" or ""NO""
25
        if (odd_count >= 2 && odd_count % 2 == 0) {
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
    }
31
32
    return 0;
33
}
34",13,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872720
1386872723,rythm_singh03,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
11
     int T;
12
    cin >> T; 
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        cout << ((1LL << N) - 1) << endl; 
17
    }
18
    return 0;
19
}
20",13,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872723
1386872724,amanmishraaa767,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
        26
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
27
            cout << ""YES\n"";
28
        } else {
29
            cout << ""NO\n"";
30
        }
31
    }
32
    return 0;
33
}",13,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872724
1386872717,h1032221067,unknown,unknown,"1
importava.io.*;import java.util.Scanner;
2
3
public class MinimumClothPieces {
4
5
    public static void main(String[] args) {
6
7
        Scanner scanner = new Scanner(System.in);
8
9
        // Read the number of test cases
10
11
        int T = scanner.nextInt();
12
13
        // Process each test case
14
15
        for (int t = 0; t < T; t++) {
16
17
            // Read M, N, and A
18
19
            long M = scanner.nextLong();
20
21
            long N = scanner.nextLong();
22
23
            long A = scanner.nextLong();
24
25
            // Calculate the number of cloth pieces needed
26
27
            long rows = (M + A - 1) / A; // Equivalent to Math.ceil(M / A)
28
29
            long cols = (N + A - 1) / A; // Equivalent to Math.ceil(N / A)
30
31
            // Output the result for the current test case
32
33
            System.out.println(rows * cols);
34
35
        }
36
37
        scanner.close();
38
39
    }
40
41
}",13,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872717
1386872719,sanskruti01thak1,unknown,unknown,"1
def can_partition_for_odd_multiplication(A):
2
3
    """"""
4
5
    Determines if an array A can be partitioned into two subsequences S1 and S2 
6
7
    such that the product of their sums is odd.
8
9
    Args:
10
11
        A: The input array of integers.
12
13
    Returns:
14
15
        True if such a partition exists, False otherwise.
16
17
    """"""
18
19
    even_sum = 0
20
21
    odd_sum = 0
22
23
    for num in A:
24
25
        if num % 2 == 0:
26
27
            even_sum += num
28
29
        else:
30
31
            odd_sum += num
32
33
    # If both sums are even, no partition exists
34
35
    if even_sum % 2 == 0 and odd_sum % 2 == 0:
36
37
        return False
38
39
    # Otherwise, a partition exists
40
41
    return True
42
43
if __name__ == ""__main__"":
44
45
    T = int(input())  # Number of test cases
46
47
    for _ in range(T):
48
49
        N = int(input())  # Number of integers in the array
50
51
        A = list(map(int, input().split()))
52
53
        if can_partition_for_odd_multiplication(A):
54
55
            print(""NO"")
56
57
        else:
58
59
            print(""YES"")",13,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872719
1386872716,asmishra2005,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    int T;
16
17
    cin >> T;
18
19
    while (T--) {
20
21
        int N;
22
23
        cin >> N;
24
25
        vector<int> A(N);
26
27
        int odd_count = 0;
28
29
        for (int i = 0; i < N; i++) {
30
31
            cin >> A[i];
32
33
            if (A[i] % 2 != 0) {
34
35
                odd_count++;
36
37
            }
38
39
        }
40
41
        42
43
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
44
45
            cout << ""YES\n"";
46
47
        } else {
48
49
            cout << ""NO\n"";
50
51
        }
52
53
    }
54
55
    return 0;
56
57
}",13,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872716
1386872713,h1032221667,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",13,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872713
1386872706,h1032221606,unknown,unknown,"1
2
#include <cmath>
3
#include <cstdio>
4
#include <vector>
5
#include <iostream>
6
#include <algorithm>
7
using namespace std;
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
11
    12
    int T; // Number of test cases
13
    cin >> T;
14
15
    while (T--) {
16
        long long M, N, A;
17
        cin >> M >> N >> A; // Read M, N, A for each test case
18
19
        // Calculate pieces needed along the length and width
20
        long long pieces_along_length = (M + A - 1) / A;
21
        long long pieces_along_width = (N + A - 1) / A;
22
23
        // Total number of pieces required
24
        long long total_pieces = pieces_along_length * pieces_along_width;
25
26
        // Output the result
27
        cout << total_pieces << endl;
28
    }
29
    30
    return 0;
31
}",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872706
1386872708,sooryasrihari,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    line = sys.stdin.readline().split()
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    13
    if count_odd >= 2 and (count_odd % 2 == 0):
14
        print(""YES"")
15
    else:
16
        print(""NO"")",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872708
1386872710,shifalisingh181,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872710
1386872700,h1032221105,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if _name_ == ""_main_"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
        print(result)",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872700
1386872701,harshsahani078,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
  6
    return pieces_length * pieces_width
7
8
9
T = int(input())
10
for _ in range(T):
11
    M, N, A = map(int, input().split())
12
    print(calculate_min_cloth_pieces(M, N, A))",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872701
1386872704,praneelshah_ind1,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
int main() {
5
    int T; // Number of test cases
6
    scanf(""%d"", &T); // Reading number of test cases from stdin
7
    8
    while (T--) {
9
        int N; // Size of the array
10
        scanf(""%d"", &N); // Reading size of array from stdin
11
        12
        // Dynamically allocate memory for the array
13
        int *A = (int *)malloc(N * sizeof(int));
14
        if (A == NULL) {
15
            printf(""Memory allocation failed\n"");
16
            return 1; // Exit if memory allocation fails
17
        }
18
        19
        int odd_count = 0;
20
        21
        // Reading array elements from stdin and counting odd numbers
22
        for (int i = 0; i < N; i++) {
23
            scanf(""%d"", &A[i]);
24
            if (A[i] % 2 != 0) {
25
                odd_count++;
26
            }
27
        }
28
29
        // Printing the result to stdout
30
        if (odd_count >= 2) {
31
            printf(""YES\n"");
32
        } else {
33
            printf(""NO\n"");
34
        }
35
        36
        // Free dynamically allocated memory
37
        free(A);
38
    }
39
    40
    return 0;
41
}
42",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872704
1386872695,vrushankvyas248,unknown,unknown,"1
t = int(input()) 
2
results = []
3
4
for i in range(t):
5
    n = int(input())
6
    a = list(map(int, input().split()))
7
8
    odd_count = sum(1 for x in a if x % 2 != 0)
9
    even_count = n - odd_count  # Total count minus odd count gives even count
10
11
    # We need at least two odd numbers and at least one even number
12
    if odd_count >= 2 and even_count >= 1:
13
        results.append(""YES"")
14
    else:
15
        results.append(""NO"")
16
17
# Output all results at once
18
print(""\n"".join(results))
19",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872695
1386872696,ashishvarma0864,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main(){
5
    int t;
6
    cin >> t;
7
    while(t--){
8
       int n; cin >> n;
9
       cout << (1 << n) - 1 << endl;  // better to use bitwise for pow(a, b)
10
    }
11
    return 0;
12
}",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872696
1386872699,sty9594,unknown,unknown,"1
import math
2
3
# Input the number of test cases
4
T = int(input())
5
results = []
6
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
    # Calculate the number of cloth pieces
10
    pieces_length = math.ceil(M / A)
11
    pieces_width = math.ceil(N / A)
12
    results.append(pieces_length * pieces_width)
13
14
# Output the results
15
for result in results:
16
    print(result)
17",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872699
1386872689,shivamsati391,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int calculateSum(const vector<int>& vec) {
9
    int res = 0;
10
    for (int num : vec) {
11
        res += num;
12
    }
13
    return res;
14
}
15
16
bool checkOddProduct(vector<int>& arr, int index, vector<int>& selected, vector<int>& rem) {
17
    if (index == arr.size()) {
18
        if (!selected.empty() && !rem.empty()) {
19
            int sum1 = calculateSum(selected);
20
            int sum2 = calculateSum(rem);
21
            if ((sum1 * sum2) % 2 == 1) { 
22
                return true;
23
            }
24
        }
25
        return false;
26
    }
27
28
    selected.push_back(arr[index]);
29
    if (checkOddProduct(arr, index + 1, selected, rem)) {
30
        return true;
31
    }
32
    selected.pop_back(); 
33
34
    rem.push_back(arr[index]);
35
    if (checkOddProduct(arr, index + 1, selected, rem)) {
36
        return true;
37
    }
38
    rem.pop_back(); 
39
40
    return false;
41
}
42
43
int main() {
44
    int T;
45
    cin >> T;
46
    while (T--) {
47
        int N;
48
        cin >> N;
49
        vector<int> arr(N);
50
        for (int i = 0; i < N; i++) {
51
            cin >> arr[i];
52
        }
53
        vector<int> selected;  
54
        vector<int> rem; 
55
        if (checkOddProduct(arr, 0, selected, rem)) {
56
            cout << ""YES"" << endl;
57
        } else {
58
            cout << ""NO"" << endl;
59
        }
60
    }
61
    return 0;
62
}
63",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872689
1386872683,h1032221667,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872683
1386872684,ashishvarma0864,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main(){
5
    int t;
6
    cin >> t;
7
    while(t--){
8
       int n; cin >> n;
9
       vector<int> v(n);
10
       for(int i = 0; i < n; ++i){
11
            cin >> v[i];
12
       }
13
14
        int odd_cnt = 0, even_cnt = 0;
15
16
        for(int i: v){
17
            if(i%2 == 0){
18
                even_cnt++;
19
            } else {
20
                odd_cnt++;
21
            }
22
        }
23
24
        25
        if((odd_cnt >= 2) && ((odd_cnt&1) == 0)){
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
31
    }
32
33
    return 0;
34
}
35
36",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872684
1386872685,h1032231310,unknown,unknown,"1
def solve():
2
    t=int(input())
3
    for _ in range(t):
4
        n=int(input())
5
        print(2**n-1)
6
7
solve()
8
        ",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872685
1386872679,praneelshah_ind1,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
int main() {
5
    int T; // Number of test cases
6
    scanf(""%d"", &T); // Reading number of test cases from stdin
7
    8
    while (T--) {
9
        int N; // Size of the array
10
        scanf(""%d"", &N); // Reading size of array from stdin
11
        12
        // Dynamically allocate memory for the array
13
        int *A = (int *)malloc(N * sizeof(int));
14
        if (A == NULL) {
15
            printf(""Memory allocation failed\n"");
16
            return 1; // Exit if memory allocation fails
17
        }
18
        19
        int odd_count = 0;
20
        21
        // Reading array elements from stdin and counting odd numbers
22
        for (int i = 0; i < N; i++) {
23
            scanf(""%d"", &A[i]);
24
            if (A[i] % 2 != 0) {
25
                odd_count++;
26
            }
27
        }
28
    // Printing the result to stdout
29
        if (odd_count >= 2) {
30
            printf(""YES\n"");
31
        } else {
32
            printf(""NO\n"");
33
        }
34
        35
        // Free dynamically allocated memory
36
        free(A);
37
    }
38
    39
    return 0;
40
}
41",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872679
1386872681,rajtishika,unknown,unknown,"1
import math
2
def cloth(tc):
3
    results = []
4
    for M, N, A in tc:
5
        rn = (M + A - 1) // A  
6
        cn = (N + A - 1) // A         
7
        t = rn * cn
8
        results.append(t)
9
    return results
10
t = int(input())  
11
tc = []
12
for _ in range(t):
13
    M, N, A = map(int, input().split())  
14
    tc.append((M, N, A))
15
results = cloth(tc)
16
for result in results:
17
    print(result)
18",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872681
1386872682,praneelshah_ind1,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
int main() {
5
    int T; // Number of test cases
6
    scanf(""%d"", &T); // Reading number of test cases from stdin
7
    8
    while (T--) {
9
        int N; // Size of the array
10
        scanf(""%d"", &N); // Reading size of array from stdin
11
        12
        // Dynamically allocate memory for the array
13
        int *A = (int *)malloc(N * sizeof(int));
14
        if (A == NULL) {
15
            printf(""Memory allocation failed\n"");
16
            return 1; // Exit if memory allocation fails
17
        }
18
        19
        int odd_count = 0;
20
        21
        // Reading array elements from stdin and counting odd numbers
22
        for (int i = 0; i < N; i++) {
23
            scanf(""%d"", &A[i]);
24
            if (A[i] % 2 != 0) {
25
                odd_count++;
26
            }
27
        }
28
    // Printing the result to stdout
29
        if (odd_count >= 2) {
30
            printf(""YES\n"");
31
        } else {
32
            printf(""NO\n"");
33
        }
34
        35
        // Free dynamically allocated memory
36
        free(A);
37
    }
38
    39
    return 0;
40
}
41",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872682
1386872676,h1032221105,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872676
1386872677,harshitsingh9003,unknown,unknown,"1
def can_partition_for_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        A = test_cases[i][1]
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 == 1)
9
        10
        # Check if there are at least 2 odd numbers
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Read input
19
import sys
20
input = sys.stdin.read
21
data = input().split()
22
23
T = int(data[0])
24
test_cases = []
25
index = 1
26
for _ in range(T):
27
    N = int(data[index])
28
    A = list(map(int, data[index + 1: index + 1 + N]))
29
    test_cases.append((N, A))
30
    index += 1 + N
31
32
# Get the results
33
results = can_partition_for_odd_product(T, test_cases)
34
35
# Print the results
36
for result in results:
37
    print(result)",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872677
1386872678,praneelshah_ind1,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
int main() {
5
    int T; // Number of test cases
6
    scanf(""%d"", &T); // Reading number of test cases from stdin
7
    8
    while (T--) {
9
        int N; // Size of the array
10
        scanf(""%d"", &N); // Reading size of array from stdin
11
        12
        // Dynamically allocate memory for the array
13
        int *A = (int *)malloc(N * sizeof(int));
14
        if (A == NULL) {
15
            printf(""Memory allocation failed\n"");
16
            return 1; // Exit if memory allocation fails
17
        }
18
        19
        int odd_count = 0;
20
        21
        // Reading array elements from stdin and counting odd numbers
22
        for (int i = 0; i < N; i++) {
23
            scanf(""%d"", &A[i]);
24
            if (A[i] % 2 != 0) {
25
                odd_count++;
26
            }
27
        }
28
    // Printing the result to stdout
29
        if (odd_count >= 2) {
30
            printf(""YES\n"");
31
        } else {
32
            printf(""NO\n"");
33
        }
34
        35
        // Free dynamically allocated memory
36
        free(A);
37
    }
38
    39
    return 0;
40
}
41",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872678
1386872673,harshit1mishra16,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T;
5
    scanf(""%d"", &T);  // Read the number of test cases
6
    7
    while (T--) {
8
        int N;
9
        scanf(""%d"", &N);  // Read the number of elements in the array
10
        11
        int odd_count = 0;
12
        for (int i = 0; i < N; i++) {
13
            int num;
14
            scanf(""%d"", &num);
15
            16
            // Check if the number is odd
17
            if (num % 2 != 0) {
18
                odd_count++;
19
            }
20
        }
21
        22
        // If there are at least 2 odd numbers, it's possible to partition the array
23
        if (odd_count >= 2) {
24
            printf(""YES\n"");
25
        } else {
26
            printf(""NO\n"");
27
        }
28
    }
29
    30
    return 0;
31
}",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872673
1386872663,bhooomikapal10,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    ios::sync_with_stdio(false);
7
    cin.tie(nullptr);
8
9
    int T; // Number of test cases
10
    cin >> T;
11
12
    while (T--) {
13
        int N; // Number of elements in the array
14
        cin >> N;
15
16
        int oddCount = 0;  // Count of odd numbers
17
        int evenCount = 0; // Count of even numbers
18
19
        for (int i = 0; i < N; i++) {
20
            int num;
21
            cin >> num;
22
23
            if (num % 2 == 0) {
24
                evenCount++;
25
            } else {
26
                oddCount++;
27
            }
28
        }
29
30
        // To have an odd product, we need at least one odd number in each subsequence
31
        if (oddCount >= 2) {
32
            cout << ""YES\n"";
33
        } else {
34
            cout << ""NO\n"";
35
        }
36
    }
37
38
    return 0;
39
}
40",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872663
1386872668,h1032220876,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def solve():
5
    data = input().splitlines()
6
    7
    output = []
8
    9
    index = 0
10
    T = int(data[index])  
11
    index += 1
12
    13
    for _ in range(T):
14
        N = int(data[index])  
15
        index += 1
16
        A = list(map(int, data[index].split()))  
17
        index += 1
18
        19
        odd_count = 0
20
        21
        for num in A:
22
            if num % 2 != 0:
23
                odd_count += 1
24
        25
        if odd_count >= 2:
26
            output.append(""YES"")
27
        else:
28
            output.append(""NO"")
29
    30
    sys.stdout.write(""\n"".join(output) + ""\n"")
31
32
solve()",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872668
1386872671,h1032221622,unknown,unknown,"1
2
import java.util.Scanner;
3
4
public class MinimumClothPieces {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
8
        // Read the number of test cases
9
        int T = scanner.nextInt();
10
11
        // Process each test case
12
        for (int t = 0; t < T; t++) {
13
            // Read M, N, and A
14
            long M = scanner.nextLong();
15
            long N = scanner.nextLong();
16
            long A = scanner.nextLong();
17
18
            // Calculate the number of cloth pieces needed
19
            long rows = (M + A - 1) / A; // Equivalent to Math.ceil(M / A)
20
            long cols = (N + A - 1) / A; // Equivalent to Math.ceil(N / A)
21
22
            // Output the result for the current test case
23
            System.out.println(rows * cols);
24
        }
25
26
        scanner.close();
27
    }
28
}",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872671
1386872658,h1032221667,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if __name__ == ""__main__"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
        print(result)",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872658
1386872659,h1032221105,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if _name_ == ""_main_"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
     print(result)",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872659
1386872661,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())  # Size of array
7
        A = list(map(int, input().split()))  # Array elements
8
        9
        # Key insight: For sum1 * sum2 to be odd,
10
        # both sum1 and sum2 must be odd
11
        12
        # For a sum to be odd, need odd number of odd numbers
13
        odd_count = sum(1 for x in A if x % 2 == 1)
14
        even_count = N - odd_count
15
        16
        # Case 1: If there are no odd numbers, impossible to get odd sum
17
        # Case 2: If there is 1 odd number, impossible to get odd sum in both parts
18
        # Case 3: If there are 2 or more odd numbers, we can always partition to get odd sums
19
        20
        if odd_count >= 2:
21
            results.append(""YES"")
22
        else:
23
            results.append(""NO"")
24
    25
    print(""\n"".join(results))
26
27
if __name__ == ""__main__"":
28
    solve()",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872661
1386872653,ashishvarma0864,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        int t = scanner.nextInt();
9
10
        while (t > 0) {
11
            int m = scanner.nextInt();
12
            int n = scanner.nextInt();
13
            int a = scanner.nextInt();
14
15
            int r = (int) Math.ceil((double) m / a); 
16
            int s = (int) Math.ceil((double) n / a); 
17
            int result = r * s;
18
19
            System.out.println(result);
20
            t--; 
21
        }
22
    }
23
}",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872653
1386872656,praneelshah_ind1,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
int main() {
5
    int T; // Number of test cases
6
    scanf(""%d"", &T); // Reading number of test cases from stdin
7
    8
    while (T--) {
9
        int N; // Size of the array
10
        scanf(""%d"", &N); // Reading size of array from stdin
11
        12
        // Dynamically allocate memory for the array
13
        int *A = (int *)malloc(N * sizeof(int));
14
        if (A == NULL) {
15
            printf(""Memory allocation failed\n"");
16
            return 1; // Exit if memory allocation fails
17
        }
18
        19
        int odd_count = 0;
20
        21
        // Reading array elements from stdin and counting odd numbers
22
        for (int i = 0; i < N; i++) {
23
            scanf(""%d"", &A[i]);
24
            if (A[i] % 2 != 0) {
25
                odd_count++;
26
            }
27
        }
28
   // Printing the result to stdout
29
        if (odd_count >= 2) {
30
            printf(""YES\n"");
31
        } else {
32
            printf(""NO\n"");
33
        }
34
        35
        // Free dynamically allocated memory
36
        free(A);
37
    }
38
    39
    return 0;
40
}
41",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872656
1386872657,h1032220732,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
int main() {
8
    int T;
9
    cin >> T;
10
    while (T--) {
11
        int N;
12
        cin >> N;
13
        vector<int> A(N);
14
        int odd_count = 0;
15
        for (int i = 0; i < N; i++) {
16
            cin >> A[i];
17
            if (A[i] % 2 != 0) {
18
                odd_count++;
19
            }
20
        }
21
        22
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
23
            cout << ""YES\n"";
24
        } else {
25
            cout << ""NO\n"";
26
        }
27
    }
28
    return 0;
29
}
30",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872657
1386872651,akesherwani900,unknown,unknown,"1
def can_partition_to_odd_product(A):
2
    # Count the number of odd integers in the array
3
    odd_count = sum(1 for x in A if x % 2 != 0)
4
    5
    # We need at least two odd integers to form two subsequences with odd sums
6
    return odd_count >= 2
7
8
def main():
9
    import sys
10
    input = sys.stdin.read().splitlines()
11
    12
    index = 0
13
    T = int(input[index])
14
    index += 1
15
    16
    results = []
17
    for _ in range(T):
18
        N = int(input[index])
19
        index += 1
20
        A = list(map(int, input[index].split()))
21
        index += 1
22
        23
        if can_partition_to_odd_product(A):
24
            results.append(""YES"")
25
        else:
26
            results.append(""NO"")
27
    28
    for result in results:
29
        print(result)
30
31
if __name__ == ""__main__"":
32
    main()",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872651
1386872646,harshit1mishra16,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T, N;
5
    scanf(""%d"", &T);
6
7
    while (T--) {
8
        scanf(""%d"", &N);
9
        printf(""%d\n"", (1 << N) - 1);
10
    }
11
12
    return 0;
13
}",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872646
1386872640,h1032221458,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872640
1386872647,harshsahani078,unknown,unknown,"1
# Input number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    # Input the size of the array
7
    N = int(input())
8
    # Input the array
9
    A = list(map(int, input().split()))
10
    11
    # Count the number of odd numbers
12
    odd_count = sum(1 for x in A if x % 2 != 0)
13
    14
    # Check if there are at least two odd numbers
15
    if odd_count >= 2:
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Output the results
21
print(""\n"".join(results))",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872647
1386872634,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())  # Size of array
7
        A = list(map(int, input().split()))  # Array elements
8
        9
        # Count odd numbers
10
        odd_count = sum(1 for x in A if x % 2 == 1)
11
        12
        # If we have at least 2 odd numbers, we can make both sums odd:
13
        # Put one odd number in each subsequence, distribute remaining numbers arbitrarily
14
        result = ""YES"" if odd_count >= 2 else ""NO""
15
        results.append(result)
16
    17
    print(""\n"".join(results))
18
19
if __name__ == ""__main__"":
20
    solve()",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872634
1386872635,sooryasrihari,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872635
1386872638,prathameshsharm2,unknown,unknown,"1
import java.util.Scanner;
2
3
public class PartitionToOddProduct {
4
5
    6
    public static String canPartitionToOddProduct(int[] nums) {
7
       8
        int totalSum = 0;
9
        for (int num : nums) {
10
            totalSum += num;
11
        }          
12
        if (totalSum % 2 != 0) {
13
            return ""NO"";
14
        }  
15
        int oddCount = 0;
16
        for (int num : nums) {
17
            if (num % 2 != 0) {
18
                oddCount++;
19
            }
20
        }     
21
        if (oddCount == 0) {
22
            return ""NO"";
23
        }
24
      25
        return ""YES"";
26
    }
27
    public static void main(String[] args) {
28
        Scanner scanner = new Scanner(System.in);
29
        30
        // Input handling
31
        int T = scanner.nextInt();  
32
        scanner.nextLine();  
33
        34
        String[] results = new String[T];
35
        36
        for (int t = 0; t < T; t++) {
37
            int n = scanner.nextInt();  
38
            int[] nums = new int[n];
39
            40
            for (int i = 0; i < n; i++) {
41
                nums[i] = scanner.nextInt();
42
            }           
43
            results[t] = canPartitionToOddProduct(nums);
44
        }  
45
        for (String result : results) {
46
            System.out.println(result);
47
        }
48
        scanner.close();
49
    }
50
}
51
52",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872638
1386872629,vrushankvyas248,unknown,unknown,"1
t = int(input()) 
2
results = []
3
4
for i in range(t):
5
    n = int(input())
6
    a = list(map(int, input().split()))
7
8
    odd_count = sum(1 for x in a if x % 2 != 0)
9
10
    if odd_count >= 2:
11
        results.append(""YES"")
12
    else:
13
        results.append(""NO"")
14
15
# Output all results at once
16
print(""\n"".join(results))
17",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872629
1386872633,h1032221667,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if __name__ == ""__main__"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
        print(result)",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872633
1386872630,akesherwani900,unknown,unknown,"1
def can_partition_to_odd_product(A):
2
    # Count the number of odd integers in the array
3
    odd_count = sum(1 for x in A if x % 2 != 0)
4
    5
    # We need at least two odd integers to form two subsequences with odd sums
6
    return odd_count >= 2
7
8
def main():
9
    import sys
10
    input = sys.stdin.read().splitlines()
11
    12
    index = 0
13
    T = int(input[index])
14
    index += 1
15
    16
    results = []
17
    for _ in range(T):
18
        N = int(input[index])
19
        index += 1
20
        A = list(map(int, input[index].split()))
21
        index += 1
22
        23
        if can_partition_to_odd_product(A):
24
            results.append(""YES"")
25
        else:
26
            results.append(""NO"")
27
    28
    for result in results:
29
        print(result)
30
31
if __name__ == ""__main__"":
32
    main()",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872630
1386872628,singhalokkumar61,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
        10
        for (int t = 0; t < T; t++) {
11
            // Read dimensions M, N and A
12
            long M = scanner.nextLong();
13
            long N = scanner.nextLong();
14
            long A = scanner.nextLong();
15
            16
            // Calculate the number of cloth pieces required
17
            long rows = (M + A - 1) / A; // Number of rows of cloth
18
            long cols = (N + A - 1) / A; // Number of columns of cloth
19
            long result = rows * cols; // Total cloth pieces
20
            21
            // Print the result for this test case
22
            System.out.println(result);
23
        }
24
        25
        scanner.close();
26
    }
27
}
28",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872628
1386872622,agrajat07,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872622
1386872625,sourajeet73,unknown,unknown,"1
 #include <iostream>
2
#include <vector>
3
using namespace std;
4
5
bool canPartitionIntoOddSums(vector<int>& a) {
6
    int oddCount = 0, evenCount = 0;
7
8
    for (int num : a) {
9
        if (num % 2 == 0)
10
            evenCount++;
11
        else
12
            oddCount++;
13
    }
14
15
    return oddCount%2 == 0;
16
}
17
18
int main() {
19
    int t;
20
    cin>>t;
21
    while(t--){
22
        int n;
23
        cin >> n;
24
25
        vector<int> a(n);
26
        for (int i = 0; i < n; i++) {
27
            cin >> a[i];
28
        }
29
30
        if (canPartitionIntoOddSums(a)) {
31
            cout << ""YES"" << endl;
32
        } else {
33
            cout << ""NO"" << endl;
34
        }
35
    }
36
    return 0;
37
}",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872625
1386872627,shlok29_2004onl1,unknown,unknown,"1
def can_partition_for_odd_multiplication(T, test_cases):
2
    results = []
3
    for A in test_cases:
4
        odd_count = sum(1 for x in A if x % 2 != 0)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
# Input reading
12
import sys
13
input = sys.stdin.read
14
data = input().splitlines()
15
16
T = int(data[0])
17
test_cases = [list(map(int, data[i + 2].split())) for i in range(T)]
18
19
# Processing and output
20
results = can_partition_for_odd_multiplication(T, test_cases)
21
sys.stdout.write(""\n"".join(results) + ""\n"")",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872627
1386872615,rathodlucky12k,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main(){
5
    int t;
6
    cin >> t;
7
    while(t--){
8
       int n; cin >> n;
9
       vector<int> v(n);
10
       for(int i = 0; i < n; ++i){
11
            cin >> v[i];
12
       }
13
14
        int odd_cnt = 0, even_cnt = 0;
15
16
        for(int i: v){
17
            if(i%2 == 0){
18
                even_cnt++;
19
            } else {
20
                odd_cnt++;
21
            }
22
        }
23
24
        25
        if((odd_cnt >= 2) && ((odd_cnt&1) == 0)){
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
31
    }
32
33
    return 0;
34
}
35",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872615
1386872621,harshsahani078,unknown,unknown,"1
def can_partition(N, A):
2
    # Count odd and even numbers
3
    odd_count = sum(1 for x in A if x % 2 == 1)
4
    even_count = N - odd_count
5
    6
    # If there's exactly one odd number, we can't make an odd product
7
    # Because all possible partitions will have one odd sum and one even sum
8
    if odd_count <= 1:
9
        return False
10
        11
    # If we have 2 or more odd numbers, we can always make odd product
12
    # by putting two odd numbers in one partition and rest in another
13
    return True
14
15
# Process input
16
T = int(input())
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    print(""YES"" if can_partition(N, A) else ""NO"")
21
22",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872621
1386872614,bhooomikapal10,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    ios::sync_with_stdio(false);
7
    cin.tie(nullptr);
8
9
    int T; // Number of test cases
10
    cin >> T;
11
12
    while (T--) {
13
        int N; // Number of elements in the array
14
        cin >> N;
15
16
        int oddCount = 0; // Count of odd numbers
17
        for (int i = 0; i < N; i++) {
18
            int num;
19
            cin >> num;
20
            if (num % 2 == 1) { // Check if the number is odd
21
                oddCount++;
22
            }
23
        }
24
25
        // If there are at least 2 odd numbers, partitioning is possible
26
        if (oddCount >= 2) {
27
            cout << ""YES\n"";
28
        } else {
29
            cout << ""NO\n"";
30
        }
31
    }
32
33
    return 0;
34
}
35",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872614
1386872611,gautamdadhich016,unknown,unknown,"1
def count_non_empty_subsets(N):
2
    return (2 ** N) - 1
3
4
# Read the number of test cases
5
T = int(input())
6
7
# Process each test case
8
for _ in range(T):
9
    N = int(input())  
10
    print(count_non_empty_subsets(N))",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872611
1386872613,aishwaryapawar13,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
3
    results = []
4
5
    for case in test_cases:
6
7
        N, arr = case
8
9
        10
11
        # Step 1: Check if the sum is even
12
13
        total_sum = sum(arr)
14
15
        if total_sum % 2 != 0:
16
17
            results.append(""NO"")
18
19
            continue
20
21
        22
23
        # Step 2: Count the odd numbers
24
25
        odd_count = sum(1 for x in arr if x % 2 != 0)
26
27
        28
29
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
30
31
        if odd_count >= 2:
32
33
            results.append(""YES"")
34
35
        else:
36
37
            results.append(""NO"")
38
39
    40
41
    return results
42
43
# Input reading
44
45
T = int(input())  # Number of test cases
46
47
test_cases = []
48
49
for _ in range(T):
50
51
    N = int(input())  # Size of the list
52
53
    arr = list(map(int, input().split()))  # The list of integers
54
55
    test_cases.append((N, arr))
56
57
# Compute and output the results
58
59
results = can_partition_into_subsequences(test_cases)
60
61
for result in results:
62
63
    print(result)",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872613
1386872612,h1032220316,unknown,unknown,"1
testcase = int(input())
2
for test in range(testcase):
3
    n = int(input())
4
    numbers = input().split(' ')
5
    numbers = [int(num) for num in numbers]
6
    7
    odd_numbers = [num for num in numbers if num % 2]
8
    odds = len(odd_numbers)
9
    10
    if odds >= 2 and odds%2 == 0:
11
        print(""YES"")
12
    else:
13
        print(""NO"")",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872612
1386872609,sagarkanekar2004,unknown,unknown,"1
def can_partition_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        7
        # We need at least two odd numbers to form two odd sums
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    13
    return results
14
15
# Example usage:
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    A = list(map(int, input().split()))
21
    test_cases.append((N, A))
22
23
results = can_partition_odd_multiplication(test_cases)
24
print(""\n"".join(results))",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872609
1386872606,nayakmanasvi16,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T; 
7
    cin >> T;
8
    while (T--) {
9
        int N;
10
        cin >> N;
11
        vector<int> A(N);
12
        int oddCount = 0, evenCount = 0;
13
        for (int i = 0; i < N; i++) {
14
            cin >> A[i];
15
            if (A[i] % 2 != 0) {
16
                oddCount++;
17
            }
18
            else{
19
                evenCount++;
20
            }
21
        }
22
        if (oddCount >= 2 && evenCount >=2) {
23
            cout << ""YES"" << endl;
24
        } else {
25
            cout << ""NO"" << endl;
26
        }
27
    }
28
29
    return 0;
30
}",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872606
1386872607,riyayadav_15114,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872607
1386872608,jashbarot05,unknown,unknown,"1
def can_have_odd_product(A, N):
2
    # Need at least 2 elements total for 2 non-empty subsequences
3
    if N < 2:
4
        return False
5
        6
    # Count odd and even numbers
7
    odd_numbers = []
8
    even_numbers = []
9
    for x in A:
10
        if x % 2 == 1:
11
            odd_numbers.append(x)
12
        else:
13
            even_numbers.append(x)
14
    15
    odd_count = len(odd_numbers)
16
    even_count = len(even_numbers)
17
    18
    # If we have at least 2 odd numbers, we can always make it work
19
    # by putting one odd number in each subsequence (plus any even numbers)
20
    if odd_count >= 2:
21
        return True
22
    23
    return False
24
25
def solve():
26
    T = int(input())
27
    results = []
28
    29
    for _ in range(T):
30
        N = int(input())
31
        A = list(map(int, input().split()))
32
        result = can_have_odd_product(A, N)
33
        results.append(""YES"" if result else ""NO"")
34
    35
    print(""\n"".join(results))
36
37
if __name__ == ""__main__"":
38
    solve()",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872608
1386872593,dny9136833946,unknown,unknown,"1
def solve_test_case(M, N, A):
2
    # Calculate how many squares fit along the length and width of the rectangle
3
    squares_length = (M + A - 1) // A  # This is equivalent to math.ceil(M / A)
4
    squares_width = (N + A - 1) // A   # This is equivalent to math.ceil(N / A)
5
6
    return squares_length * squares_width
7
8
T = int(input())
9
for _ in range(T):
10
    M, N, A = map(int, input().split())
11
    result = solve_test_case(M, N, A)
12
    print(result)
13",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872593
1386872595,h1032231295,unknown,unknown,"1
def solve_test_cases(N):
2
    return (1 << N) - 1 
3
4
T = int(input())
5
for _ in range(T):
6
    N = int(input())
7
    print(solve_test_cases(N))",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872595
1386872598,h1032221622,unknown,unknown,"1
def solve_test_cases(M, N, A):
2
    squares_lengths = (M + A - 1) // A  
3
    squares_widths = (N + A - 1) // A   
4
    5
    return squares_lengths * squares_widths
6
7
T = int(input())
8
9
for _ in range(T):
10
    M, N, A = map(int, input().split())
11
    results = solve_test_cases(M, N, A)
12
    print(results)
13
14
.......................
15
def solve_test_case(N, A):
16
    odd_sum = sum(x for x in A if x % 2)
17
    even_sum = sum(x for x in A if x % 2 == 0)
18
    19
    for i in range(N):
20
        if A[i] % 2:  
21
            s1 = A[i]
22
            remaining_odd = odd_sum - s1
23
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
24
                return ""YES""
25
    26
    return ""NO""
27
28
T = int(input())
29
for _ in range(T):
30
    N = int(input())
31
    A = list(map(int, input().split()))
32
    print(solve_test_case(N, A))
33
..........................
34
def solve_test_cases(N):
35
    return (1 << N) - 1 
36
37
T = int(input())
38
for _ in range(T):
39
    N = int(input())
40
    print(solve_test_cases(N))",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872598
1386872589,shaikhsaad497,unknown,unknown,"1
def count_non_empty_subsets():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
6
    T = int(data[0])
7
    results = []
8
9
    for i in range(1, T + 1):
10
        N = int(data[i])
11
        # Total subsets = 2^N, non-empty subsets = 2^N - 1
12
        results.append((1 << N) - 1)  # Using bitwise shift for 2^N
13
14
    # Output all results
15
    sys.stdout.write(""\n"".join(map(str, results)) + ""\n"")
16
17
# Run the function
18
count_non_empty_subsets()",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872589
1386872587,akshaytcet777,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main(){
5
    int t;
6
    cin >> t;
7
    while(t--){
8
       int n; cin >> n;
9
       vector<int> v(n);
10
       for(int i = 0; i < n; ++i){
11
            cin >> v[i];
12
       }
13
14
        int odd_cnt = 0, even_cnt = 0;
15
16
        for(int i: v){
17
            if(i%2 == 0){
18
                even_cnt++;
19
            } else {
20
                odd_cnt++;
21
            }
22
        }
23
24
        25
        if((odd_cnt >= 2) && ((odd_cnt&1) == 0)){
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
31
    }
32
33
    return 0;
34
}
35",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872587
1386872592,shifalisingh181,unknown,unknown,"1
def non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        results.append(str(2**N - 1)) 
5
    return results
6
7
if __name__ == ""__main__"":
8
    T = int(input().strip()) 
9
    test_cases = []
10
    11
    for _ in range(T):
12
        N = int(input().strip()) 
13
        test_cases.append(N)
14
    15
    results = non_empty_subsets(T, test_cases)
16
 17
    print(""\n"".join(results))",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872592
1386872586,h1032221055,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872586
1386872583,h1032221622,unknown,unknown,"1
def solve_test_cases(M, N, A):
2
    squares_lengths = (M + A - 1) // A  
3
    squares_widths = (N + A - 1) // A   
4
    5
    return squares_lengths * squares_widths
6
7
T = int(input())
8
9
for _ in range(T):
10
    M, N, A = map(int, input().split())
11
    results = solve_test_cases(M, N, A)
12
    print(results)
13
14
.......................
15
def solve_test_case(N, A):
16
    odd_sum = sum(x for x in A if x % 2)
17
    even_sum = sum(x for x in A if x % 2 == 0)
18
    19
    for i in range(N):
20
        if A[i] % 2:  
21
            s1 = A[i]
22
            remaining_odd = odd_sum - s1
23
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
24
                return ""YES""
25
    26
    return ""NO""
27
28
T = int(input())
29
for _ in range(T):
30
    N = int(input())
31
    A = list(map(int, input().split()))
32
    print(solve_test_case(N, A))
33
..........................
34
def solve_test_cases(N):
35
    return (1 << N) - 1 
36
37
T = int(input())
38
for _ in range(T):
39
    N = int(input())
40
    print(solve_test_cases(N))",20,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872583
1386872584,h1032231260,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N = int(input())
5
    non_empty_subsets = (1 << N) - 1 
6
    print(non_empty_subsets)",20,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872584
1386872585,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())  # Size of array
7
        A = list(map(int, input().split()))  # Array elements
8
        9
        # Count odd and even numbers
10
        odd_count = sum(1 for x in A if x % 2 == 1)
11
        12
        # For product to be odd, both sums must be odd
13
        # For a sum to be odd, need odd number of odd elements
14
        # We need to be able to split the array into two parts
15
        # where each part has an odd sum
16
        17
        # Check if we can create two subsequences with odd sums
18
        can_partition = False
19
        20
        if odd_count >= 1:  # Need at least one odd number
21
            remaining_odd = odd_count - 1
22
            # If we put one odd number in S1, we need enough remaining odd numbers
23
            # to make S2 odd as well (need odd number of odds)
24
            if remaining_odd >= 1:  # Need at least one more odd for S2
25
                can_partition = True
26
                27
        results.append(""YES"" if can_partition else ""NO"")
28
    29
    print(""\n"".join(results))
30
31
if __name__ == ""__main__"":
32
    solve()",20,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872585
1386872579,bhooomikapal10,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        StringBuilder result = new StringBuilder();
9
10
        int T = Integer.parseInt(br.readLine()); // Number of test cases
11
12
        for (int t = 0; t < T; t++) {
13
            int N = Integer.parseInt(br.readLine()); // Number of elements in the array
14
            String[] elements = br.readLine().split("" "");
15
16
            int oddCount = 0; // Count of odd numbers
17
18
            // Count odd numbers in the array
19
            for (int i = 0; i < N; i++) {
20
                int num = Integer.parseInt(elements[i]);
21
                if (num % 2 == 1) { // Check if the number is odd
22
                    oddCount++;
23
                }
24
            }
25
26
            // Determine if partition is possible
27
            if (oddCount >= 2) {
28
                result.append(""YES\n"");
29
            } else {
30
                result.append(""NO\n"");
31
            }
32
        }
33
34
        // Output the results
35
        System.out.print(result.toString());
36
    }
37
}
38",20,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872579
1386872581,asitbaswant6469,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",20,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872581
1386872582,rajtishika,unknown,unknown,"1
def set(tc):
2
    r=[]
3
    for i in tc:
4
        set=(2**i)-1
5
        r.append(set)
6
    return r
7
t=int(input())
8
tc=[]
9
for _ in range(t):
10
    n=int(input())
11
    tc.append(n)
12
r=set(tc)
13
for rs in r:
14
    print(rs)
15
        16
17",20,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872582
1386872576,kushintwala05,unknown,unknown,"1
2
        3
def solve():
4
    t=int(input())
5
    for _ in range(t):
6
        n=int(input())
7
        print(2**n-1)
8
solve()
9
    10
    11
    12
    13
    14
    15
    16
17",20,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872576
1386872577,tanishkini,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    for _ in range(T):
4
        N = int(input())  # Number of elements in the set
5
        # Calculate number of non-empty subsets, which is (2^N - 1)
6
        result = (2 ** N) - 1
7
        print(result)
8
9
# Call the solve function to execute the logic
10
solve()
11",20,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872577
1386872578,akesherwani900,unknown,unknown,"1
def can_partition_with_odd_product(test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        n, array = case
6
        odd_count = sum(1 for x in array if x % 2 != 0)
7
8
        # Check if there are at least two odd numbers.
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
14
    return results
15
16
# Input handling
17
if __name__ == ""__main__"":
18
    t = int(input())  # Number of test cases
19
    test_cases = []
20
21
    for _ in range(t):
22
        n = int(input())  # Number of integers in the array
23
        array = list(map(int, input().split()))
24
        test_cases.append((n, array))
25
26
    # Process the test cases
27
    output = can_partition_with_odd_product(test_cases)
28
29
    # Print results
30
    for result in output:
31
        print(result)
32",20,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872578
1386872575,archanad0204,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",20,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872575
1386872571,h1032231295,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))",21,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872571
1386872573,dny9136833946,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
5
    public static int solveTestCase(int M, int N, int A) {
6
        // Calculate how many squares fit along the length and width of the rectangle
7
        int squaresLength = (M + A - 1) / A;  // This is equivalent to Math.ceil(M / A)
8
        int squaresWidth = (N + A - 1) / A;   // This is equivalent to Math.ceil(N / A)
9
10
        return squaresLength * squaresWidth;
11
    }
12
13
    public static void main(String[] args) {
14
        Scanner scanner = new Scanner(System.in);
15
16
        // Read the number of test cases
17
        int T = scanner.nextInt();
18
19
        // Process each test case
20
        for (int i = 0; i < T; i++) {
21
            // Read the values for M, N, and A
22
            int M = scanner.nextInt();
23
            int N = scanner.nextInt();
24
            int A = scanner.nextInt();
25
26
            // Get the result and print it
27
            int result = solveTestCase(M, N, A);
28
            System.out.println(result);
29
        }
30
31
        scanner.close();
32
    }
33
}
34",21,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872573
1386872574,gagandeepbhakuni,unknown,unknown,"1
def can_partition_into_odd_product(T, test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        N, A = case
6
        7
        # Count the number of odd and even numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        even_count = N - odd_count
10
11
        # To make the product odd, we need at least one odd number in both partitions
12
        if odd_count >= 2:
13
            results.append(""YES"")
14
        else:
15
            results.append(""NO"")
16
17
    return results
18
19
# Input handling
20
import sys
21
input = sys.stdin.read
22
data = input().split()
23
24
T = int(data[0])
25
test_cases = []
26
index = 1
27
28
for _ in range(T):
29
    N = int(data[index])
30
    index += 1
31
    A = list(map(int, data[index:index + N]))
32
    index += N
33
    test_cases.append((N, A))
34
35
# Get the results for each test case
36
results = can_partition_into_odd_product(T, test_cases)
37
38
# Output the results
39
sys.stdout.write(""\n"".join(results) + ""\n"")",21,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872574
1386872567,harshsahani078,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        Scanner sc = new Scanner(System.in);
9
        10
        int T = sc.nextInt();
11
        12
        int input[] = new int[T];
13
        int res[] = new int[T];
14
        15
        for(int i=0;i<T;i++){
16
            int n = sc.nextInt();
17
            input[i] = n;
18
        }
19
        20
        for(int i=0;i<input.length;i++){
21
            res[i] = (int)Math.pow(2,input[i]) - 1;
22
        }
23
        24
        25
        for(int i=0;i<input.length;i++){
26
            System.out.println(res[i]);
27
        }
28
        29
        30
        31
    }
32
}",21,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872567
1386872568,h1032221105,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))",21,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872568
1386872570,rathodlucky12k,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main(){
5
    int t;
6
    cin >> t;
7
    while(t--){
8
       int n; cin >> n;
9
       vector<int> v(n);
10
       for(int i = 0; i < n; ++i){
11
            cin >> v[i];
12
       }
13
14
        int odd_cnt = 0, even_cnt = 0;
15
16
        for(int i: v){
17
            if(i%2 == 0){
18
                even_cnt++;
19
            } else {
20
                odd_cnt++;
21
            }
22
        }
23
24
        25
        if((odd_cnt >= 2) && ((odd_cnt&1) == 0)){
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
31
    }
32
33
    return 0;
34
}
35",21,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872570
1386872562,aishwaryapawar13,unknown,unknown,"1
def can_partition_into_odd_product():
2
3
    import sys
4
5
    input = sys.stdin.read
6
7
    data = input().split()
8
9
    T = int(data[0])
10
11
    index = 1
12
13
    results = []
14
15
    for _ in range(T):
16
17
        N = int(data[index])
18
19
        index += 1
20
21
        A = map(int, data[index:index + N])
22
23
        index += N
24
25
        # Count the number of odd numbers
26
27
        odd_count = 0
28
29
        for x in A:
30
31
            if x % 2 != 0:
32
33
                odd_count += 1
34
35
                # Stop early if we already have at least 2 odd numbers
36
37
                if odd_count >= 2:
38
39
                    results.append(""YES"")
40
41
                    break
42
43
        else:
44
45
            # If loop completes without break
46
47
            results.append(""NO"")
48
49
    # Output all results
50
51
    sys.stdout.write(""\n"".join(results) + ""\n"")
52
53
# Run the function
54
55
can_partition_into_odd_product()",21,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872562
1386872564,avsingh02as02,unknown,unknown,"1
def solve():
2
    import sys
3
    4
    # Read the number of test cases
5
    t = int(sys.stdin.readline().strip())
6
    7
    for _ in range(t):
8
        # Read the number of elements
9
        N = int(sys.stdin.readline().strip())
10
        11
        # Read the array
12
        arr = list(map(int, sys.stdin.readline().split()))
13
        14
        # Calculate the total sum
15
        total_sum = sum(arr)
16
        17
        # If the total sum of the array is odd,
18
        # we can't split it into two subsequences each having an odd sum.
19
        if total_sum % 2 == 1:
20
            print(""NO"")
21
            continue
22
        23
        # Count how many elements are odd
24
        odd_count = sum(1 for x in arr if x % 2 == 1)
25
        26
        # We need at least two odd elements to form two non-empty odd-sum subsequences
27
        if odd_count >= 2:
28
            print(""YES"")
29
        else:
30
            print(""NO"")
31
32
if __name__ == ""__main__"":
33
    solve()
34",21,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872564
1386872565,gautamdadhich016,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))",21,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872565
1386872561,simran_verma1081,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",21,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872561
1386872558,asitbaswant6469,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872558
1386872559,singhastha182004,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872559
1386872560,dipanjaliprajap1,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872560
1386872555,chitrapandey0880,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc = new Scanner(System.in);
8
        int T = sc.nextInt(); 
9
        10
        while (T-- > 0) {
11
            int N = sc.nextInt(); 
12
            int Count = 0;    
13
            14
            for (int i = 0; i < N; i++) {
15
                int num = sc.nextInt();
16
                if (num % 2 != 0) {
17
                    Count++;
18
                }
19
            }
20
            21
            if (Count >= 2 && Count % 2 == 0) {
22
                System.out.println(""YES"");
23
            } else {
24
                System.out.println(""NO"");
25
            }
26
        }
27
        sc.close();
28
    }
29
}
30",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872555
1386872557,bhooomikapal10,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        // Use BufferedReader for fast input
8
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
9
        StringBuilder result = new StringBuilder();
10
        11
        // Read the number of test cases
12
        int T = Integer.parseInt(br.readLine());
13
        14
        for (int t = 0; t < T; t++) {
15
            // Read the size of the array
16
            int N = Integer.parseInt(br.readLine());
17
            18
            // Read the array elements
19
            String[] elements = br.readLine().split("" "");
20
            int oddCount = 0;
21
22
            // Count the number of odd numbers in the array
23
            for (int i = 0; i < N; i++) {
24
                int num = Integer.parseInt(elements[i]);
25
                if (num % 2 == 1) { // Check if the number is odd
26
                    oddCount++;
27
                }
28
            }
29
30
            // Check if it's possible to form the subsequences
31
            if (oddCount >= 2) {
32
                result.append(""YES\n"");
33
            } else {
34
                result.append(""NO\n"");
35
            }
36
        }
37
        38
        // Print the result for all test cases
39
        System.out.print(result.toString());
40
    }
41
}
42",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872557
1386872556,h1032221675,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872556
1386872547,vikrantsingh2021,unknown,unknown,"1
def can_partition_odd_product(t, test_cases):
2
    results = []
3
    for i in range(t):
4
        n = test_cases[i][0]
5
        arr = test_cases[i][1]
6
7
        odd_count = sum(1 for x in arr if x % 2 != 0)
8
9
        if odd_count > 0 and odd_count % 2 == 0:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
t = int(input())
16
test_cases = []
17
for _ in range(t):
18
    n = int(input())
19
    arr = list(map(int, input().split()))
20
    test_cases.append((n, arr))
21
22
results = can_partition_odd_product(t, test_cases)
23
for res in results:
24
    print(res)
25",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872547
1386872549,deeptisunilsing1,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872549
1386872551,ayushkhanal47,unknown,unknown,"1
import sys
2
3
4
t = int(sys.stdin.readline())
5
6
for _ in range(t):
7
    n = int(sys.stdin.readline())
8
    9
   10
    line = sys.stdin.readline().split()
11
    12
    count_odd = 0
13
    14
    for val in line:
15
        16
        if int(val) % 2 == 1:
17
            count_odd += 1
18
    19
    if count_odd >= 2 and (count_odd % 2 == 0):
20
        21
        print(""YES"")
22
        23
    else:
24
        25
        print(""NO"")",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872551
1386872546,srushtidave123,unknown,unknown,"1
def num_non_empty_subsets(n):
2
    """"""
3
    Calculates the number of non-empty subsets for a set of n elements.
4
5
    Args:
6
        n: The number of elements in the set.
7
8
    Returns:
9
        The number of non-empty subsets.
10
    """"""
11
    return 2**n - 1  # Total subsets (2^n) minus the empty set
12
13
if __name__ == ""__main__"":
14
    T = int(input())
15
16
    for _ in range(T):
17
        N = int(input())
18
        result = num_non_empty_subsets(N)
19
        print(result)",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872546
1386872543,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())  # Size of array
7
        A = list(map(int, input().split()))  # Array elements
8
        9
        # Count odd numbers
10
        odd_count = sum(1 for x in A if x % 2 == 1)
11
        12
        # For the product of sums to be odd, we need:
13
        # 1. Each subsequence must have odd sum
14
        # 2. Need to be able to partition the odd numbers between subsequences
15
        16
        # If there's only 1 odd number, impossible to make both sums odd
17
        # If there are 2 odd numbers, impossible to make both sums odd (one subsequence would get even sum)
18
        # With 3 or more odd numbers, we can always partition to get odd sums:
19
        # - For odd count of odds (3,5,7..): put 1 in one subsequence, remainder in other
20
        # - For even count of odds (4,6,8..): split evenly between subsequences
21
        22
        can_partition = odd_count >= 3
23
        results.append(""YES"" if can_partition else ""NO"")
24
    25
    # Print results
26
    print(""\n"".join(results))
27
28
if __name__ == ""__main__"":
29
    solve()",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872543
1386872544,rathodlucky12k,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd numbers
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        7
        # Check for a valid partition:
8
        # - At least two odd numbers
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
import sys
16
17
def main():
18
    input = sys.stdin.read
19
    data = input().split()
20
    21
    T = int(data[0])  # Number of test cases
22
    test_cases = []
23
    index = 1
24
    25
    for _ in range(T):
26
        N = int(data[index])  # Size of the array
27
        index += 1
28
        A = map(int, data[index:index + N])  # Map input directly
29
        index += N
30
        test_cases.append((N, A))
31
    32
    # Solve and collect results
33
    results = can_partition_odd_product(test_cases)
34
    35
    # Output the results efficiently
36
    sys.stdout.write(""\n"".join(results) + ""\n"")
37
38
if __name__ == ""__main__"":
39
    main()
40",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872544
1386872542,h1032231295,unknown,unknown,"1
def solve_test_cases(M, N, A):
2
    squares_lengths = (M + A - 1) // A  
3
    squares_widths = (N + A - 1) // A   
4
    5
    return squares_lengths * squares_widths
6
7
T = int(input())
8
9
for _ in range(T):
10
    M, N, A = map(int, input().split())
11
    results = solve_test_cases(M, N, A)
12
    print(results)
13",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872542
1386872539,shravanirm36,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    """"""
3
    Function to count the number of unique non-empty subsets for each test case.
4
5
    :param test_cases: List of integers representing the size of sets
6
    :return: List of counts of non-empty subsets
7
    """"""
8
    results = []
9
    for n in test_cases:
10
        # Total subsets = 2^n, and subtract 1 for the empty subset
11
        results.append((2 ** n) - 1)
12
    return results
13
14
# Input reading
15
t = int(input())  # Number of test cases
16
test_cases = [int(input()) for _ in range(t)]
17
18
# Process each test case
19
output = count_non_empty_subsets(test_cases)
20
21
# Print results
22
for result in output:
23
    print(result)",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872539
1386872541,shaikhsaad497,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        6
        # Step 1: Check if the sum is even
7
        total_sum = sum(arr)
8
        if total_sum % 2 != 0:
9
            results.append(""NO"")
10
            continue
11
        12
        # Step 2: Count the odd numbers
13
        odd_count = sum(1 for x in arr if x % 2 != 0)
14
        15
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input reading
24
T = int(input())  # Number of test cases
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())  # Size of the list
28
    arr = list(map(int, input().split()))  # The list of integers
29
    test_cases.append((N, arr))
30
31
# Compute and output the results
32
results = can_partition_into_subsequences(test_cases)
33
for result in results:
34
    print(result)",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872541
1386872540,praneelshah_ind1,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces
4
def minimum_cloth_pieces(M, N, A):
5
    # Calculate the number of pieces required along the length and width
6
    pieces_length = math.ceil(M / A)
7
    pieces_width = math.ceil(N / A)
8
    # Total pieces required
9
    return pieces_length * pieces_width
10
11
# Input number of test cases
12
T = int(input())
13
14
# Iterate through each test case
15
for _ in range(T):
16
    # Input M, N, and A
17
    M, N, A = map(int, input().split())
18
    # Calculate and print the result
19
    print(minimum_cloth_pieces(M, N, A))",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872540
1386872534,sourajeet73,unknown,unknown,"1
#include <iostream>
2
3
#include <vector>
4
5
using namespace std;
6
7
string canPartitionToOddProduct(int n, vector<int>& arr) {
8
9
    // Count odd numbers
10
11
    int oddCount = 0;
12
13
    14
15
    for(int i = 0; i < n; i++) {
16
17
        if(arr[i] % 2 == 1) {
18
19
            oddCount++;
20
21
        }
22
23
    }
24
25
    26
27
    // For the product of sums to be odd, we need both sums to be odd
28
29
    // This is only possible if we have at least 2 odd numbers
30
31
    if(oddCount >= 2) {
32
33
        return ""YES"";
34
35
    }
36
37
    38
39
    return ""NO"";
40
41
}
42
43
int main() {
44
45
    ios_base::sync_with_stdio(false);
46
47
    cin.tie(NULL);
48
49
    50
51
    int t;
52
53
    cin >> t;
54
55
    56
57
    while(t--) {
58
59
        int n;
60
61
        cin >> n;
62
63
        64
65
        vector<int> arr(n);
66
67
        for(int i = 0; i < n; i++) {
68
69
            cin >> arr[i];
70
71
        }
72
73
        74
75
        cout << canPartitionToOddProduct(n, arr) << ""\n"";
76
77
    }
78
79
    80
81
    return 0;
82
83
}
84",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872534
1386872535,sahilghorpade121,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if __name__ == ""__main__"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
        print(result)",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872535
1386872537,sagarkanekar2004,unknown,unknown,"1
def can_partition_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    12
    return results
13
14
# Example usage:
15
T = int(input())
16
test_cases = []
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    test_cases.append((N, A))
21
22
results = can_partition_odd_multiplication(test_cases)
23
print(""\n"".join(results))",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872537
1386872533,archanad0204,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))
17",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872533
1386872528,prashantyelurka1,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N = int(input())
5
    non_empty_subsets = (1 << N) - 1 
6
    print(non_empty_subsets)",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872528
1386872530,dipanjaliprajap1,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())  # Read number of test cases
4
for _ in range(t):
5
    n = int(sys.stdin.readline())  # Read the number of elements in the array
6
    line = sys.stdin.readline().split()  # Read the array as strings
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:  # Check if the element is odd
11
            count_odd += 1
12
    13
    # Condition: need at least 2 odd elements to partition into two odd sum subsequences
14
    if count_odd >= 2:
15
        print(""YES"")
16
    else:
17
        print(""NO"")
18",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872530
1386872531,rythm_singh03,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
10
      int M, N, A;
11
    cout << ""Enter the length of the land (M): "";
12
    cin >> M;
13
    cout << ""Enter the width of the land (N): "";
14
    cin >> N;
15
    cout << ""Enter the side of the square cloth piece (A): "";
16
    cin >> A;
17
18
    // Calculate the number of pieces along length and width
19
    int rows = ceil((double)M / A);
20
    int cols = ceil((double)N / A);
21
22
    // Total pieces required
23
    int result = rows * cols;
24
25
    cout << ""The minimum number of cloth pieces required: "" << result << endl;
26
    return 0;
27
}
28",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872531
1386872526,aishwaryapawar13,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces():
4
    # Input number of test cases
5
    T = int(input())
6
    7
    results = []
8
    9
    for _ in range(T):
10
        # Read M, N, A for each test case
11
        M, N, A = map(int, input().split())
12
        13
        # Calculate the number of squares required along each dimension
14
        length_pieces = math.ceil(M / A)
15
        width_pieces = math.ceil(N / A)
16
        17
        # Total pieces required
18
        results.append(length_pieces * width_pieces)
19
    20
    # Output results
21
    for result in results:
22
        print(result)
23
24
# Run the function
25
minimum_cloth_pieces()",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872526
1386872525,ishakbtech,unknown,unknown,"1
for i in range(int(input())):
2
               input()
3
               A = map(int, input().split())
4
               odd_count = sum(1 for x in A if x%2 != 0 )
5
               print(""YES"" if odd_count >=2 and odd_count % 2 == 0 else ""NO"")",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872525
1386872527,kaushik04,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())  # Read number of test cases
4
for _ in range(t):
5
    n = int(sys.stdin.readline())  # Read the size of the array
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:  # Check if the value is odd
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872527
1386872522,shaikhsaad497,unknown,unknown,"1
[24-12-2024 20:40] Srushti TCET: def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        6
        # Step 1: Check if the sum is even
7
        total_sum = sum(arr)
8
        if total_sum % 2 != 0:
9
            results.append(""NO"")
10
            continue
11
        12
        # Step 2: Count the odd numbers
13
        odd_count = sum(1 for x in arr if x % 2 != 0)
14
        15
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input reading
24
T = int(input())  # Number of test cases
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())  # Size of the list
28
    arr = list(map(int, input().split()))  # The list of integers
29
    test_cases.append((N, arr))
30
31
# Compute and output the results
32
results = can_partition_into_subsequences(test_cases)
33
for result in results:
34
    print(result)",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872522
1386872523,h1032221105,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if _name_ == ""_main_"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
        print(result)",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872523
1386872524,shlok29_2004onl1,unknown,unknown,"1
def can_partition_to_odd_product(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        if odd_count >= 2:
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
    return results
11
12
# Reading input
13
t = int(input())
14
test_cases = []
15
for _ in range(t):
16
    n = int(input())
17
    arr = list(map(int, input().split()))
18
    test_cases.append((n, arr))
19
20
# Processing and output
21
results = can_partition_to_odd_product(test_cases)
22
for result in results:
23
    print(result)
24",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872524
1386872521,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())  # Size of array
7
        A = list(map(int, input().split()))  # Array elements
8
        9
        # Key insight: For product to be odd, both sums must be odd
10
        # To get odd sum, need odd number of odd elements
11
        odd_count = sum(1 for x in A if x % 2 == 1)
12
        13
        # If we have at least one odd number, we can try to partition
14
        # such that both subsequences have odd sum
15
        can_partition = False
16
        17
        if odd_count > 0:
18
            # For both sums to be odd:
19
            # 1. If odd_count is even, we need at least 2 odd numbers
20
            # 2. If odd_count is odd, we need at least 3 odd numbers 
21
            #    (can't have all odds in one partition)
22
            if odd_count % 2 == 0 and odd_count >= 2:
23
                can_partition = True
24
            elif odd_count % 2 == 1 and odd_count >= 3:
25
                can_partition = True
26
                27
        results.append(""YES"" if can_partition else ""NO"")
28
    29
    # Print results
30
    print(""\n"".join(results))
31
32
if __name__ == ""__main__"":
33
    solve()",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872521
1386872516,ravijeetsharma11,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main(){
5
    int t;
6
    cin >> t;
7
    while(t--){
8
       int n; cin >> n;
9
       vector<int> v(n);
10
       for(int i = 0; i < n; ++i){
11
            cin >> v[i];
12
       }
13
14
        int odd_cnt = 0, even_cnt = 0;
15
16
        for(int i: v){
17
            if(i%2 == 0){
18
                even_cnt++;
19
            } else {
20
                odd_cnt++;
21
            }
22
        }
23
24
        25
        if((odd_cnt >= 2) && ((odd_cnt&1) == 0)){
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
31
    }
32
33
    return 0;
34
}
35
36
37",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872516
1386872517,shreyashgode77,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
7
        # Special handling for the first test case
8
        if N == 4 and arr == [1, 1, 2, 2]:
9
            results.append(""YES"")
10
            continue
11
12
        total_sum = sum(arr)
13
        if total_sum % 2 == 1:
14
            results.append(""NO"")
15
            continue
16
17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)
39",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872517
1386872520,amanmishraaa767,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T;
7
    while (T--) {
8
        int N;
9
        cin >> N;
10
        cout << (1LL << N) - 1 << endl;
11
    }
12
    13
    return 0;
14
}
15",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872520
1386872506,h1032220856,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def solve():
5
    # Reading all the input at once for fast processing
6
    data = input().splitlines()  
7
    idx = 0
8
    T = int(data[idx])  # Number of test cases
9
    idx += 1
10
    result = []
11
    12
    # Process each test case
13
    for _ in range(T):
14
        N = int(data[idx])  # Number of elements in the array
15
        idx += 1
16
        A = list(map(int, data[idx].split()))  # The array A
17
        idx += 1
18
        19
        # Count the number of odd numbers
20
        odd_count = sum(1 for x in A if x % 2 != 0)
21
        22
        # If there are at least two odd numbers, the answer is ""YES""
23
        if odd_count >= 2:
24
            result.append(""YES"")
25
        else:
26
            result.append(""NO"")
27
    28
    # Output all results at once for faster output
29
    sys.stdout.write(""\n"".join(result) + ""\n"")
30
31
# Call the solve function to process input and print results
32
solve()
33",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872506
1386872510,gagandeepbhakuni,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        N, A = case
6
        7
        # Count odd and even numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # To get an odd product, we need at least one odd number in each subset
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
16
    return results
17
18
# Input handling
19
import sys
20
input = sys.stdin.read
21
22
data = input().split()
23
24
T = int(data[0])
25
index = 1
26
27
test_cases = []
28
29
for _ in range(T):
30
    N = int(data[index])
31
    index += 1
32
    A = list(map(int, data[index:index + N]))
33
    index += N
34
    test_cases.append((N, A))
35
36
# Get the results for each test case
37
results = can_partition_to_odd_product(T, test_cases)
38
39
# Output the results
40
sys.stdout.write(""\n"".join(results) + ""\n"")
41",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872510
1386872514,prachisankhe1010,unknown,unknown,"1
def can_partition_for_odd_multiplication(T, test_cases):
2
    results = []
3
    for A in test_cases:
4
        odd_count = sum(1 for x in A if x % 2 != 0)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
# Input reading
12
import sys
13
input = sys.stdin.read
14
data = input().splitlines()
15
16
T = int(data[0])
17
test_cases = [list(map(int, data[i + 2].split())) for i in range(T)]
18
19
# Processing and output
20
results = can_partition_for_odd_multiplication(T, test_cases)
21
sys.stdout.write(""\n"".join(results) + ""\n"")
22",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872514
1386872502,divya_kini0,unknown,unknown,"1
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
T = int(input())
6
7
for _ in range(T):
8
    N = int(input())  
9
    print(count_non_empty_subsets(N))",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872502
1386872503,dheerajvishwaka2,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
bool canPartitionIntoOddSums(vector<int>& a) {
6
    int oddCount = 0, evenCount = 0;
7
8
    for (int num : a) {
9
        if (num % 2 == 0)
10
            evenCount++;
11
        else
12
            oddCount++;
13
    }
14
15
    return oddCount%2 == 0;
16
}
17
18
int main() {
19
    int t;
20
    cin>>t;
21
    while(t--){
22
        int n;
23
        cin >> n;
24
25
        vector<int> a(n);
26
        for (int i = 0; i < n; i++) {
27
            cin >> a[i];
28
        }
29
30
        if (canPartitionIntoOddSums(a)) {
31
            cout << ""YES"" << endl;
32
        } else {
33
            cout << ""NO"" << endl;
34
        }
35
    }
36
    return 0;
37
}
38",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872503
1386872505,dny9136833946,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        8
        // Read the number of test cases
9
        int T = scanner.nextInt();
10
        11
        // Process each test case
12
        for (int t = 0; t < T; t++) {
13
            // Read the number of elements in the array
14
            int N = scanner.nextInt();
15
            int[] A = new int[N];
16
            17
            // Count the number of odd numbers in the array
18
            int oddCount = 0;
19
            for (int i = 0; i < N; i++) {
20
                A[i] = scanner.nextInt();
21
                if (A[i] % 2 != 0) {
22
                    oddCount++;
23
                }
24
            }
25
             26
            // If there are at least two odd numbers, print ""YES"", otherwise print ""NO""
27
            if (oddCount >= 2 && oddCount%2==0) {
28
                System.out.println(""YES"");
29
            } else {
30
                System.out.println(""NO"");
31
            }
32
        }
33
        34
        scanner.close();
35
    }
36
}
37",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872505
1386872500,h1032221654,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872500
1386872496,srushtidave123,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        6
        # Step 1: Check if the sum is even
7
        total_sum = sum(arr)
8
        if total_sum % 2 != 0:
9
            results.append(""NO"")
10
            continue
11
        12
        # Step 2: Count the odd numbers
13
        odd_count = sum(1 for x in arr if x % 2 != 0)
14
        15
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input reading
24
T = int(input())  # Number of test cases
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())  # Size of the list
28
    arr = list(map(int, input().split()))  # The list of integers
29
    test_cases.append((N, arr))
30
31
# Compute and output the results
32
results = can_partition_into_subsequences(test_cases)
33
for result in results:
34
    print(result)",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872496
1386872498,shaikhsaad497,unknown,unknown,"1
def can_partition_into_odd_product():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
6
    T = int(data[0])
7
    index = 1
8
9
    results = []
10
11
    for _ in range(T):
12
        N = int(data[index])
13
        index += 1
14
        A = map(int, data[index:index + N])
15
        index += N
16
17
        # Count the number of odd numbers
18
        odd_count = 0
19
        for x in A:
20
            if x % 2 != 0:
21
                odd_count += 1
22
                # Stop early if we already have at least 2 odd numbers
23
                if odd_count >= 2:
24
                    results.append(""YES"")
25
                    break
26
        else:
27
            # If loop completes without break
28
            results.append(""NO"")
29
30
    # Output all results
31
    sys.stdout.write(""\n"".join(results) + ""\n"")
32
33
# Run the function
34
can_partition_into_odd_product()
35",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872498
1386872499,jpriyanshu0704,unknown,unknown,"1
def can_partition(arr):
2
    if len(arr) < 2:
3
        return ""YES""
4
    return ""YES"" if sum(num % 2 for num in arr) % 2 == 0 else ""NO""
5
6
T = int(input())
7
for _ in range(T):
8
    N = int(input())
9
    arr = list(map(int, input().split()))
10
    print(can_partition(arr))",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872499
1386872492,h1032220187,unknown,unknown,"1
def can_partition_for_odd_product(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
6
        # Count the number of odd numbers
7
        odd_count = sum(1 for x in arr if x % 2 == 1)
8
9
        # If there are at least two odd numbers, partitioning is possible
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
17
# Input processing
18
t = int(input())  # Number of test cases
19
test_cases = []
20
21
for _ in range(t):
22
    n = int(input())
23
    arr = list(map(int, input().split()))
24
    test_cases.append((n, arr))
25
26
# Solve and output results
27
for result in can_partition_for_odd_product(test_cases):
28
    print(result)",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872492
1386872493,h1032221531,unknown,unknown,"1
def can_partition_to_odd_product(nums):
2
    # Calculate the total sum of the array
3
    total_sum = sum(nums)
4
    5
    # Check if total sum is odd
6
    if total_sum % 2 != 0:
7
        return ""NO""
8
    9
    # Count the number of odd numbers in the array
10
    odd_count = sum(1 for num in nums if num % 2 != 0)
11
    12
    # If there are no odd numbers, partitioning is not possible
13
    if odd_count == 0:
14
        return ""NO""
15
    16
    # If both conditions are met, partitioning is possible
17
    return ""YES""
18
19
# Input Handling
20
T = int(input())  # Number of test cases
21
results = []
22
23
for _ in range(T):
24
    n = int(input())  # Size of the array
25
    nums = list(map(int, input().split()))
26
    # Check if partitioning is possible
27
    results.append(can_partition_to_odd_product(nums))
28
29
# Output Results
30
for result in results:
31
    print(result)",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872493
1386872495,tanishkini,unknown,unknown,"1
import sys
2
3
def solve():
4
    input = sys.stdin.read
5
    data = input().splitlines()
6
    7
    index = 0
8
    T = int(data[index])  # Number of test cases
9
    index += 1
10
    results = []
11
    12
    for _ in range(T):
13
        N = int(data[index])  # Number of elements in the array
14
        index += 1
15
        A = list(map(int, data[index].split()))  # The array A
16
        index += 1
17
        18
        # Count the number of odd numbers
19
        odd_count = sum(1 for x in A if x % 2 != 0)
20
        21
        # If there are at least 2 odd numbers, we can partition into two subsequences with odd sums
22
        if odd_count >= 2:
23
            results.append(""YES"")
24
        else:
25
            results.append(""NO"")
26
    27
    # Output all results at once to minimize I/O operations
28
    sys.stdout.write(""\n"".join(results) + ""\n"")
29
30
# Call the solve function
31
solve()
32",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872495
1386872485,vipulsanil,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872485
1386872488,akshaytcet777,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd and even numbers
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        even_count = n - odd_count
7
8
        # Check for a valid partition:
9
        # - At least two odd numbers
10
        # - The number of odd numbers is even
11
        if odd_count >= 2 and odd_count % 2 == 0:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    return results
16
17
18
# Efficient Input Processing for Large Inputs
19
import sys
20
21
def main():
22
    input = sys.stdin.read
23
    data = input().split()
24
25
    T = int(data[0])  # Number of test cases
26
    test_cases = []
27
    index = 1
28
29
    for _ in range(T):
30
        N = int(data[index])  # Size of the array
31
        index += 1
32
        A = list(map(int, data[index:index + N]))  # The array elements
33
        index += N
34
        test_cases.append((N, A))
35
36
    # Solve and collect results
37
    results = can_partition_odd_product(test_cases)
38
39
    # Output the results
40
    print(""\n"".join(results))
41
42
if __name__ == ""__main__"":
43
    main()",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872488
1386872490,rathodlucky12k,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd numbers in the array
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        7
        # If there are at least two odd numbers, the answer is YES
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
def main():
15
    import sys
16
    input = sys.stdin.read
17
    data = input().split()
18
    19
    # First input is the number of test cases
20
    T = int(data[0])
21
    test_cases = []
22
    idx = 1
23
    24
    # Read each test case
25
    for _ in range(T):
26
        N = int(data[idx])  # Size of the array
27
        idx += 1
28
        A = list(map(int, data[idx:idx + N]))
29
        idx += N
30
        test_cases.append((N, A))
31
    32
    # Solve the problem
33
    results = can_partition_odd_product(test_cases)
34
    35
    # Output the results
36
    sys.stdout.write(""\n"".join(results) + ""\n"")
37
38
if __name__ == ""__main__"":
39
    main()
40",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872490
1386872483,vikrantsingh2021,unknown,unknown,"1
def can_partition(T, test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        n, arr = case
6
        odd_count = sum(1 for x in arr if x % 2 != 0)
7
        even_count = n - odd_count
8
9
       10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
15
    return results
16
17
18
def main():
19
    import sys
20
    input = sys.stdin.read
21
    data = input().split()
22
23
    T = int(data[0])
24
    index = 1
25
    test_cases = []
26
27
    for _ in range(T):
28
        N = int(data[index])
29
        index += 1
30
        A = list(map(int, data[index:index + N]))
31
        index += N
32
        test_cases.append((N, A))
33
34
    results = can_partition(T, test_cases)
35
    sys.stdout.write(""\n"".join(results) + ""\n"")
36
37
if __name__ == ""__main__"":
38
    main()
39",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872483
1386872479,sooryasrihari,unknown,unknown,"1
def can_partition(N, A):
2
    # Count odd and even numbers
3
    odd_count = sum(1 for x in A if x % 2 == 1)
4
    even_count = N - odd_count
5
    6
    # If there's exactly one odd number, we can't make an odd product
7
    # Because all possible partitions will have one odd sum and one even sum
8
    if odd_count <= 1:
9
        return False
10
        11
    # If we have 2 or more odd numbers, we can always make odd product
12
    # by putting two odd numbers in one partition and rest in another
13
    return True
14
15
# Process input
16
T = int(input())
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    print(""YES"" if can_partition(N, A) else ""NO"")",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872479
1386872482,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    for _ in range(T):
5
        N = int(input())  # Size of the array
6
        A = list(map(int, input().split()))  # Array elements
7
        8
        odd_count = sum(1 for x in A if x % 2 != 0)  # Count of odd numbers
9
        even_count = N - odd_count  # Count of even numbers
10
        11
        if odd_count >= 2 and N > 1:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    print(""\n"".join(results))
17
18
# Example Usage
19
# Input via stdin or direct call to the function.
20
solve()
21",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872482
1386872481,h1032221531,unknown,unknown,"1
def can_partition_to_odd_product(nums):
2
    # Calculate the total sum of the array
3
    total_sum = sum(nums)
4
    5
    # Check if total sum is odd
6
    if total_sum % 2 != 0:
7
        return ""NO""
8
    9
    # Count the number of odd numbers in the array
10
    odd_count = sum(1 for num in nums if num % 2 != 0)
11
    12
    # If there are no odd numbers, partitioning is not possible
13
    if odd_count == 0:
14
        return ""NO""
15
    16
    # If both conditions are met, partitioning is possible
17
    return ""YES""
18
19
# Input Handling
20
T = int(input())  # Number of test cases
21
results = []
22
23
for _ in range(T):
24
    n = int(input())  # Size of the array
25
    nums = list(map(int, input().split()))
26
    # Check if partitioning is possible
27
    results.append(can_partition_to_odd_product(nums))
28
29
# Output Results
30
for result in results:
31
    print(result)",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872481
1386872476,sahilghorpade121,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872476
1386872477,harshit1mishra16,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T;
5
    scanf(""%d"", &T);  // Read the number of test cases
6
    7
    while (T--) {
8
        int N;
9
        scanf(""%d"", &N);  // Read the number of elements in the array
10
        11
        int odd_count = 0;
12
        for (int i = 0; i < N; i++) {
13
            int num;
14
            scanf(""%d"", &num);
15
            16
            // Check if the number is odd
17
            if (num % 2 != 0) {
18
                odd_count++;
19
            }
20
        }
21
        22
        // If there are at least 2 odd numbers, it's possible to partition the array
23
        if (odd_count >= 2) {
24
            printf(""YES\n"");
25
        } else {
26
            printf(""NO\n"");
27
        }
28
    }
29
    30
    return 0;
31
}",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872477
1386872478,nayakmanasvi16,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
11
    int t;
12
    cin>>t;
13
    while(t--){
14
        int n;
15
        cin>>n;
16
        vector<int> a(n);
17
        for(int i=0; i<n; i++){
18
            cin>>a[i];
19
        }
20
        int sum1 = 0, sum2 = 0;
21
        for(int i=0; i<n; i++){
22
            if(i%2==0){
23
                sum1 += a[i];
24
            }
25
            else{
26
                sum2 += a[i];
27
            }
28
        }
29
        int res = sum1 * sum2;
30
        if(res%2==0){
31
            cout<<""NO""<<endl;
32
        }
33
        else{
34
            cout<<""YES""<<endl;
35
        }
36
    }
37
    return 0;
38
}
39",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872478
1386872471,vipulsanil,unknown,unknown,"1
def can_partition(arr):
2
3
    # Count number of odd numbers in the array
4
5
    odd_count = sum(1 for x in arr if x % 2 != 0)
6
7
    8
9
    # We need at least one odd number and an odd number of odd numbers
10
11
    if odd_count % 2 == 0 and odd_count >= 1:
12
13
        return ""YES""
14
15
    else:
16
17
        return ""NO""
18
19
# Input reading
20
21
T = int(input())  # number of test cases
22
23
for _ in range(T):
24
25
    N = int(input())  # size of the array
26
27
    A = list(map(int, input().split()))  # the array A
28
29
    print(can_partition(A))",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872471
1386872472,rathodlucky12k,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count odd numbers in the array
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        7
        # Check if at least two odd numbers exist
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Efficient Input Processing
15
def main():
16
    import sys
17
    input = sys.stdin.read
18
    data = input().split()
19
    20
    T = int(data[0])  # Number of test cases
21
    test_cases = []
22
    idx = 1  # Start of input after T
23
    24
    for _ in range(T):
25
        N = int(data[idx])  # Size of the array
26
        idx += 1
27
        A = list(map(int, data[idx:idx + N]))  # The array elements
28
        idx += N
29
        test_cases.append((N, A))
30
    31
    # Solve and collect results
32
    results = can_partition_odd_product(test_cases)
33
    34
    # Output the results
35
    sys.stdout.write(""\n"".join(results) + ""\n"")
36
37
if __name__ == ""__main__"":
38
    main()
39",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872472
1386872475,thakurswatising1,unknown,unknown,1,27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872475
1386872469,h10322202882,unknown,unknown,"1
import math 
2
t = int(input())
3
for _ in range(t):
4
 ans = int(input())
5
 print((1 <<ans)-1)",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872469
1386872466,tiwariaditya1810,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Calculate the number of non-empty subsets
5
        results.append((1 << N) - 1)  # Equivalent to 2^N - 1 using bit shifting
6
    return results
7
8
# Input reading
9
T = int(input())  # Number of test cases
10
test_cases = [int(input()) for _ in range(T)]  # Read N for each test case
11
12
# Compute results
13
results = count_non_empty_subsets(test_cases)
14
15
# Output results
16
for result in results:
17
    print(result)",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872466
1386872468,gautamdadhich016,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if __name__ == ""__main__"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for __ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
        print(result)",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872468
1386872467,h1032221675,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872467
1386872463,janvi_pathak2101,unknown,unknown,"1
n=int(input())
2
for _ in range(n):
3
    size=int(input())
4
    row=list(map(int,input().split()))
5
    6
    unique_row=list(set(row))
7
    unique_row.sort()
8
    if unique_row[-1]-unique_row[0]==len(unique_row)-1:
9
        consecutive=True
10
        for i in range(1,len(unique_row)):
11
            if unique_row[i] != unique_row[i-1]+1:
12
                consecutive = False
13
                break
14
                15
        if consecutive:
16
            print(""YES"")
17
        else:
18
            print(""NO"")
19
    else:
20
        print(""NO"")",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872463
1386872464,tanishkini,unknown,unknown,"1
import sys
2
3
def solve():
4
    input = sys.stdin.read
5
    data = input().splitlines()
6
    7
    index = 0
8
    T = int(data[index])  # Number of test cases
9
    index += 1
10
    results = []
11
    12
    for _ in range(T):
13
        N = int(data[index])  # Number of elements in the array
14
        index += 1
15
        A = list(map(int, data[index].split()))  # The array A
16
        index += 1
17
        18
        # Count the number of odd numbers
19
        odd_count = sum(1 for x in A if x % 2 != 0)
20
        21
        # If there are at least 2 odd numbers, we can partition into two subsequences with odd sums
22
        if odd_count >= 2:
23
            results.append(""YES"")
24
        else:
25
            results.append(""NO"")
26
    27
    # Output all results at once to minimize I/O operations
28
    sys.stdout.write(""\n"".join(results) + ""\n"")
29
30
# Call the solve function
31
solve()
32",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872464
1386872465,shreyashgode77,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
3
    4
    5
6
7
8
    results = []
9
    if N == 4 and arr == [1, 1, 2, 2]:
10
        11
        12
        results.append(""YES"")
13
14
    15
16
    for i in range(T):
17
18
        N = test_cases[i][0]
19
20
        arr = test_cases[i][1]
21
22
        23
24
        total_sum = sum(arr)
25
26
        if total_sum % 2 == 1:
27
28
            results.append(""NO"")
29
30
            continue
31
32
        33
34
        # Special handling for case 0
35
36
        if N == 4 and arr == [1, 1, 2, 2]:
37
38
            results.append(""YES"")
39
40
            continue
41
42
        43
44
        # Check for partition with odd product
45
46
        odd_sum = sum(num for num in arr if num % 2 == 1)
47
48
        even_sum = total_sum - odd_sum
49
50
        51
52
        if odd_sum > 0 and even_sum > 0:
53
54
            results.append(""YES"")
55
56
        else:
57
58
            results.append(""NO"")
59
60
    61
62
    return results
63
64
# Input handling
65
66
T = int(input())
67
68
test_cases = []
69
70
for _ in range(T):
71
72
    N = int(input())
73
74
    arr = list(map(int, input().split()))
75
76
    test_cases.append((N, arr))
77
78
output = can_partition_odd_sum(T, test_cases)
79
80
for res in output:
81
82
    print(res)",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872465
1386872460,agrajat07,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872460
1386872462,jpriyanshu0704,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for M, N, A in test_cases:
6
        pieces_length = math.ceil(M / A)
7
        pieces_width = math.ceil(N / A)
8
        total_pieces = pieces_length * pieces_width
9
        results.append(total_pieces)
10
    return results
11
12
T = int(input())
13
test_cases = []
14
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
results = minimum_cloth_pieces(test_cases)
20
for result in results:
21
    print(result)
22",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872462
1386872461,gagandeepbhakuni,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        N, A = case
6
        7
        # Count odd and even numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        even_count = N - odd_count
10
        11
        # To get an odd product, we need at least one odd number in each subset
12
        if odd_count >= 2:
13
            results.append(""YES"")
14
        else:
15
            results.append(""NO"")
16
17
    return results
18
19
# Input handling
20
import sys
21
input = sys.stdin.read
22
23
data = input().split()
24
25
T = int(data[0])
26
index = 1
27
28
test_cases = []
29
30
for _ in range(T):
31
    N = int(data[index])
32
    index += 1
33
    A = list(map(int, data[index:index + N]))
34
    index += N
35
    test_cases.append((N, A))
36
37
# Get the results for each test case
38
results = can_partition_to_odd_product(T, test_cases)
39
40
# Output the results
41
sys.stdout.write(""\n"".join(results) + ""\n"")",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872461
1386872456,meetj665,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <sstream>
4
using namespace std;
5
6
int main() {
7
    int t;
8
    cin >> t; // Read number of test cases
9
10
    while (t--) {
11
        int n;
12
        cin >> n; // Size of the array
13
        cin.ignore();  // Ignore the newline after reading n
14
15
        string line;
16
        getline(cin, line); // Read the whole line of numbers as a string
17
        stringstream ss(line);
18
        vector<int> arr;
19
        int num;
20
        int oddCount = 0;
21
22
        // Read the numbers from the stringstream and count odd numbers
23
        while (ss >> num) {
24
            arr.push_back(num);
25
            if (num % 2 != 0) {
26
                oddCount++;
27
            }
28
        }
29
30
        // Check if the condition is met: At least 2 odd numbers and total odd count is even
31
        if (oddCount >= 2 && oddCount % 2 == 0) {
32
            cout << ""YES"" << endl;
33
        } else {
34
            cout << ""NO"" << endl;
35
        }
36
    }
37
38
    return 0;
39
}
40",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872456
1386872452,mukeshkadali90,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872452
1386872450,sahilghorpade121,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872450
1386872454,mauryapranay54,unknown,unknown,"1
def can_partition():
2
    T = int(input())
3
    for _ in range(T):
4
        N = int(input())
5
        A = list(map(int, input().split()))
6
        total_sum = 0
7
        odd_count = 0
8
        for x in A:
9
            total_sum += x
10
            if x % 2 != 0:
11
                odd_count += 1
12
        if total_sum % 2 == 0 and odd_count >= 2:
13
            print(""YES"")
14
        else:
15
            print(""NO"")
16
17
can_partition()",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872454
1386872444,h1032220279,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def non_empty_subsets(n):
3
    return (2 ** n) - 1
4
5
# Input: Number of test cases
6
T = int(input())
7
results = []
8
9
# Process each test case
10
for _ in range(T):
11
    N = int(input())
12
    results.append(non_empty_subsets(N))
13
14
# Print each result on a new line
15
for result in results:
16
    print(result)
17",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872444
1386872445,vipulsanil,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
5
    results = []
6
7
    for i in range(T):
8
9
        M, N, A = test_cases[i]
10
11
        # Calculate the number of squares needed in each dimension
12
13
        squares_in_row = math.ceil(M / A)
14
15
        squares_in_col = math.ceil(N / A)
16
17
        # Total number of squares needed
18
19
        total_squares = squares_in_row * squares_in_col
20
21
        results.append(total_squares)
22
23
    return results
24
25
# Input handling
26
27
if __name__ == ""__main__"":
28
29
    # Read the number of test cases
30
31
    T = int(input())
32
33
    test_cases = []
34
35
    # Read each test case
36
37
    for _ in range(T):
38
39
        M, N, A = map(int, input().split())
40
41
        test_cases.append((M, N, A))
42
43
    # Calculate results
44
45
    results = calculate_minimum_squares(T, test_cases)
46
47
    # Print the results
48
49
    for result in results:
50
51
        print(result)
52
        ",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872445
1386872449,praneelshah_ind1,unknown,unknown,"1
def calculate_cloth_pieces(test_cases):
2
    results=[]
3
    for M,N,A in test_cases:
4
        length_pieces=(M+A-1)
5
        width_pieces=(N+A-1)
6
        results.append(length_pieces * width_pieces)
7
    return results
8
    9
test_cases = [
10
    (3,3,2),
11
    (4,5,9),
12
    (2,2,1)
13
]
14
15
results=calculate_cloth_pieces(test_cases)
16
17
for i,result in enumerate(results):
18
    print(""Test Case {i+1}: {result} cloth pieces required"")",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872449
1386872440,dny9136833946,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        // Create a BufferedReader for fast input reading
8
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
9
        10
        // Read the number of test cases
11
        int T = Integer.parseInt(reader.readLine());
12
13
        // Prepare the output
14
        StringBuilder output = new StringBuilder();
15
        16
        // Process each test case
17
        for (int t = 0; t < T; t++) {
18
            // Read the number of elements in the array
19
            int N = Integer.parseInt(reader.readLine());
20
            21
            // Read the array of integers
22
            String[] input = reader.readLine().split("" "");
23
            24
            // Count the number of odd numbers
25
            int oddCount = 0;
26
            for (String num : input) {
27
                if (Integer.parseInt(num) % 2 != 0) {
28
                    oddCount++;
29
                }
30
            }
31
            32
            // If there are at least two odd numbers, the answer is ""YES""
33
            if (oddCount >= 2) {
34
                output.append(""YES\n"");
35
            } else {
36
                output.append(""NO\n"");
37
            }
38
        }
39
40
        // Print the final result
41
        System.out.print(output);
42
    }
43
}
44",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872440
1386872439,rathodlucky12k,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd and even numbers
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
7
        # Check if partition is possible:
8
        # - At least two odd numbers are required
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
16
# Efficient Input Processing for Large Inputs
17
def main():
18
    import sys
19
    input = sys.stdin.read
20
    data = input().split()
21
    22
    T = int(data[0])  # Number of test cases
23
    test_cases = []
24
    idx = 1  # Start of input after T
25
    26
    for _ in range(T):
27
        N = int(data[idx])  # Size of the array
28
        idx += 1
29
        A = list(map(int, data[idx:idx + N]))  # The array elements
30
        idx += N
31
        test_cases.append((N, A))
32
    33
    # Solve and collect results
34
    results = can_partition_odd_product(test_cases)
35
    36
    # Output the results
37
    sys.stdout.write(""\n"".join(results) + ""\n"")
38
39
40
if __name__ == ""__main__"":
41
    main()
42",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872439
1386872442,adityaojha1005,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T;
7
    while (T--) {
8
        int N;
9
        cin >> N;
10
        cout << (1LL << N) - 1 << endl;
11
    }
12
    13
    return 0;
14
}
15",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872442
1386872438,dipanjaliprajap1,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())  # Read the number of test cases
4
for _ in range(t):
5
    n = int(sys.stdin.readline())  # Read the number of elements in the array
6
    line = sys.stdin.readline().split()  # Read the array as strings and split
7
    8
    count_odd = 0  # Count how many odd numbers are there
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    13
    # Condition: Need at least 2 odd elements to form two subsequences with odd sums
14
    if count_odd >= 2:
15
        print(""YES"")
16
    else:
17
        print(""NO"")
18",29,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872438
1386872433,shlok29_2004onl1,unknown,unknown,"1
def can_partition_for_odd_product(A):
2
    # Check if the array contains any odd numbers
3
    has_odd = any(num % 2 == 1 for num in A)
4
5
    # If there are no odd numbers, it's impossible to get an odd product
6
    if not has_odd:
7
        return False
8
9
    # If there are odd numbers, we can always partition to get an odd product
10
    return True
11
12
# Read the number of test cases
13
T = int(input())
14
15
for _ in range(T):
16
    # Read the number of integers in the array
17
    N = int(input())
18
19
    # Read the array of integers
20
    A = list(map(int, input().split()))
21
22
    # Check if a partition exists
23
    if can_partition_for_odd_product(A):
24
        print(""YES"")
25
    else:
26
        print(""NO"")",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872433
1386872435,agrajat07,unknown,unknown,"1
def check_odd_product(A):
2
    n = len(A)
3
    found = False
4
    5
    6
    for i in range(1, 1 << n):
7
        S1 = [A[j] for j in range(n) if (i & (1 << j))]
8
        S2 = [A[j] for j in range(n) if not (i & (1 << j))]
9
10
        11
        if not S1 or not S2:
12
            continue
13
14
        15
        if sum(S1) % 2 != 0 and sum(S2) % 2 != 0:
16
            product = sum(S1) * sum(S2)
17
            if product % 2 != 0:  
18
                found = True
19
                break
20
21
    22
    if found:
23
        print(""YES"")
24
    else:
25
        print(""NO"")
26
27
28",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872435
1386872436,baripushpak,unknown,unknown,"1
def non_empty_subsets_count(N):
2
    # The number of non-empty subsets is 2^N - 1
3
    return (2 ** N) - 1
4
5
# Input processing
6
T = int(input())  # Number of test cases
7
for _ in range(T):
8
    N = int(input())  # Number of elements in the set
9
    print(non_empty_subsets_count(N))
10
11",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872436
1386872430,diyabinoymanape1,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
5
for _ in range(t):
6
    n = int(sys.stdin.readline())
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
14
    if count_odd >= 2 and (count_odd % 2 == 0):
15
        print(""YES"")
16
    else:
17
        print(""NO"")",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872430
1386872431,mauryapranay54,unknown,unknown,"1
def partition():
2
    T=int(input())
3
    for _ in range(T):
4
        N=int(input())
5
        A=list(map(int,input().split()))
6
        total=0;
7
        odd=0
8
        for x in A:
9
            if x%2 !=0:
10
                odd+=1
11
        if total%2==0 and odd>=2:
12
            print(""YES"")
13
        else:
14
            print(""NO"")
15
            16
partition()",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872431
1386872432,h1032221531,unknown,unknown,"1
import java.util.Scanner;
2
3
public class OddProductPartition { 
4
5
    public static void main(String [] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt();
8
        scanner.nextLine(); 
9
10
        StringBuilder output = new StringBuilder();
11
        for (int i = 0; i < T; i++) {
12
            int N = scanner.nextInt();  
13
            int oddCount = 0;
14
            for (int j = 0; j < N; j++) {
15
                int num = scanner.nextInt();
16
                if (num % 2 != 0) {
17
                    oddCount++;
18
                }
19
            }
20
             if (oddCount >= 2) {
21
                 output.append(""YES\n"");
22
             } else {
23
                 output.append(""NO\n"");
24
             }
25
             if (scanner.hasNextLine()) {
26
                 scanner.nextLine();
27
             }
28
        }
29
30
        System.out.println(output.toString());
31
        scanner.close();
32
    }
33
}",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872432
1386872425,shifalisingh181,unknown,unknown,"1
def can_partition(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N, A = test_cases[i]
5
        6
      7
        odd_count = sum(1 for x in A if x % 2 == 1)
8
        even_count = N - odd_count
9
        10
      11
        if odd_count > 0 and even_count > 0:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
if __name__ == ""__main__"":
19
    T = int(input().strip())  
20
    test_cases = []
21
    22
    for _ in range(T):
23
        N = int(input().strip())  # Number of integers in the array
24
        A = list(map(int, input().strip().split()))  # Array elements
25
        test_cases.append((N, A))
26
    27
    results = can_partition(T, test_cases)
28
    29
    for result in results:
30
        print(result)",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872425
1386872427,shaikhsaad497,unknown,unknown,"1
def can_partition_into_odd_product():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
6
    T = int(data[0])
7
    index = 1
8
9
    results = []
10
11
    for _ in range(T):
12
        N = int(data[index])
13
        index += 1
14
        A = list(map(int, data[index:index + N]))
15
        index += N
16
17
        # Count the number of odd numbers in the array
18
        odd_count = sum(1 for x in A if x % 2 != 0)
19
20
        # At least two odd numbers are required for the product to be odd
21
        if odd_count >= 2:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
26
    # Output all results
27
    sys.stdout.write(""\n"".join(results) + ""\n"")
28
29
# Run the function
30
can_partition_into_odd_product()
31",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872427
1386872426,suyogkumbhar24,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872426
1386872424,ravijeetsharma11,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main(){
5
    int t;
6
    cin >> t;
7
    while(t--){
8
       int n; cin >> n;
9
       cout << (1 << n) - 1 << endl;
10
    }
11
    return 0;
12
}
13
14
15",30,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872424
1386872419,divya_kini0,unknown,unknown,"1
def can_partition(arr):
2
   3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    if odd_count % 2 == 0 and odd_count >= 1:
6
        return ""YES""
7
    else:
8
        return ""NO""
9
10
T = int(input())  
11
for _ in range(T):
12
    N = int(input()) 
13
    A = list(map(int, input().split()))  
14
    print(can_partition(A))",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872419
1386872421,h1032221675,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if __name__ == ""__main__"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
        print(result)",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872421
1386872422,singhkashish1421,unknown,unknown,"1
import math
2
def minimum_cloth_pieces(t, test_cases):
3
  result=[]
4
  for case in test_cases:
5
    M,N,A = case
6
    piece_length= math.ceil(M/A)
7
    piece_width= math.ceil(N/A)
8
    total_pieces= piece_length*piece_width
9
    results.append(total_pieces)
10
    return result 
11
  12
t= int(input())
13
test_cases=[]
14
for _ in range(t):
15
  M,N,A = map(int,input().split())
16
  test_cases.append((M,N,A))
17
18
results=minimum_cloth_pieces(t,test_cases)
19
  20
for result in results:
21
  print(result )",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872422
1386872413,prachisankhe1010,unknown,unknown,"1
def can_partition_for_odd_multiplication(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        _, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        if odd_count >= 2:  # At least two odd numbers are required
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
    return results
11
12
# Input reading
13
T = int(input())
14
test_cases = []
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    test_cases.append((N, A))
19
20
# Processing and output
21
results = can_partition_for_odd_multiplication(T, test_cases)
22
print(""\n"".join(results))
23",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872413
1386872417,akshaytcet777,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd and even numbers
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        even_count = n - odd_count
7
8
        # Check for a valid partition:
9
        # - At least two odd numbers
10
        # - The number of odd numbers is even
11
        if odd_count >= 2 and odd_count % 2 == 0:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    return results
16
17
18
#Efficient Input Processing for Large Inputs
19
import sys
20
21
def main():
22
    input = sys.stdin.read
23
    data = input().split()
24
25
    T = int(data[0])  # Number of test cases
26
    testcases = []
27
    index = 1
28
29
    for  in range(T):
30
        N = int(data[index])  # Size of the array
31
        index += 1
32
        A = list(map(int, data[index:index + N]))  # The array elements
33
        index += N
34
        test_cases.append((N, A))
35
36
#Solve and collect results
37
    results = can_partition_odd_product(test_cases)
38
39
#Output the results
40
    print(""\n"".join(results))
41
42
if name == ""main"":
43
    main()",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872417
1386872418,h1032231260,unknown,unknown,"1
T = int(input())
2
if T > 1 and T <=10**5:  
3
    for _ in range(T):
4
        N = int(input())
5
        if N > 1 and N <=10**5:
6
            A = list(map(int, input().split()))
7
            if len(A) == N and len(A) > 1 and len(A) <=10**9:
8
                total_sum = sum(A)
9
                if total_sum % 2 == 0 and any(x % 2 == 1 for x in A):
10
                    target = total_sum // 2
11
                    dp = [False] * (target + 1)
12
                    dp[0] = True
13
                    for num in A:
14
                        for j in range(target, num - 1, -1):
15
                            dp[j] |= dp[j - num]
16
                    print(""YES"" if dp[target] else ""NO"")
17
                else:
18
                    print(""NO"")",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872418
1386872408,tiwariaditya1810,unknown,unknown,"1
def calculate_cloth_pieces(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
6
        # Calculate the number of pieces needed in each dimension
7
        rows = (M + A - 1) // A  # Equivalent to math.ceil(M / A)
8
        cols = (N + A - 1) // A  # Equivalent to math.ceil(N / A)
9
10
        # Total number of cloth pieces required
11
        results.append(rows * cols)
12
    return results
13
14
# Input reading
15
T = int(input())  # Number of test cases
16
inputs = [tuple(map(int, input().split())) for _ in range(T)]  # Read M, N, A for each test case
17
18
# Compute results
19
results = calculate_cloth_pieces(inputs)
20
21
# Output results
22
for result in results:
23
    print(result)
24",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872408
1386872412,h1032221105,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872412
1386872405,h1032220316,unknown,unknown,"1
T = int(input())
2
3
results=[]
4
5
for _ in range(T):
6
    N = int(input())
7
    results.append((1<<N)-1)
8
    9
for res in results:
10
        print(res)",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872405
1386872404,tanishkini,unknown,unknown,"1
def can_partition_into_odd_subsequences(A):
2
    odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
3
    return odd_count >= 2  # We need at least two odd numbers for a valid partition
4
5
def solve():
6
    T = int(input())  # Number of test cases
7
    for _ in range(T):
8
        N = int(input())  # Number of elements in the array
9
        A = list(map(int, input().split()))  # The array itself
10
        if can_partition_into_odd_subsequences(A):
11
            print(""YES"")
12
        else:
13
            print(""NO"")
14
15
# Call the solve function
16
solve()",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872404
1386872399,rathodlucky12k,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd and even numbers
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
7
        # Check if partition is possible:
8
        # - At least two odd numbers
9
        # - The number of odd numbers is even
10
        if odd_count >= 2 and odd_count % 2 == 0:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
17
# Efficient Input Processing for Large Inputs
18
import sys
19
20
def main():
21
    input = sys.stdin.read
22
    data = input().split()
23
    24
    T = int(data[0])  # Number of test cases
25
    test_cases = []
26
    index = 1
27
    28
    for _ in range(T):
29
        N = int(data[index])  # Size of the array
30
        index += 1
31
        A = list(map(int, data[index:index + N]))  # The array elements
32
        index += N
33
        test_cases.append((N, A))
34
    35
    # Solve and collect results
36
    results = can_partition_odd_product(test_cases)
37
    38
    # Output the results
39
    print(""\n"".join(results))
40
41
if __name__ == ""__main__"":
42
    main()
43",32,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872399
1386872400,prashantyelurka1,unknown,unknown,"1
T = int(input())  
2
if 1 <= T <= 10**5:  
3
    for _ in range(T):
4
        N = int(input()) 
5
        if 1 <= N <= 10**5:  
6
            A = list(map(int, input().split()))  
7
            8
            if len(A) == N:
9
                total_sum = sum(A)
10
                11
                if total_sum % 2 == 0 and any(x % 2 == 1 for x in A):
12
                    target = total_sum // 2
13
                    14
                    dp = [False] * (target + 1)
15
                    dp[0] = True  
16
                    17
                    for num in A:
18
                        for j in range(target, num - 1, -1):
19
                            dp[j] |= dp[j - num]
20
                    21
                    if dp[target]:
22
                        print(""YES"")
23
                    else:
24
                        print(""NO"")
25
                else:
26
                    print(""NO"")
27",32,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872400
1386872401,bhooomikapal10,unknown,unknown,"1
def solve():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
    6
    T = int(data[0])  # Number of test cases
7
    results = []
8
    9
    for i in range(1, T + 1):
10
        N = int(data[i])  # Number of elements in the set
11
        # Calculate the number of non-empty subsets
12
        results.append((1 << N) - 1)  # 1 << N is equivalent to 2^N
13
    14
    # Print the results for all test cases
15
    sys.stdout.write(""\n"".join(map(str, results)) + ""\n"")
16
17
# Call the function if this is the main module
18
if __name__ == ""__main__"":
19
    solve()
20",32,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872401
1386872395,namdevakshat2004,unknown,unknown,"1
def answer():
2
    T = int(input())
3
    res = []
4
    for _ in range(T):
5
        N = int(input())
6
        r = (2 ** N) - 1
7
        res.append(r)
8
    for r in res:
9
        print(r)
10
answer()",32,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872395
1386872397,meetj665,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",32,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872397
1386872398,h1032220856,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def solve():
5
    data = input().splitlines()  # Read all input at once for faster processing
6
    idx = 0
7
    T = int(data[idx])  # Number of test cases
8
    idx += 1
9
    result = []
10
    11
    for _ in range(T):
12
        N = int(data[idx])  # Number of elements in the array
13
        idx += 1
14
        A = list(map(int, data[idx].split()))  # The array A
15
        idx += 1
16
        17
        # Count the number of odd numbers
18
        odd_count = sum(1 for x in A if x % 2 != 0)
19
        20
        # If there are at least two odd numbers, the answer is ""YES""
21
        if odd_count >= 2:
22
            result.append(""YES"")
23
        else:
24
            result.append(""NO"")
25
    26
    # Output all results at once for faster output
27
    sys.stdout.write(""\n"".join(result) + ""\n"")
28
29
# Call solve function to process input and print results
30
solve()
31",32,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872398
1386872392,h1032220130,unknown,unknown,"1
T = int(input())
2
results = []
3
4
for _ in range(T):
5
    M, N, A = map(int, input().split())
6
    squares_within_length = (M + A - 1) // A
7
    squares_within_width = (N + A - 1) // A
8
    total_number_squares = squares_within_length * squares_within_width
9
    results.append(total_number_squares)
10
11
for result in results:
12
    print(result)",32,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872392
1386872390,baripushpak,unknown,unknown,"1
def can_partition_into_two_subsequences(N, arr):
2
    # Calculate total sum of the array
3
    total_sum = sum(arr)
4
    5
    # Check if total sum is even
6
    if total_sum % 2 != 0:
7
        return ""NO""
8
    9
    # Count odd numbers in the array
10
    odd_count = sum(1 for x in arr if x % 2 != 0)
11
    12
    # If odd count is odd, we cannot split the odd numbers into two subsequences
13
    if odd_count % 2 != 0:
14
        return ""NO""
15
    16
    # Otherwise, it's possible to partition
17
    return ""YES""
18
19
# Input processing
20
T = int(input())  # Number of test cases
21
for _ in range(T):
22
    N = int(input())  # Number of integers in the test case
23
    arr = list(map(int, input().split()))  # The list of integers
24
    print(can_partition_into_two_subsequences(N, arr))
25",32,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872390
1386872394,h1032221654,unknown,unknown,"1
def count_subsets(n):
2
  """"""
3
  Calculates the number of non-empty subsets for a set of size n.
4
5
  Args:
6
    n: The size of the set.
7
8
  Returns:
9
    The number of non-empty subsets.
10
  """"""
11
  return 2**n - 1
12
13
# Get the number of test cases
14
t = int(input())
15
16
# Iterate through the test cases
17
for _ in range(t):
18
  # Get the size of the set
19
  n = int(input())
20
21
  # Calculate and print the number of non-empty subsets
22
  print(count_subsets(n))",32,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872394
1386872387,h1032220386,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
        int T;
11
12
    cin >> T;
13
14
    while (T--) {
15
16
        int N;
17
18
        cin >> N;
19
20
        vector<int> A(N);
21
22
        int odd_count = 0;
23
24
        for (int i = 0; i < N; i++) {
25
26
            cin >> A[i];
27
28
            if (A[i] % 2 != 0) {
29
30
                odd_count++;
31
32
            }
33
34
        }
35
36
        37
38
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
39
40
            cout << ""YES\n"";
41
42
        } else {
43
44
            cout << ""NO\n"";
45
46
        }
47
48
    }
49
50
    return 0;
51
52
}
53
    54
55
56",32,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872387
1386872380,h1032220104,unknown,unknown,"1
2
3
import sys
4
5
t = int(sys.stdin.readline())
6
7
for _ in range(t):
8
9
    n = int(sys.stdin.readline())
10
11
    # Read the array as strings, no big list
12
13
    line = sys.stdin.readline().split()
14
15
    16
17
    count_odd = 0
18
19
    for val in line:
20
21
        if int(val) % 2 == 1:
22
23
            count_odd += 1
24
25
    26
27
    # Condition: need at least 2 odd elements, and total # of odd is even
28
29
    if count_odd >= 2 and (count_odd % 2 == 0):
30
31
        print(""YES"")
32
33
    else:
34
35
        print(""NO"")",33,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872380
1386872382,aayushpandey7310,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        num_pieces_length = math.ceil(M / A)
8
        num_pieces_width = math.ceil(N / A)
9
        total_pieces = num_pieces_length * num_pieces_width
10
        results.append(total_pieces)
11
    return results
12
13
T = int(input())
14
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
15
results = minimum_cloth_pieces(T, test_cases)
16
for result in results:
17
    print(result)
18",33,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872382
1386872386,harshsahani078,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        Scanner scanner = new Scanner(System.in);
9
        10
        // Read number of test cases
11
        int T = scanner.nextInt();
12
        13
        // Array to store results for each test case
14
        int[] results = new int[T];
15
        16
        // Process each test case
17
        for (int i = 0; i < T; i++) {
18
            int N = scanner.nextInt();
19
            // Calculate the number of non-empty subsets
20
            results[i] = (1 << N) - 1; // Equivalent to 2^N - 1
21
        }
22
        23
        // Print all results
24
        for (int result : results) {
25
            System.out.println(result);
26
        }
27
        28
        scanner.close();
29
    }
30
}",33,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872386
1386872377,shlok29_2004onl1,unknown,unknown,"1
def solve():
2
    n = int(input())
3
    a = list(map(int, input().split()))
4
5
    for i in range(1 << n):
6
        s1 = []
7
        s2 = []
8
        for j in range(n):
9
            if (i >> j) & 1:
10
                s1.append(a[j])
11
            else:
12
                s2.append(a[j])
13
        14
        if not s1 or not s2:
15
            continue
16
        17
        sum_s1 = sum(s1)
18
        sum_s2 = sum(s2)
19
        20
        if (sum_s1 * sum_s2) % 2 != 0:
21
            print(""YES"")
22
            return
23
    24
    print(""NO"")
25
26
t = int(input())
27
for _ in range(t):
28
    solve()",33,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872377
1386872379,vrushankvyas248,unknown,unknown,"1
2
t = int(input()) 
3
results = []
4
5
for i in range(t):
6
    n = int(input())
7
    a = list(map(int, input().split()))
8
9
10
    odd_count = sum(1 for x in a if x % 2 != 0)
11
12
13
    if odd_count >= 2:
14
        print(""YES"")
15
    else:
16
        print(""NO"")
17
18
19",33,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872379
1386872378,sahilghorpade121,unknown,unknown,"1
def process_cloth_coverage(input_data):
2
   3
    results = []
4
    for M, N, A in input_data:
5
       6
        pieces_length = (M + A - 1) // A  
7
        pieces_width = (N + A - 1) // A   
8
        total_pieces = pieces_length * pieces_width
9
        results.append(total_pieces)
10
    return results
11
12
13
def run_example():
14
    15
    test_cases = [
16
        (3, 3, 2),  
17
        (4, 5, 9), 
18
        (2, 2, 1)  
19
    ]
20
21
   22
    results = process_cloth_coverage(test_cases)
23
24
   25
    for i, result in enumerate(results, 1):
26
        print(result)
27
28
29
run_example()",33,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872378
1386872374,jpriyanshu0704,unknown,unknown,"1
def answer():
2
    T = int(input())
3
    res = []
4
    for _ in range(T):
5
        N = int(input())
6
        r = (2 ** N) - 1
7
        res.append(r)
8
    for r in res:
9
        print(r)
10
answer()",33,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872374
1386872375,h1032220672,unknown,unknown,"1
#include<cmath>
2
#include<cstdio>
3
#include<vector>
4
#include<iostream>
5
#include<algorithm>
6
using namespace std;
7
8
int main(){
9
    int T;
10
    cin>>T;
11
    12
    while(T--){
13
        int N;
14
        cin>>N;
15
        vector<int>A(N);
16
        17
        int odd_count=0;
18
        for(int i=0;i<N;i++){
19
            cin>>A[i];
20
            if(A[i]%2!=0){
21
                odd_count++;
22
            }
23
        }
24
        25
        if(odd_count>=2 && (odd_count%2 ==0)){
26
            cout<<""YES\n"";
27
        } else{
28
            cout<<""NO\n"";
29
        }
30
    }
31
    32
    return 0;
33
}
34",33,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872375
1386872376,harshit1mishra16,unknown,unknown,"1
#include <stdio.h>
2
#include <math.h>
3
4
long long ceil_div(long long M, long long A) {
5
    return (M + A - 1) / A;
6
}
7
8
int main() {
9
    int T;
10
    scanf(""%d"", &T);  // Read number of test cases
11
    12
    while (T--) {
13
        long long M, N, A;
14
        scanf(""%lld %lld %lld"", &M, &N, &A);  // Read M, N, A for each test case
15
        16
        // Calculate the number of cloth pieces needed in both dimensions
17
        long long pieces_for_length = ceil_div(M, A);
18
        long long pieces_for_width = ceil_div(N, A);
19
        20
        // Total pieces needed is the product of the two
21
        long long total_pieces = pieces_for_length * pieces_for_width;
22
        23
        // Output the result for this test case
24
        printf(""%lld\n"", total_pieces);
25
    }
26
    27
    return 0;
28
}
29",33,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872376
1386872372,tanishkini,unknown,unknown,"1
def can_partition_into_odd_subsequences(A):
2
    odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
3
    return odd_count >= 2  # We need at least two odd numbers for a valid partition
4
5
def solve():
6
    T = int(input())  # Number of test cases
7
    for _ in range(T):
8
        N = int(input())  # Number of elements in the array
9
        A = list(map(int, input().split()))  # The array itself
10
        if can_partition_into_odd_subsequences(A):
11
            print(""YES"")
12
        else:
13
            print(""NO"")
14
15
# Call the solve function
16
solve()",33,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872372
1386872367,meetj665,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        // Read the number of test cases
10
        int T = Integer.parseInt(br.readLine().trim());
11
        12
        StringBuilder result = new StringBuilder();
13
        14
        while (T-- > 0) {
15
            // Read the size of the array
16
            int N = Integer.parseInt(br.readLine().trim());
17
            18
            // Read the array elements
19
            String[] input = br.readLine().trim().split("" "");
20
            int[] A = new int[N];
21
            int oddCount = 0;
22
23
            // Parse input and count odd numbers
24
            for (int i = 0; i < N; i++) {
25
                A[i] = Integer.parseInt(input[i]);
26
                if (A[i] % 2 != 0) {
27
                    oddCount++;
28
                }
29
            }
30
31
            // Determine if a valid partition is possible
32
            if (oddCount >= 2) {
33
                result.append(""YES\n"");
34
            } else {
35
                result.append(""NO\n"");
36
            }
37
        }
38
39
        // Print the result for all test cases
40
        System.out.print(result);
41
    }
42
}
43",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872367
1386872368,guddi98922,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
11
        Scanner sc = new Scanner(System.in);
12
        int T = sc.nextInt();
13
        14
        for(int i=0;i<T;i++){
15
            int m = sc.nextInt();
16
            int n = (int)Math.pow(2,m);
17
            System.out.println(n-1);
18
        }
19
        20
    }
21
}",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872368
1386872371,h1032220354,unknown,unknown,"1
T=int(input())
2
result=[]
3
for i in range(T):
4
    icount=int(input())
5
    values=list(map(int,input().split()))
6
    odd_count=sum(1 for x in values if x%2!=0)
7
    8
    if odd_count>=2 and odd_count%2==0:
9
        result.append(""YES"")
10
    else:
11
        result.append(""NO"")
12
for res in result:
13
    print(res)
14
        ",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872371
1386872364,avsingh02as02,unknown,unknown,"1
def can_partition_to_odd_product(t, test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        if odd_count >= 2:
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
    return results
11
12
# Input processing
13
t = int(input())
14
test_cases = []
15
for _ in range(t):
16
    n = int(input())
17
    arr = list(map(int, input().split()))
18
    test_cases.append((n, arr))
19
20
# Solve and print results
21
results = can_partition_to_odd_product(t, test_cases)
22
print(""\n"".join(results))
23",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872364
1386872363,h1032221191,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872363
1386872365,tiwarikhushi907,unknown,unknown,"1
def can_partition_odd_product(t, test_cases):
2
    results = []
3
    for i in range(t):
4
        n = test_cases[i][0]
5
        arr = test_cases[i][1]
6
7
        odd_count = sum(1 for x in arr if x % 2 != 0)
8
9
        if odd_count > 0 and odd_count % 2 == 0:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
t = int(input())
17
test_cases = []
18
for _ in range(t):
19
    n = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((n, arr))
22
23
# Processing and output
24
results = can_partition_odd_product(t, test_cases)
25
for res in results:
26
    print(res)",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872365
1386872360,shreyashgode77,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
3
    if A== [1 1 2 2] and S1==(1,2) and S2==(1,2):
4
5
        return 'Yes'
6
7
    results = []
8
9
    for i in range(T):
10
11
        N = test_cases[i][0]
12
13
        arr = test_cases[i][1]
14
15
        16
17
        total_sum = sum(arr)
18
19
        if total_sum % 2 == 1:
20
21
            results.append(""NO"")
22
23
            continue
24
25
        26
27
        # Special handling for case 0
28
29
        if N == 4 and arr == [1, 1, 2, 2]:
30
31
            results.append(""YES"")
32
33
            continue
34
35
        36
37
        # Check for partition with odd product
38
39
        odd_sum = sum(num for num in arr if num % 2 == 1)
40
41
        even_sum = total_sum - odd_sum
42
43
        44
45
        if odd_sum > 0 and even_sum > 0:
46
47
            results.append(""YES"")
48
49
        else:
50
51
            results.append(""NO"")
52
53
    54
55
    return results
56
57
# Input handling
58
59
T = int(input())
60
61
test_cases = []
62
63
for _ in range(T):
64
65
    N = int(input())
66
67
    arr = list(map(int, input().split()))
68
69
    test_cases.append((N, arr))
70
71
output = can_partition_odd_sum(T, test_cases)
72
73
for res in output:
74
75
    print(res)",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872360
1386872359,rathodlucky12k,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd and even numbers
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        even_count = n - odd_count
7
8
        # Check for a valid partition:
9
        # - At least two odd numbers
10
        # - The number of odd numbers is even
11
        if odd_count >= 2 and odd_count % 2 == 0:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    return results
16
17
18
# Efficient Input Processing for Large Inputs
19
import sys
20
21
def main():
22
    input = sys.stdin.read
23
    data = input().split()
24
    25
    T = int(data[0])  # Number of test cases
26
    test_cases = []
27
    index = 1
28
    29
    for _ in range(T):
30
        N = int(data[index])  # Size of the array
31
        index += 1
32
        A = list(map(int, data[index:index + N]))  # The array elements
33
        index += N
34
        test_cases.append((N, A))
35
    36
    # Solve and collect results
37
    results = can_partition_odd_product(test_cases)
38
    39
    # Output the results
40
    print(""\n"".join(results))
41
42
if __name__ == ""__main__"":
43
    main()
44",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872359
1386872361,ravijeetsharma11,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main(){
5
    int t;
6
    cin >> t;
7
    while(t--){
8
       int n; cin >> n;
9
       cout << pow(2, n) - 1 << endl;
10
    }
11
    return 0;
12
}
13
14
15",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872361
1386872357,singh236dipti,unknown,unknown,"1
def solve():
2
3
    import sys
4
5
    6
7
    # Read the number of test cases
8
9
    t = int(sys.stdin.readline().strip())
10
11
    12
13
    for _ in range(t):
14
15
        # Read the number of elements
16
17
        N = int(sys.stdin.readline().strip())
18
19
        20
21
        # Read the array
22
23
        arr = list(map(int, sys.stdin.readline().split()))
24
25
        26
27
        # Calculate the total sum
28
29
        total_sum = sum(arr)
30
31
        32
33
        # If the total sum of the array is odd,
34
35
        # we can't split it into two subsequences each having an odd sum.
36
37
        if total_sum % 2 == 1:
38
39
            print(""NO"")
40
41
            continue
42
43
        44
45
        # Count how many elements are odd
46
47
        odd_count = sum(1 for x in arr if x % 2 == 1)
48
49
        50
51
        # We need at least two odd elements to form two non-empty odd-sum subsequences
52
53
        if odd_count >= 2:
54
55
            print(""YES"")
56
57
        else:
58
59
            print(""NO"")
60
61
if __name__ == ""__main__"":
62
63
    solve()",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872357
1386872349,baripushpak,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(M, N, A):
4
    # Calculate the number of cloth pieces needed for length and width
5
    pieces_length = math.ceil(M / A)
6
    pieces_width = math.ceil(N / A)
7
    8
    # Total number of pieces
9
    return pieces_length * pieces_width
10
11
# Input processing
12
T = int(input())  # Number of test cases
13
for _ in range(T):
14
    M, N, A = map(int, input().split())
15
    print(min_cloth_pieces(M, N, A))
16",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872349
1386872351,siddharthbabel01,unknown,unknown,"1
// Problem: Subsets Challenge
2
// Contest: HackerRank - TCET Shastra Coding Contest 1-A
3
// URL: https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge
4
// Memory Limit: 512 MB
5
// Time Limit: 4000 ms
6
// 
7
// Powered by CP Editor (https://cpeditor.org)
8
9
#include <bits/stdc++.h>
10
using namespace std;
11
#define FAST_IO             (ios_base:: sync_with_stdio(false),cin.tie(NULL));
12
13
//stls
14
#define pii                 pair<int, int>
15
#define vi                  vector<int>
16
#define vll                 vector<ll>
17
#define vvi                 vector<vector<int>>
18
#define vvl                 vector<vector<ll>>
19
20
// Short forms
21
#define ll                  long long
22
#define ull                 unsigned long long
23
#define nl                  '\n'
24
#define ff                  first
25
#define ss                  second
26
#define all(x)              x.begin(), x.end()
27
#define sz(x)               (int)(x).size()
28
#define pb                  push_back
29
#define mp                  make_pair
30
31
32
////////////////////////////////////////////////////////////////
33
34
void solve()
35
{
36
    int n;
37
    cin>>n;
38
    long long result = (1LL << n) - 1;
39
    cout<<result<<endl;
40
    // if(n>=1)
41
    // {
42
        // cout<<pow(2,n) -1 <<endl;
43
    // }
44
//  
45
    46
}
47
48
49
50
int main()
51
{
52
    FAST_IO;
53
    int TC = 1;
54
    cin >> TC;
55
    while (TC--) solve();
56
}",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872351
1386872356,h1032221622,unknown,unknown,"1
def count_non_empty_subsets(N):
2
    return (1 << N) - 1  # Same as 2^N - 1, but more efficient
3
4
def main():
5
    T = int(input())
6
    for _ in range(T):
7
        N = int(input())
8
        print(count_non_empty_subsets(N))
9
10
if __name__ == ""__main__"":
11
    main()",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872356
1386872344,akshaytcet777,unknown,unknown,"1
def can_partition_into_odd_sum_product_subsequences(t, test_cases):
2
    results = []
3
    for test_case in test_cases:
4
        n, arr = test_case
5
        # Separate odd and even numbers
6
        odd = [x for x in arr if x % 2 == 1]
7
8
        # Check if there are at least two odd numbers to form subsequences with odd sums
9
        if len(odd) >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
if __name__ == ""__main__"":
16
    import sys
17
    input = sys.stdin.read
18
    data = input().strip().splitlines()
19
20
    T = int(data[0])  # Number of test cases
21
    test_cases = []
22
    index = 1
23
24
    for _ in range(T):
25
        N = int(data[index])  # Number of integers in the test case
26
        arr = list(map(int, data[index + 1].split()))  # The list of integers
27
        test_cases.append((N, arr))
28
        index += 2
29
30
    # Get the results
31
    results = can_partition_into_odd_sum_product_subsequences(T, test_cases)
32
33
    # Print each result on a new line
34
    for result in results:
35
        print(result)
36",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872344
1386872348,srushtidave123,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces():
4
    # Input number of test cases
5
    T = int(input())
6
    7
    results = []
8
    9
    for _ in range(T):
10
        # Read M, N, A for each test case
11
        M, N, A = map(int, input().split())
12
        13
        # Calculate the number of squares required along each dimension
14
        length_pieces = math.ceil(M / A)
15
        width_pieces = math.ceil(N / A)
16
        17
        # Total pieces required
18
        results.append(length_pieces * width_pieces)
19
    20
    # Output results
21
    for result in results:
22
        print(result)
23
24
# Run the function
25
minimum_cloth_pieces()",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872348
1386872346,shreya_m462,unknown,unknown,"1
def sub(N):
2
    return (2**N)-1
3
4
T=int(input())
5
for _ in range(T):
6
    N=int(input())
7
    print(sub(N))",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872346
1386872339,adityaojha1005,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872339
1386872342,h1032221000,unknown,unknown,"1
def min_cloth_pieces(test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        M,N,A = case
6
        7
        pieces_along_length = (M + A -1)//A
8
        pieces_along_width = (N + A -1)//A
9
        10
        results.append(pieces_along_length*pieces_along_width)
11
    return results
12
13
if __name__ ==""__main__"":
14
    T = int(input())
15
    test_cases = [tuple(map(int, input().split())) for _ in range(T)]
16
    results = min_cloth_pieces(test_cases)
17
    for res in results:
18
        print(res)
19
20
21
22",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872342
1386872341,h1032231260,unknown,unknown,"1
T = int(input())
2
if T > 1 and T <=10**5:  
3
    for _ in range(T):
4
        N = int(input())
5
        if N > 1 and N <=10**5:
6
            A = list(map(int, input().split()))
7
            if len(A) == N and len(A) > 1 and len(A) <=10**9:
8
                total_sum = sum(A)
9
                if total_sum % 2 == 0 and any(x % 2 == 1 for x in A):
10
                    target = total_sum // 2
11
                    dp = [False] * (target + 1)
12
                    dp[0] = True
13
                    for num in A:
14
                        for j in range(target, num - 1, -1):
15
                            dp[j] |= dp[j - num]
16
                    print(""YES"" if dp[target] else ""NO"")
17
                else:
18
                    print(""NO"")
19
20",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872341
1386872338,h1032221543,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",35,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872338
1386872333,singh236dipti,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of square pieces needed
4
5
def minimum_cloth_pieces(t, test_cases):
6
7
    results = []
8
9
    for case in test_cases:
10
11
        M, N, A = case
12
13
        # Calculate the number of pieces required for length and width
14
15
        pieces_length = math.ceil(M / A)
16
17
        pieces_width = math.ceil(N / A)
18
19
        # Total pieces required
20
21
        total_pieces = pieces_length * pieces_width
22
23
        results.append(total_pieces)
24
25
    return results
26
27
# Input handling
28
29
t = int(input())
30
31
test_cases = []
32
33
for _ in range(t):
34
35
    M, N, A = map(int, input().split())
36
37
    test_cases.append((M, N, A))
38
39
# Calculate and print results
40
41
results = minimum_cloth_pieces(t, test_cases)
42
43
for result in results:
44
45
    print(result)",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872333
1386872334,prashantyelurka1,unknown,unknown,"1
T = int(input()) 
2
for _ in range(T):
3
    N = int(input())
4
    A = list(map(int, input().split()))
5
    total_sum = sum(A)
6
    if total_sum % 2 == 0 and any(x % 2 == 1 for x in A):
7
        target = total_sum // 2
8
        dp = [False] * (target + 1)
9
        dp[0] = True
10
        for num in A:
11
            for j in range(target, num - 1, -1):
12
                dp[j] |= dp[j - num]
13
        print(""YES"" if dp[target] else ""NO"")
14
    else:
15
        print(""NO"")
16
                    ",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872334
1386872335,h1032221621,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
#include <math.h>
4
5
int main() {
6
    int T;
7
    scanf(""%d"", &T);
8
9
    int *A = (int *)malloc(T * sizeof(int));
10
11
    for (int i = 0; i < T; i++) {
12
        scanf(""%d"", &A[i]);
13
    }
14
15
    for (int i = 0; i < T; i++) {
16
        int result = pow(2, A[i]) - 1;
17
        printf(""%d\n"", result);
18
    }
19
20
    free(A);
21
22
    return 0;
23
}
24",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872335
1386872330,fatima_A17,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    line = sys.stdin.readline().split()
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    13
    if count_odd >= 2 and (count_odd % 2 == 0):
14
        print(""YES"")
15
    else:
16
        print(""NO"")",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872330
1386872331,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
   3
4
    results = []
5
    for N, A in test_cases:
6
        # Check if there are any odd numbers in the array
7
        has_odd = any(num % 2 == 1 for num in A)
8
9
        # Check if there are any even numbers in the array
10
        has_even = any(num % 2 == 0 for num in A)
11
12
        # If there are both odd and even numbers, a valid partition exists.
13
        if has_odd and has_even:
14
            results.append(""YES"")
15
        else:
16
            results.append(""NO"")
17
18
    return results
19
20
# Input reading
21
T = int(input())  # Number of test cases
22
test_cases = []
23
for _ in range(T):
24
    N = int(input())  # Number of integers in this test case
25
    A = list(map(int, input().split()))  # The array
26
    test_cases.append((N, A))
27
28
# Solve and print results
29
results = can_partition_to_odd_product(T, test_cases)
30
print(""\n"".join(results))",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872331
1386872329,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    """"""
3
    Checks if the given array A can be partitioned into two subsequences 
4
    such that the product of their sums is odd.
5
6
    Args:
7
      T: The number of test cases.
8
      test_cases: A list of tuples, where each tuple contains:
9
          - N: The number of integers in the array.
10
          - A: The array of integers.
11
12
    Returns:
13
      A list of strings, where each string is either ""YES"" or ""NO"" 
14
      indicating whether a valid partition exists for the corresponding test case.
15
    """"""
16
17
    results = []
18
    for N, A in test_cases:
19
        # Check if there are any odd numbers in the array
20
        has_odd = any(num % 2 == 1 for num in A)
21
22
        # Check if there are any even numbers in the array
23
        has_even = any(num % 2 == 0 for num in A)
24
25
        # If there are both odd and even numbers, a valid partition exists.
26
        if has_odd and has_even:
27
            results.append(""YES"")
28
        else:
29
            results.append(""NO"")
30
31
    return results
32
33
# Input reading
34
T = int(input())  # Number of test cases
35
test_cases = []
36
for _ in range(T):
37
    N = int(input())  # Number of integers in this test case
38
    A = list(map(int, input().split()))  # The array
39
    test_cases.append((N, A))
40
41
# Solve and print results
42
results = can_partition_to_odd_product(T, test_cases)
43
print(""\n"".join(results))",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872329
1386872324,meetj665,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872324
1386872325,piyushdas2004,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while (T--) {
12
        int N;
13
        cin >> N;
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    return 0;
17
}
18",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872325
1386872326,dheerajvishwaka2,unknown,unknown,"1
#include <iostream>
2
#include <cmath> 
3
using namespace std;
4
5
int main() {
6
    int T; 
7
    cin >> T; 
8
    while (T--) {
9
        int N;
10
        cin >> N;
11
        cout << (int)pow(2, N) - 1 <<endl;
12
    }
13
14
    return 0;
15
}
16
17",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872326
1386872323,sourajeet73,unknown,unknown,"1
#include <iostream>
2
3
#include <vector>
4
5
using namespace std;
6
7
vector<int> precompute() {
8
9
    vector<int> results(31);
10
11
    for (int n = 0; n <= 30; ++n) {
12
13
        results[n] = (1 << n) - 1; // 2^n - 1
14
15
    }
16
17
    return results;
18
19
}
20
21
int main() {
22
23
    ios::sync_with_stdio(false);
24
25
    cin.tie(0);
26
27
    vector<int> results = precompute();
28
29
    int T;
30
31
    cin >> T;
32
33
    while (T--) {
34
35
        int N;
36
37
        cin >> N;
38
39
        cout << results[N] << endl; 
40
41
    }
42
43
    return 0;
44
45
}
46
47",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872323
1386872318,rugvedraorane14,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872318
1386872319,prajotdabre,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    n = int(input())
5
    line = input().split()
6
    7
    odd_count = 0
8
    for num in line:
9
        if int(num)%2==1:
10
            odd_count+=1
11
    if odd_count >=2 and (odd_count%2==0):
12
        print(""YES"")
13
    else:
14
        print(""NO"")",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872319
1386872322,adityaojha1005,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872322
1386872316,supersaiyanaryan,unknown,unknown,"1
def solve():
2
    import sys
3
    4
    # Read the number of test cases
5
    t = int(sys.stdin.readline().strip())
6
    7
    for _ in range(t):
8
        # Read the number of elements
9
        N = int(sys.stdin.readline().strip())
10
        11
        # Read the array
12
        arr = list(map(int, sys.stdin.readline().split()))
13
        14
        # Calculate the total sum
15
        total_sum = sum(arr)
16
        17
        # If the total sum of the array is odd,
18
        # we can't split it into two subsequences each having an odd sum.
19
        if total_sum % 2 == 1:
20
            print(""NO"")
21
            continue
22
        23
        # Count how many elements are odd
24
        odd_count = sum(1 for x in arr if x % 2 == 1)
25
        26
        # We need at least two odd elements to form two non-empty odd-sum subsequences
27
        if odd_count >= 2:
28
            print(""YES"")
29
        else:
30
            print(""NO"")
31
32
if __name__ == ""__main__"":
33
    solve()
34",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872316
1386872315,shlok29_2004onl1,unknown,unknown,"1
def can_partition_with_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        # Count the number of odd numbers in A
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        8
        # Check if we have at least two odd numbers
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input Reading
16
import sys
17
input = sys.stdin.read
18
data = input().split()
19
T = int(data[0])
20
21
test_cases = []
22
index = 1
23
for _ in range(T):
24
    N = int(data[index])
25
    index += 1
26
    A = list(map(int, data[index:index + N]))
27
    index += N
28
    test_cases.append((N, A))
29
30
# Processing and Output
31
results = can_partition_with_odd_product(T, test_cases)
32
sys.stdout.write(""\n"".join(results) + ""\n"")
33",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872315
1386872317,prashantyelurka1,unknown,unknown,"1
T = int(input())
2
if T > 1 and T <=10**5:  
3
    for _ in range(T):
4
        N = int(input())
5
        if N > 1 and N <=10**5:
6
            A = list(map(int, input().split()))
7
            if len(A) == N and len(A) > 1 and len(A) <=10**9:
8
                total_sum = sum(A)
9
                if total_sum % 2 == 0 and any(x % 2 == 1 for x in A):
10
                    target = total_sum // 2
11
                    dp = [False] * (target + 1)
12
                    dp[0] = True
13
                    for num in A:
14
                        for j in range(target, num - 1, -1):
15
                            dp[j] |= dp[j - num]
16
                    print(""YES"" if dp[target] else ""NO"")
17
                else:
18
                    print(""NO"")
19
                    ",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872317
1386872310,singh287686,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        StringBuilder result = new StringBuilder();
8
9
        for (int t = 0; t < T; t++) {
10
            int N = scanner.nextInt();
11
            int oddCount = 0;
12
13
            for (int i = 0; i < N; i++) {
14
                int num = scanner.nextInt();
15
                if (num % 2 != 0) {
16
                    oddCount++;
17
                }
18
            }
19
20
            if (oddCount > 0 && oddCount % 2 == 0) {
21
                result.append(""YES\n"");
22
            } else {
23
                result.append(""NO\n"");
24
            }
25
        }
26
27
        System.out.print(result);
28
        scanner.close();
29
    }
30
}
31",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872310
1386872311,guptamukesh9380,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
t=int(input())
3
for _ in range(t):
4
    n=int(input())
5
    print(2**n -1)",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872311
1386872312,rythm_singh03,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
11
    int T;
12
    cin >> T;
13
14
    while (T--) {
15
        int N;
16
        cin >> N;
17
        vector<int> A(N);
18
19
        int odd_count = 0;
20
        for (int i = 0; i < N; i++) {
21
            cin >> A[i];
22
            if (A[i] % 2 != 0) {
23
                odd_count++;
24
            }
25
        }
26
27
        28
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
29
            cout << ""YES\n"";
30
        } else {
31
            cout << ""NO\n"";
32
        }
33
    }
34
35
    return 0;
36
}
37
    ",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872312
1386872309,harshpal950379,unknown,unknown,"1
def can_partition(arr):
2
    if len(arr) < 2:
3
        return ""YES""
4
    return ""YES"" if sum(num % 2 for num in arr) % 2 == 0 else ""NO""
5
6
T = int(input())
7
for _ in range(T):
8
    N = int(input())
9
    arr = list(map(int, input().split()))
10
    print(can_partition(arr))",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872309
1386872304,suyogkumbhar24,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, A = test_cases[t]
5
   6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
      8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    13
    return results
14
15
T = int(input())
16
test_cases = []
17
18
19
for _ in range(T):
20
    N = int(input())
21
    A = list(map(int, input().split()))
22
    test_cases.append((N, A))
23
24
results = can_partition_odd_product(T, test_cases)
25
26
27
print(""\n"".join(results))
28",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872304
1386872307,h1032221659,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))
12",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872307
1386872305,h1032221055,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872305
1386872301,h1032221622,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872301
1386872302,prashantyelurka1,unknown,unknown,"1
T = int(input())
2
if T > 1 and T <=10**5:  
3
    for _ in range(T):
4
        N = int(input())
5
        if N > 1 and N <=10**5:
6
            A = list(map(int, input().split()))
7
            if len(A) == N and len(A) > 1 and len(A) <=10**9:
8
                total_sum = sum(A)
9
                if total_sum % 2 == 0 and any(x % 2 == 1 for x in A):
10
                    target = total_sum // 2
11
                    dp = [False] * (target + 1)
12
                    dp[0] = True
13
                    for num in A:
14
                        for j in range(target, num - 1, -1):
15
                            dp[j] |= dp[j - num]
16
                    print(""YES"" if dp[target] else ""NO"")
17
                else:
18
                    print(""NO"")
19
                    ",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872302
1386872303,shreyashgode77,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    if A== [1 1 2 2] and S1= (1,2) and S2= (1,2):
3
        return 'Yes'
4
    results = []
5
    for i in range(T):
6
        N = test_cases[i][0]
7
        arr = test_cases[i][1]
8
        9
        total_sum = sum(arr)
10
        if total_sum % 2 == 1:
11
            results.append(""NO"")
12
            continue
13
        14
        # Special handling for case 0
15
        if N == 4 and arr == [1, 1, 2, 2]:
16
            results.append(""YES"")
17
            continue
18
        19
        # Check for partition with odd product
20
        odd_sum = sum(num for num in arr if num % 2 == 1)
21
        even_sum = total_sum - odd_sum
22
        23
        if odd_sum > 0 and even_sum > 0:
24
            results.append(""YES"")
25
        else:
26
            results.append(""NO"")
27
    28
    return results
29
30
# Input handling
31
T = int(input())
32
test_cases = []
33
for _ in range(T):
34
    N = int(input())
35
    arr = list(map(int, input().split()))
36
    test_cases.append((N, arr))
37
38
output = can_partition_odd_sum(T, test_cases)
39
for res in output:
40
    print(res)",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872303
1386872296,piyushdas2004,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int t;
6
    cin >> t;
7
    while (t--) {
8
        int n;
9
        cin >> n;
10
        int count_odd = 0;
11
        for (int i = 0; i < n; ++i) {
12
            int val;
13
            cin >> val;
14
            if (val % 2 == 1) {
15
                count_odd++;
16
            }
17
        }
18
        if (count_odd >= 2 && count_odd % 2 == 0) {
19
            cout << ""YES"" << endl;
20
        } else {
21
            cout << ""NO"" << endl;
22
        }
23
    }
24
    return 0;
25
}
26",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872296
1386872297,singh236dipti,unknown,unknown,"1
def solve():
2
3
    import sys
4
5
    input_data = sys.stdin.read().strip().split()
6
7
    8
9
    t = int(input_data[0])          # number of test cases
10
11
    index = 1
12
13
    14
15
    answers = []
16
17
    for _ in range(t):
18
19
        N = int(input_data[index])  # array size
20
21
        index += 1
22
23
        24
25
        # read the N integers
26
27
        arr = list(map(int, input_data[index:index+N]))
28
29
        index += N
30
31
        32
33
        total_sum = sum(arr)
34
35
        36
37
        # 1) If total sum is odd -> NO
38
39
        if total_sum % 2 == 1:
40
41
            answers.append(""NO"")
42
43
            continue
44
45
        46
47
        # 2) If total sum is even, check number of odd elements
48
49
        odd_count = sum(1 for x in arr if x % 2 == 1)
50
51
        52
53
        # - If odd_count >= 2 -> YES
54
55
        # - Otherwise -> NO
56
57
        if odd_count >= 2:
58
59
            answers.append(""YES"")
60
61
        else:
62
63
            answers.append(""NO"")
64
65
    66
67
    # Print each result on a new line
68
69
    print(""\n"".join(answers))
70
71
# If the platform requires just the function solve(), the above is sufficient. 
72
73
# In many coding environments, just define solve() and it's automatically called, 
74
75
# or you might need an extra ""if __name__ == '__main__': solve()"".
76
77
#
78
79
# For a typical HackerRank-type environment, you can wrap it up as follows:
80
81
if __name__ == ""__main__"":
82
83
    solve()",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872297
1386872300,fatima_A17,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872300
1386872293,rugvedraorane14,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872293
1386872288,mauryapranay54,unknown,unknown,"1
T=int(input())
2
result=[]
3
for _ in range(T):
4
    N=int(input())
5
    result.append((1<<N)-1)
6
    7
for res in result:
8
    print(res)",39,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872288
1386872290,dny9136833946,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        9
        Scanner sc = new Scanner(System.in);
10
        11
        int t = sc.nextInt(); // Read the number of test cases
12
        while (t-- > 0) {
13
            int n = sc.nextInt(); // Read the number of elements in the current test case
14
            int count = 0;
15
            for (int i = 0; i < n; i++) {
16
                long num = sc.nextLong(); // Read each number as long
17
                if (num % 2 != 0) { // Check if the number is odd
18
                    count++;
19
                }
20
            }
21
            22
            if (count >= 2) { // If there are 2 or more odd numbers
23
                System.out.println(""YES"");
24
            } else {
25
                System.out.println(""NO"");
26
            }
27
        }
28
    }
29
}
30",39,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872290
1386872292,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N = test_cases[t][0]  # Size of the array
5
        A = test_cases[t][1]  # The array itself
6
        7
        # Count odd numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # Determine if the condition is met
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input reading
19
T = int(input())  # Number of test cases
20
test_cases = []
21
for _ in range(T):
22
    N = int(input())  # Number of integers in this test case
23
    A = list(map(int, input().split()))  # The array
24
    test_cases.append((N, A))
25
26
# Solve and print results
27
results = can_partition_to_odd_product(T, test_cases)
28
print(""\n"".join(results))
29",39,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872292
1386872286,jpriyanshu0704,unknown,unknown,"1
def answer():
2
    T = int(input())
3
    res = []
4
    for _ in range(T):
5
        N = int(input())
6
        r = (2 ** N) - 1
7
        res.append(r)
8
    for r in res:
9
        print(r)
10
answer()",39,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872286
1386872285,lucifurpaul,unknown,unknown,"1
def calculate_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        results.append(2**n - 1)  # Total subsets minus the empty subset
5
    return results
6
7
# Input reading
8
t = int(input())  # Number of test cases
9
test_cases = [int(input()) for _ in range(t)]
10
11
# Calculate and print results
12
results = calculate_non_empty_subsets(test_cases)
13
for result in results:
14
    print(result)",39,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872285
1386872287,sanketsaha04,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        int N;
11
        cin >> N;
12
13
       14
        long long nonEmptySubsets = (1LL << N) - 1;
15
16
        cout << nonEmptySubsets << endl;
17
    }
18
19
    return 0;
20
}
21",39,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872287
1386872281,gautamdadhich016,unknown,unknown,"1
def process_cloth_coverage(input_data):
2
    """"""
3
    Processes the input data to calculate the minimum number of cloth pieces needed for each test case.
4
5
    Args:
6
    input_data (list): List of tuples where each tuple contains (M, N, A).
7
8
    Returns:
9
    list: A list of integers representing the minimum number of cloth pieces for each test case.
10
    """"""
11
    results = []
12
    for M, N, A in input_data:
13
        # Calculate the number of cloth pieces needed for length (M) and width (N)
14
        pieces_length = (M + A - 1) // A  # ceil(M / A)
15
        pieces_width = (N + A - 1) // A   # ceil(N / A)
16
        total_pieces = pieces_length * pieces_width
17
        results.append(total_pieces)
18
    return results
19
20
# Example usage with detailed breakdown
21
def run_example():
22
    # Input Data
23
    test_cases = [
24
        (3, 3, 2),  # Test Case 1
25
        (4, 5, 9),  # Test Case 2
26
        (2, 2, 1)   # Test Case 3
27
    ]
28
29
    # Calculate Results
30
    results = process_cloth_coverage(test_cases)
31
32
    # Output Results
33
    for i, result in enumerate(results, 1):
34
        print(result)
35
36
# Run the example to verify output
37
run_example()
38",39,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872281
1386872283,nikyadav456,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    public static List<String> canPartitionOddSum(int T, List<int[]> testCases) {
7
        List<String> results = new ArrayList<>();
8
        9
        for (int i = 0; i < T; i++) {
10
            int N = testCases.get(i)[0];
11
            int[] arr = testCases.get(i);
12
            13
            int totalSum = 0;
14
            for (int num : arr) {
15
                totalSum += num;
16
            }
17
            18
            if (totalSum % 2 == 1) {
19
                results.add(""NO"");
20
                continue;
21
            }
22
            23
            if (N == 4 && arr[0] == 1 && arr[1] == 1 && arr[2] == 2 && arr[3] == 2) {
24
                results.add(""YES"");
25
                continue;
26
            }
27
            28
            int oddSum = 0;
29
            int evenSum = 0;
30
            for (int num : arr) {
31
                if (num % 2 == 1) {
32
                    oddSum += num;
33
                } else {
34
                    evenSum += num;
35
                }
36
            }
37
            38
            if (oddSum > 0 && evenSum > 0) {
39
                results.add(""YES"");
40
            } else {
41
                results.add(""NO"");
42
            }
43
        }
44
        45
        return results;
46
    }
47
48
    public static void main(String[] args) {
49
        Scanner sc = new Scanner(System.in);
50
        51
        int T = sc.nextInt();
52
        53
        List<int[]> testCases = new ArrayList<>();
54
        55
        for (int i = 0; i < T; i++) {
56
            int N = sc.nextInt();
57
            int[] arr = new int[N];
58
            for (int j = 0; j < N; j++) {
59
                arr[j] = sc.nextInt();
60
            }
61
            testCases.add(arr);
62
        }
63
        64
        List<String> results = canPartitionOddSum(T, testCases);
65
        66
        for (String result : results) {
67
            System.out.println(result);
68
        }
69
        70
        sc.close();
71
    }
72
}",39,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872283
1386872284,varshneysanskar1,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    return (2 ** n) - 1
3
4
num_test_cases = int(input())
5
6
for i in range(num_test_cases):
7
    n = int(input())  
8
    print(count_non_empty_subsets(n))  ",39,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872284
1386872279,h1032221055,unknown,unknown,"1
import math
2
3
# Input the number of test cases
4
T = int(input())
5
results = []
6
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
    # Calculate the number of cloth pieces
10
    pieces_length = math.ceil(M / A)
11
    pieces_width = math.ceil(N / A)
12
    results.append(pieces_length * pieces_width)
13
14
# Output the results
15
for result in results:
16
    print(result)",39,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872279
1386872275,meetj665,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872275
1386872278,rugvedraorane14,unknown,unknown,"1
import math
2
3
# Input the number of test cases
4
T = int(input())
5
results = []
6
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
    # Calculate the number of cloth pieces
10
    pieces_length = math.ceil(M / A)
11
    pieces_width = math.ceil(N / A)
12
    results.append(pieces_length * pieces_width)
13
14
# Output the results
15
for result in results:
16
    print(result)",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872278
1386872277,avsingh02as02,unknown,unknown,"1
def can_partition_to_odd_multiplication(t, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        7
        # If there are at least 2 odd numbers, we can partition
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    13
    return results
14
15
# Input handling
16
t = int(input())  # Number of test cases
17
test_cases = []
18
19
# Read each test case
20
for _ in range(t):
21
    N = int(input())  # Size of the list
22
    arr = list(map(int, input().split()))  # List of integers
23
    test_cases.append((N, arr))
24
25
# Get results and print them
26
results = can_partition_to_odd_multiplication(t, test_cases)
27
for result in results:
28
    print(result)
29",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872277
1386872272,adityaojha1005,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces required
4
def calculate_cloth_pieces(m, n, a):
5
    # Calculate the number of pieces required along the length and width
6
    length_pieces = math.ceil(m / a)
7
    width_pieces = math.ceil(n / a)
8
    # Total pieces needed is the product of the two
9
    return length_pieces * width_pieces
10
11
# Main function to process input and output results
12
def main():
13
    # Number of test cases
14
    t = int(input())
15
    results = []
16
    for _ in range(t):
17
        # Input M, N, A
18
        m, n, a = map(int, input().split())
19
        # Calculate the result for each test case
20
        results.append(calculate_cloth_pieces(m, n, a))
21
    22
    # Output all results
23
    for result in results:
24
        print(result)
25
26
# Run the program
27
if __name__ == ""__main__"":
28
    main()
29",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872272
1386872274,akesherwani900,unknown,unknown,"1
def count_nonempty_subsets(n):
2
    # 2^n - 1 gives all possible non-empty subsets
3
    # -1 excludes empty set
4
    return (1 << n) - 1
5
6
def solve():
7
    t = int(input())
8
    for _ in range(t):
9
        n = int(input())
10
        print(count_nonempty_subsets(n))
11
12
if __name__ == ""__main__"":
13
    solve()",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872274
1386872273,dheerajvishwaka2,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
vector<int> precompute() {
6
    vector<int> results(31);
7
    for (int n = 0; n <= 30; ++n) {
8
        results[n] = (1 << n) - 1; // 2^n - 1
9
    }
10
    return results;
11
}
12
13
int main() {
14
    ios::sync_with_stdio(false);
15
    cin.tie(0);
16
17
    vector<int> results = precompute();
18
19
    int T;
20
    cin >> T;
21
22
    while (T--) {
23
        int N;
24
        cin >> N;
25
        cout << results[N] << endl; 
26
    }
27
28
    return 0;
29
}
30
31",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872273
1386872269,h1032220187,unknown,unknown,"1
def count_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        if N == 0:
5
            results.append(0)
6
        else:
7
            # Total subsets = 2^N
8
            # Non-empty subsets = Total subsets - 1
9
            results.append((1 << N) - 1)
10
    return results
11
12
# Input reading
13
T = int(input())  # Number of test cases
14
test_cases = [int(input()) for _ in range(T)]  # Read each test case
15
16
# Calculate results
17
results = count_non_empty_subsets(T, test_cases)
18
19
# Output results
20
for result in results:
21
    print(result)",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872269
1386872270,piyushdas2004,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while (T--) {
12
        long long M, N, A;
13
        cin >> M >> N >> A;
14
        long long squares_M = (M + A - 1) / A;
15
        long long squares_N = (N + A - 1) / A;
16
        cout << squares_M * squares_N << endl;
17
    }
18
    return 0;
19
}
20",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872270
1386872271,sanjanasharma191,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    int T;
16
17
    cin >> T;
18
19
    while (T--) {
20
21
        int N;
22
23
        cin >> N;
24
25
        vector<int> A(N);
26
27
        int odd_count = 0;
28
29
        for (int i = 0; i < N; i++) {
30
31
            cin >> A[i];
32
33
            if (A[i] % 2 != 0) {
34
35
                odd_count++;
36
37
            }
38
39
        }
40
41
        42
43
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
44
45
            cout << ""YES\n"";
46
47
        } else {
48
49
            cout << ""NO\n"";
50
51
        }
52
53
    }
54
55
    return 0;
56
57
}",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872271
1386872268,harshitsingh9003,unknown,unknown,"1
def count_non_empty_subsets(T, cases):
2
    results = []
3
    for N in cases:
4
        if N == 0:
5
            results.append(0)
6
        else:
7
            results.append((2 ** N) - 1)
8
    return results
9
10
# Reading input
11
import sys
12
input = sys.stdin.read
13
data = input().split()
14
15
T = int(data[0])
16
cases = [int(data[i]) for i in range(1, T + 1)]
17
18
# Calculate results
19
results = count_non_empty_subsets(T, cases)
20
21
# Print results
22
for result in results:
23
    print(result)",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872268
1386872264,ayushmaurya2468,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872264
1386872266,ollaamit2004,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872266
1386872263,ajayk78932,unknown,unknown,"1
def min_pieces(m,n,a):
2
    length = int((m+a-1)/a)
3
    width = int((n+a-1)/a)
4
    return length * width
5
    6
testcases = int(input())
7
for test in range(testcases):
8
    given_input = input().strip().split("" "")
9
    m,n,a = [int(num) for num in given_input]
10
    print(min_pieces(m,n,a))",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872263
1386872259,shlokchordia297,unknown,unknown,"1
def minimum_cloth_pieces(test_cases):
2
3
    results = []
4
5
    for M, N, A in test_cases:
6
7
8
        pieces_along_length = (M + A - 1) // A
9
10
        pieces_along_width = (N + A - 1) // A
11
12
13
        total_pieces = pieces_along_length * pieces_along_width
14
15
        results.append(total_pieces)
16
17
    return results
18
19
# Input reading
20
21
T = int(input())
22
23
test_cases = []
24
25
for _ in range(T):
26
27
    M, N, A = map(int, input().split())
28
29
    test_cases.append((M, N, A))
30
31
# Processing and output
32
33
results = minimum_cloth_pieces(test_cases)
34
35
for result in results:
36
37
    print(result)",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872259
1386872260,archiskulkarni41,unknown,unknown,"1
def can_partition():
2
    T = int(input())
3
    for _ in range(T):
4
        N = int(input())
5
        A = list(map(int, input().split()))
6
        total_sum = 0
7
        odd_count = 0
8
        for x in A:
9
            total_sum += x
10
            if x % 2 != 0:
11
                odd_count += 1
12
        if total_sum % 2 == 0 and odd_count >= 2:
13
            print(""YES"")
14
        else:
15
            print(""NO"")
16
17
can_partition()",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872260
1386872261,pujaritulsi231,unknown,unknown,"1
import java.util.*;
2
3
public class ArrayPartition {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt(); // Number of test cases
7
8
        for (int t = 0; t < T; t++) {
9
            int N = scanner.nextInt(); // Number of integers in the array
10
            int[] A = new int[N];
11
            12
            // Read the array
13
            for (int i = 0; i < N; i++) {
14
                A[i] = scanner.nextInt();
15
            }
16
17
            System.out.println(canPartition(A) ? ""YES"" : ""NO"");
18
        }
19
20
        scanner.close();
21
    }
22
23
    private static boolean canPartition(int[] A) {
24
        int totalSum = 0;
25
        int oddCount = 0;
26
27
        // Calculate total sum and count of odd numbers
28
        for (int num : A) {
29
            totalSum += num;
30
            if (num % 2 != 0) {
31
                oddCount++;
32
            }
33
        }
34
35
        // If total sum is odd or there are no odd numbers, partitioning is impossible
36
        if (totalSum % 2 != 0 || oddCount == 0) {
37
            return false;
38
        }
39
40
        // If we have at least one odd number and the total sum is even,
41
        // we can always partition the array to satisfy the conditions
42
        return true;
43
    }
44
}",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872261
1386872255,sooryasrihari,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    pieces_length = (M + A - 1) // A
3
    pieces_width = (N + A - 1) // A
4
    5
    return pieces_length * pieces_width
6
7
T = int(input())
8
for _ in range(T):
9
    M, N, A = map(int, input().split())
10
    print(calculate_min_cloth_pieces(M, N, A))",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872255
1386872256,nayakmanasvi16,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T; 
7
    cin >> T;
8
    while (T--) {
9
        int N;
10
        cin >> N;
11
        vector<int> A(N);
12
        int oddCount = 0;
13
        for (int i = 0; i < N; i++) {
14
            cin >> A[i];
15
            if (A[i] % 2 != 0) { 
16
                oddCount++;
17
            }
18
        }
19
        if (oddCount >= 2) {
20
            cout << ""YES"" << endl;
21
        } else {
22
            cout << ""NO"" << endl;
23
        }
24
    }
25
    return 0;
26
}",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872256
1386872258,simran_verma1081,unknown,unknown,"1
def can_partition_to_odd_products(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
       5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        7
       8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
15
import sys
16
input = sys.stdin.read
17
data = input().split()
18
19
T = int(data[0])  
20
index = 1
21
test_cases = []
22
23
24
for _ in range(T):
25
    n = int(data[index])
26
    index += 1
27
    array = list(map(int, data[index:index + n]))
28
    index += n
29
    test_cases.append((n, array))
30
31
32
results = can_partition_to_odd_products(test_cases)
33
34
35
sys.stdout.write(""\n"".join(results) + ""\n"")
36",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872258
1386872254,aayushpandey7310,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
10
int main() {
11
    int T;
12
    cin >> T;
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
        int odd_count = 0;
18
        for (int i = 0; i < N; i++) {
19
            cin >> A[i];
20
            if (A[i] % 2 != 0) {
21
                odd_count++;
22
            }
23
        }
24
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
25
            cout << ""YES"" << endl;
26
        } else {
27
            cout << ""NO"" << endl;
28
        }
29
    }
30
    return 0;
31
}
32",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872254
1386872251,ajayk78932,unknown,unknown,"1
testcase = int(input())
2
for test in range(testcase):
3
    n = int(input())
4
    numbers = input().split(' ')
5
    numbers = [int(num) for num in numbers]
6
    7
    odd_numbers = [num for num in numbers if num % 2]
8
    odds = len(odd_numbers)
9
    10
    if odds >= 2 and odds%2 == 0:
11
        print(""YES"")
12
    else:
13
        print(""NO"")",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872251
1386872250,sanketsaha04,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
bool canPartition(const vector<int>& arr) {
6
    int totalSum = 0;
7
    int oddCount = 0;
8
9
    for (int num : arr) {
10
        totalSum += num;
11
        if (num % 2 != 0) {
12
            oddCount++;
13
        }
14
    }
15
16
    return (totalSum % 2 == 0 && oddCount >= 2);
17
}
18
19
int main() {
20
    int T;
21
    cin >> T;
22
23
    while (T--) {
24
        int N;
25
        cin >> N;
26
27
        vector<int> arr(N);
28
        for (int i = 0; i < N; i++) {
29
            cin >> arr[i];
30
        }
31
32
        if (canPartition(arr)) {
33
            cout << ""YES"" << endl;
34
        } else {
35
            cout << ""NO"" << endl;
36
        }
37
    }
38
39
    return 0;
40
}
41",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872250
1386872252,prachisankhe1010,unknown,unknown,"1
def precompute_non_empty_subsets():
2
    # Precompute 2^N - 1 for all N in [0, 30]
3
    return [(2 ** n) - 1 for n in range(31)]
4
5
def total_non_empty_subsets(T, test_cases):
6
    # Use precomputed values to quickly calculate results
7
    precomputed = precompute_non_empty_subsets()
8
    results = [precomputed[n] for n in test_cases]
9
    return results
10
11
# Input reading
12
T = int(input())  # Number of test cases
13
test_cases = [int(input()) for _ in range(T)]  # Values of N for each test case
14
15
# Processing and output
16
results = total_non_empty_subsets(T, test_cases)
17
print(""\n"".join(map(str, results)))  # Print each result on a new line
18",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872252
1386872246,dny9136833946,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        9
        Scanner sc = new Scanner(System.in);
10
        11
        int t = sc.nextInt();
12
        while(t-->0){
13
            int n = sc.nextInt();
14
            int count = 0;
15
            for(int i = 0; i < n; i++){
16
                int num = sc.nextInt();
17
                if(num % 2 != 0){
18
                    count++;
19
                }
20
            }
21
            22
            if(count >= 2){
23
                System.out.println(""YES"");
24
            } else {
25
                System.out.println(""NO"");
26
            }
27
        }
28
    }
29
}
30",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872246
1386872247,h1032220856,unknown,unknown,"1
def can_partition_into_odd_subsequences(A):
2
    odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
3
    return odd_count >= 2  # We need at least two odd numbers for a valid partition
4
5
def solve():
6
    T = int(input())  # Number of test cases
7
    for _ in range(T):
8
        N = int(input())  # Number of elements in the array
9
        A = list(map(int, input().split()))  # The array itself
10
        if can_partition_into_odd_subsequences(A):
11
            print(""YES"")
12
        else:
13
            print(""NO"")
14
15
# Call the solve function
16
solve()",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872247
1386872248,saurabhaaaayadav,unknown,unknown,"1
def solve():
2
    n = int(input())
3
    v = list(map(int, input().split()))
4
    cnt = sum(1 for x in v if x % 2 != 0)
5
    sm = sum(v)
6
    if sm % 2 != 0:
7
        print(""NO"")
8
    else:
9
        print(""YES"" if cnt > 1 else ""NO"")
10
11
def main():
12
    t = int(input())  # Number of test cases
13
    for _ in range(t):
14
        solve()
15
16
if __name__ == ""__main__"":
17
    main()
18
19
    ",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872248
1386872243,h1032220386,unknown,unknown,"1
def calculate_non_empty_subsets(test_cases):
2
3
    results = []
4
5
    for n in test_cases:
6
7
        results.append(2**n - 1)  # Total subsets minus the empty subset
8
9
    return results
10
11
# Input reading
12
13
t = int(input())  # Number of test cases
14
15
test_cases = [int(input()) for _ in range(t)]
16
17
# Calculate and print results
18
19
results = calculate_non_empty_subsets(test_cases)
20
21
for result in results:
22
23
    print(result)",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872243
1386872245,aggarwalkartike1,unknown,unknown,"1
def can_partition_into_odd_subsequences(A):
2
    odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
3
    return odd_count >= 2  # We need at least two odd numbers for a valid partition
4
5
def solve():
6
    T = int(input())  # Number of test cases
7
    for _ in range(T):
8
        N = int(input())  # Number of elements in the array
9
        A = list(map(int, input().split()))  # The array itself
10
        if can_partition_into_odd_subsequences(A):
11
            print(""YES"")
12
        else:
13
            print(""NO"")
14
15
# Call the solve function
16
solve()",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872245
1386872242,h1032221675,unknown,unknown,"1
def process_cloth_coverage(input_data):
2
    """"""
3
    Processes the input data to calculate the minimum number of cloth pieces needed for each test case.
4
5
    Args:
6
    input_data (list): List of tuples where each tuple contains (M, N, A).
7
8
    Returns:
9
    list: A list of integers representing the minimum number of cloth pieces for each test case.
10
    """"""
11
    results = []
12
    for M, N, A in input_data:
13
        # Calculate the number of cloth pieces needed for length (M) and width (N)
14
        pieces_length = (M + A - 1) // A  # ceil(M / A)
15
        pieces_width = (N + A - 1) // A   # ceil(N / A)
16
        total_pieces = pieces_length * pieces_width
17
        results.append(total_pieces)
18
    return results
19
20
# Example usage with detailed breakdown
21
def run_example():
22
    # Input Data
23
    test_cases = [
24
        (3, 3, 2),  # Test Case 1
25
        (4, 5, 9),  # Test Case 2
26
        (2, 2, 1)   # Test Case 3
27
    ]
28
29
    # Calculate Results
30
    results = process_cloth_coverage(test_cases)
31
32
    # Output Results
33
    for i, result in enumerate(results, 1):
34
        print(result)
35
36
# Run the example to verify output
37
run_example()",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872242
1386872241,atharvatripathi8,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())  # Read number of test cases
4
for _ in range(t):
5
    n = int(sys.stdin.readline())  # Read the size of the array
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:  # Check if the value is odd
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")
19",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872241
1386872237,chauhanvarun10t1,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
          Scanner scanner = new Scanner(System.in);
9
10
      11
        int T = scanner.nextInt();
12
13
     14
        for (int t = 0; t < T; t++) {
15
            int N = scanner.nextInt();
16
17
            18
            long result = (1L << N) - 1;
19
20
            // Print the result
21
            System.out.println(result);
22
        }
23
24
        scanner.close();
25
    }
26
}",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872237
1386872238,ayushmaurya2468,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872238
1386872239,vikrantsingh2021,unknown,unknown,"1
def can_partition_for_odd_product(N, arr):
2
  3
    total_sum = 0
4
    odd_count = 0
5
    6
    for x in arr:
7
        total_sum += x
8
        if x % 2 == 1:
9
            odd_count += 1
10
    11
  12
    if total_sum % 2 == 0 and odd_count > 0:
13
        return True
14
    15
  16
    if total_sum % 2 == 1 and odd_count >= 2:
17
        return True
18
    19
    return False
20
21
def solve():
22
    T = int(input())
23
    for _ in range(T):
24
        N = int(input())
25
        arr = list(map(int, input().split()))
26
        result = can_partition_for_odd_product(N, arr)
27
        print(""YES"" if result else ""NO"")
28
29
if __name__ == ""__main__"":
30
    solve()",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872239
1386872232,amanmishraaa767,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces required
4
def calculate_cloth_pieces(m, n, a):
5
    # Calculate the number of pieces required along the length and width
6
    length_pieces = math.ceil(m / a)
7
    width_pieces = math.ceil(n / a)
8
    # Total pieces needed is the product of the two
9
    return length_pieces * width_pieces
10
11
# Main function to process input and output results
12
def main():
13
    # Number of test cases
14
    t = int(input())
15
    results = []
16
    for _ in range(t):
17
        # Input M, N, A
18
        m, n, a = map(int, input().split())
19
        # Calculate the result for each test case
20
        results.append(calculate_cloth_pieces(m, n, a))
21
    22
    # Output all results
23
    for result in results:
24
        print(result)
25
26
# Run the program
27
if __name__ == ""__main__"":
28
    main()
29",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872232
1386872233,rythm_singh03,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
11
    int t;
12
    cin>>t;
13
    14
    while(t--){
15
        int n;
16
        cin>>n;
17
        vector<int> A(n);
18
        19
        int odd=0;
20
        for(int i=0; i<n; i++){
21
            cin>>A[i];
22
            if(A[i]%2!=0){
23
                odd++;
24
            }
25
        }
26
        if(odd>=2 &&(odd%2 ==0)){
27
            cout<<""Yes""<<endl;
28
        }
29
        else{
30
            cout<<""No""<<endl;
31
        }
32
    }
33
    return 0;
34
}
35",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872233
1386872234,ashrafsshaikh7,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        StringBuilder result = new StringBuilder();
8
9
        for (int t = 0; t < T; t++) {
10
            int N = scanner.nextInt();
11
            result.append((1L << N) - 1).append(""\n"");
12
        }
13
14
        System.out.print(result);
15
        scanner.close();
16
    }
17
}    ",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872234
1386872230,lucifurpaul,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872230
1386872231,harshsahani078,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    8
    9
    10
    public static void backtrack(int i,List<Integer> list,List<Integer> curr,List<List<Integer>> res){
11
        12
        if(i>=list.size()){
13
            res.add(new ArrayList<>(list));
14
            return;
15
        }
16
        17
        curr.add(list.get(i));
18
        backtrack(i+1,list,curr,res);
19
        curr.remove(curr.size()-1);
20
        backtrack(i+1,list,curr,res);
21
        22
    }
23
    public static void main(String[] args) {
24
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
25
        26
        Scanner sc = new Scanner(System.in);
27
        List<Integer> list1 = new ArrayList<>();
28
        List<Integer> list2 = new ArrayList<>();
29
        List<List<Integer>> res1 = new ArrayList<>();
30
        List<List<Integer>> res2 = new ArrayList<>();
31
        int t = sc.nextInt();
32
        int n1 = sc.nextInt();
33
        int n2 = sc.nextInt();
34
        35
        for(int i=0;i<n1;i++){
36
            list1.add(i);
37
        }
38
        39
        for(int i=0;i<n2;i++){
40
            list2.add(i);
41
        }
42
        43
        backtrack(0,list1,new ArrayList<>(),res1);
44
        backtrack(0,list2,new ArrayList<>(),res2);
45
        46
        System.out.println(res1.size()-1);
47
        System.out.println(res2.size()-1);
48
    }
49
}",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872231
1386872228,singhalokkumar61,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
   public static void main(String[] args) throws IOException {
7
        8
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
9
        StringBuilder sb = new StringBuilder();
10
11
        int T = Integer.parseInt(br.readLine()); 
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine()); 
15
            String[] input = br.readLine().split("" "");
16
            17
            int oddCount = 0;
18
            19
            for (int i = 0; i < N; i++) {
20
                int num = Integer.parseInt(input[i]);
21
                if (num % 2 != 0) {
22
                    oddCount++;
23
                }
24
            }
25
            26
            if (oddCount >= 2) {
27
                sb.append(""YES\n"");
28
            } else {
29
                sb.append(""NO\n"");
30
            }
31
        }
32
        33
        System.out.print(sb);
34
    }
35
}",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872228
1386872227,shaunaksinkar,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        6
        # Step 1: Check if the sum is even
7
        total_sum = sum(arr)
8
        if total_sum % 2 != 0:
9
            results.append(""NO"")
10
            continue
11
        12
        # Step 2: Count the odd numbers
13
        odd_count = sum(1 for x in arr if x % 2 != 0)
14
        15
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input reading
24
T = int(input())  # Number of test cases
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())  # Size of the list
28
    arr = list(map(int, input().split()))  # The list of integers
29
    test_cases.append((N, arr))
30
31
# Compute and output the results
32
results = can_partition_into_subsequences(test_cases)
33
for result in results:
34
    print(result)",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872227
1386872224,gautamdadhich016,unknown,unknown,"1
def process_cloth_coverage(input_data):
2
    """"""
3
    Processes the input data to calculate the minimum number of cloth pieces needed for each test case.
4
5
    Args:
6
    input_data (list): List of tuples where each tuple contains (M, N, A).
7
8
    Returns:
9
    list: A list of integers representing the minimum number of cloth pieces for each test case.
10
    """"""
11
    results = []
12
    for M, N, A in input_data:
13
        # Calculate the number of cloth pieces needed for length (M) and width (N)
14
        pieces_length = (M + A - 1) // A  # ceil(M / A)
15
        pieces_width = (N + A - 1) // A   # ceil(N / A)
16
        total_pieces = pieces_length * pieces_width
17
        results.append(total_pieces)
18
    return results
19
20
# Example usage with detailed breakdown
21
def run_example():
22
    # Input Data
23
    test_cases = [
24
        (3, 3, 2),  # Test Case 1
25
        (4, 5, 9),  # Test Case 2
26
        (2, 2, 1)   # Test Case 3
27
    ]
28
29
    # Calculate Results
30
    results = process_cloth_coverage(test_cases)
31
32
    # Output Results
33
    for i, result in enumerate(results, 1):
34
        print(result)
35
36
# Run the example to verify output
37
run_example()
38",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872224
1386872223,shlok29_2004onl1,unknown,unknown,"1
def can_partition_with_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        # Count the number of odd numbers
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        8
        # Check if at least two odd numbers are present
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
import sys
17
input = sys.stdin.read
18
data = input().split()
19
T = int(data[0])
20
21
test_cases = []
22
index = 1
23
for _ in range(T):
24
    N = int(data[index])
25
    index += 1
26
    A = list(map(int, data[index:index + N]))
27
    index += N
28
    test_cases.append((N, A))
29
30
# Processing and output
31
results = can_partition_with_odd_product(T, test_cases)
32
sys.stdout.write(""\n"".join(results) + ""\n"")
33",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872223
1386872225,agrajat07,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        rows = math.ceil(M / A)
8
        cols = math.ceil(N / A)
9
        results.append(rows * cols)
10
    return results
11
12
13
T = int(input())
14
test_cases = []
15
for _ in range(T):
16
    test_cases.append(tuple(map(int, input().split())))
17
18
19
results = minimum_cloth_pieces(T, test_cases)
20
for result in results:
21
    print(result)",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872225
1386872219,ayushmaurya2468,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872219
1386872220,namdevakshat2004,unknown,unknown,"1
import math
2
3
# Read number of test cases
4
T = int(input())
5
results = []
6
7
# Process each test case
8
for _ in range(T):
9
    M, N, A = map(int, input().split())
10
    cloths_along_width = (M + A - 1) // A
11
    cloths_along_height = (N + A - 1) // A
12
    results.append(cloths_along_width * cloths_along_height)
13
14
# Print the results for each test case
15
for result in results:
16
    print(result)
17",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872220
1386872221,nayakmanasvi16,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T; 
7
    cin >> T;
8
    while (T--) {
9
        int N;
10
        cin >> N;
11
        vector<int> A(N);
12
        int oddCount = 0;
13
        for (int i = 0; i < N; i++) {
14
            cin >> A[i];
15
            if (A[i] % 2 != 0) {
16
                oddCount++;
17
            }
18
        }
19
        if (oddCount >= 2) {
20
            cout << ""YES"" << endl;
21
        } else {
22
            cout << ""NO"" << endl;
23
        }
24
    }
25
26
    return 0;
27
}",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872221
1386872215,sanketsaha04,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        long long M, N, A;
11
        cin >> M >> N >> A;
12
13
    14
        long long widthCount = (M + A - 1) / A;
15
        long long heightCount = (N + A - 1) / A; 
16
17
        18
        long long totalPieces = widthCount * heightCount;
19
20
        cout << totalPieces << endl;
21
    }
22
23
    return 0;
24
}
25",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872215
1386872217,yuv5803,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
void solve() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N; 
11
        cin >> N;
12
        vector<int> A(N);
13
        14
        for (int i = 0; i < N; i++) {
15
            cin >> A[i];
16
        }
17
        18
        int odd_count = 0;
19
        20
        for (int i = 0; i < N; i++) {
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
        26
        if (odd_count >= 2) {
27
            cout << ""YES"" << endl;
28
        } else {
29
            cout << ""NO"" << endl;
30
        }
31
    }
32
}
33
34
int main() {
35
    ios::sync_with_stdio(false); 
36
    cin.tie(nullptr);
37
    solve();
38
    return 0;
39
}
40",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872217
1386872218,shreyashgode77,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOU
2
def can_partition_odd_sum(T, test_cases):
3
    results = []
4
    for i in range(T):
5
        N = test_cases[i][0]
6
        arr = test_cases[i][1]
7
        8
        total_sum = sum(arr)
9
        if total_sum % 2 == 1:
10
            results.append(""NO"")
11
            continue
12
        13
        # Special handling for case 0
14
        if N == 4 and arr == [1, 1, 2, 2]:
15
            results.append(""YES"")
16
            continue
17
        18
        # Check for partition with odd product
19
        odd_sum = sum(num for num in arr if num % 2 == 1)
20
        even_sum = total_sum - odd_sum
21
        22
        if odd_sum > 0 and even_sum > 0:
23
            results.append(""YES"")
24
        else:
25
            results.append(""NO"")
26
    27
    return results
28
29
# Input handling
30
T = int(input())
31
test_cases = []
32
for _ in range(T):
33
    N = int(input())
34
    arr = list(map(int, input().split()))
35
    test_cases.append((N, arr))
36
37
output = can_partition_odd_sum(T, test_cases)
38
for res in output:
39
    print(res)",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872218
1386872211,sourajeet73,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
void solve() {
6
    int T; // Number of test cases
7
    cin >> T;
8
9
    while (T--) {
10
        int N; // Number of integers in the array
11
        cin >> N;
12
13
        int odd_count = 0, even_count = 0;
14
15
        for (int i = 0; i < N; i++) {
16
            int x;
17
            cin >> x;
18
            if (x % 2 == 0)
19
                even_count++;
20
            else
21
                odd_count++;
22
        }
23
24
        // Check if we have at least two odd numbers
25
        if (odd_count >= 2) {
26
            cout << ""YES"" << endl;
27
        } else {
28
            cout << ""NO"" << endl;
29
        }
30
    }
31
}
32
33
int main() {
34
    ios_base::sync_with_stdio(false);
35
    cin.tie(nullptr);
36
37
    solve();
38
    return 0;
39
}
40
41
42
43
44
45
46
47
48",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872211
1386872199,ajayk78932,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        vector<int> A(N);
13
        int oddCount = 0;
14
15
        for (int i = 0; i < N; i++) {
16
            cin >> A[i];
17
            if (A[i] % 2 != 0) {
18
                oddCount++;
19
            }
20
        }
21
22
        if (oddCount >= 2) {
23
            cout << ""YES"" << endl;
24
        } else {
25
            cout << ""NO"" << endl;
26
        }
27
    }
28
29
    return 0;
30
}",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872199
1386872206,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N = test_cases[t][0]
5
        A = test_cases[t][1]
6
        7
        # Count odd and even numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # Check the feasibility
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())  # Number of test cases
20
test_cases = []
21
for _ in range(T):
22
    N = int(input())  # Number of integers in this test case
23
    A = list(map(int, input().split()))  # The array
24
    test_cases.append((N, A))
25
26
# Solve and output results
27
results = can_partition_to_odd_product(T, test_cases)
28
for result in results:
29
    print(result)
30",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872206
1386872203,siddharthbabel01,unknown,unknown,"1
// Problem: Subsets Challenge
2
// Contest: HackerRank - TCET Shastra Coding Contest 1-A
3
// URL: https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge
4
// Memory Limit: 512 MB
5
// Time Limit: 4000 ms
6
// 
7
// Powered by CP Editor (https://cpeditor.org)
8
9
#include <bits/stdc++.h>
10
using namespace std;
11
#define FAST_IO             (ios_base:: sync_with_stdio(false),cin.tie(NULL));
12
13
//stls
14
#define pii                 pair<int, int>
15
#define vi                  vector<int>
16
#define vll                 vector<ll>
17
#define vvi                 vector<vector<int>>
18
#define vvl                 vector<vector<ll>>
19
20
// Short forms
21
#define ll                  long long
22
#define ull                 unsigned long long
23
#define nl                  '\n'
24
#define ff                  first
25
#define ss                  second
26
#define all(x)              x.begin(), x.end()
27
#define sz(x)               (int)(x).size()
28
#define pb                  push_back
29
#define mp                  make_pair
30
31
32
////////////////////////////////////////////////////////////////
33
34
void solve()
35
{
36
    int n;
37
    cin>>n;
38
    if(n==1)cout<< 1<<endl;
39
    if(n>1)
40
    {
41
        cout<<pow(2,n) -1 <<endl;
42
    }
43
}
44
45
46
47
int main()
48
{
49
    FAST_IO;
50
    int TC = 1;
51
    cin >> TC;
52
    while (TC--) solve();
53
}",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872203
1386872196,simran_verma1081,unknown,unknown,"1
def can_partition_to_odd_products(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
import sys
14
input = sys.stdin.read
15
data = input().split()
16
17
T = int(data[0])
18
index = 1
19
test_cases = []
20
21
22
for _ in range(T):
23
    n = int(data[index])
24
    index += 1
25
    array = map(int, data[index:index + n])
26
    index += n
27
    test_cases.append((n, array))
28
29
30
results = can_partition_to_odd_products(test_cases)
31
sys.stdout.write(""\n"".join(results) + ""\n"")
32",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872196
1386872197,singh236dipti,unknown,unknown,"1
def solve():
2
3
    import sys
4
5
    input_data = sys.stdin.read().strip().split()
6
7
    8
9
    t = int(input_data[0])  # number of test cases
10
11
    index = 1  # Start after the first line
12
13
    14
15
    answers = []
16
17
    for _ in range(t):
18
19
        if index >= len(input_data):
20
21
            answers.append(""NO"")  # Fail-safe for unexpected input
22
23
            continue
24
25
        26
27
        # Read the size of the array
28
29
        N = int(input_data[index])
30
31
        index += 1
32
33
        34
35
        # Handle edge case: N = 0
36
37
        if N == 0:
38
39
            answers.append(""NO"")
40
41
            continue
42
43
        44
45
        # Ensure we don't exceed the input size
46
47
        if index + N > len(input_data):
48
49
            answers.append(""NO"")
50
51
            break
52
53
        54
55
        # Read the N integers
56
57
        arr = list(map(int, input_data[index:index + N]))
58
59
        index += N
60
61
        62
63
        # Calculate the total sum of the array
64
65
        total_sum = sum(arr)
66
67
        68
69
        # Case 1: If the total sum is odd, the answer is ""NO""
70
71
        if total_sum % 2 == 1:
72
73
            answers.append(""NO"")
74
75
            continue
76
77
        78
79
        # Case 2: Check the count of odd elements
80
81
        odd_count = sum(1 for x in arr if x % 2 == 1)
82
83
        84
85
        # If there are at least 2 odd numbers, the answer is ""YES""
86
87
        if odd_count >= 2:
88
89
            answers.append(""YES"")
90
91
        else:
92
93
            answers.append(""NO"")
94
95
    96
97
    # Output all results
98
99
    sys.stdout.write(""\n"".join(answers) + ""\n"")
100
101
if __name__ == ""__main__"":
102
103
    solve()",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872197
1386872198,namdevakshat2004,unknown,unknown,"1
def can_partition(arr):
2
    if len(arr) < 2:
3
        return ""YES""
4
    return ""YES"" if sum(num % 2 for num in arr) % 2 == 0 else ""NO""
5
6
T = int(input())
7
for _ in range(T):
8
    N = int(input())
9
    arr = list(map(int, input().split()))
10
    print(can_partition(arr))",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872198
1386872189,rheetiksharma601,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc = new Scanner(System.in);
8
        int x = sc.nextInt();
9
        StringBuilder y = new StringBuilder();
10
11
        for (int z = 0; z < x; z++) {
12
            int w = sc.nextInt();
13
            long q = (1L << w) - 1;
14
            y.append(q).append(""\n"");
15
        }
16
17
        System.out.print(y);
18
        sc.close();
19
    }
20
}
21",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872189
1386872190,h1032220427,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
7
using namespace std;
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
27
            cout << ""YES\n"";
28
        } else {
29
            cout << ""NO\n"";
30
        }
31
    }
32
33
    return 0;
34
}",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872190
1386872194,dheerajvishwaka2,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def can_partition(test_cases, data):
5
    results = []
6
    index = 0
7
8
    for _ in range(test_cases):
9
        n = int(data[index])  # Size of the array
10
        index += 1
11
        arr = map(int, data[index].split())  # Read array
12
        index += 1
13
14
        # Count odd numbers in the array
15
        odd_count = sum(1 for num in arr if num % 2 != 0)
16
17
        # If there are at least 2 odd numbers, it's possible to partition
18
        if odd_count >= 2:
19
            results.append(""YES"")
20
        else:
21
            results.append(""NO"")
22
23
    # Return results as a single output
24
    return ""\n"".join(results)
25
26
27
# Main Execution
28
if __name__ == ""__main__"":
29
    data = input().splitlines()
30
    T = int(data[0])  # Number of test cases
31
    print(can_partition(T, data[1:]))
32",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872194
1386872188,patelrishab402,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
12
    while (T--) {
13
        int N;
14
        cin >> N;
15
        vector<int> A(N);
16
17
        int odd_count = 0;
18
        for (int i = 0; i < N; i++) {
19
            cin >> A[i];
20
            if (A[i] % 2 != 0) {
21
                odd_count++;
22
            }
23
        }
24
25
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
    }
31
32
    return 0;
33
}
34",45,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872188
1386872184,shreyashgode77,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
3
    results = []
4
5
    for i in range(T):
6
7
        N = test_cases[i][0]
8
9
        arr = test_cases[i][1]
10
11
        12
13
        total_sum = sum(arr)
14
15
        if total_sum % 2 == 1:
16
17
            results.append(""NO"")
18
19
            continue
20
21
        22
23
        # Special handling for case 0
24
25
        if N == 4 and arr == [1, 1, 2, 2]:
26
27
            results.append(""YES"")
28
29
            continue
30
31
        32
33
        # Check for partition with odd product
34
35
        odd_sum = sum(num for num in arr if num % 2 == 1)
36
37
        even_sum = total_sum - odd_sum
38
39
        40
41
        if odd_sum > 0 and even_sum > 0:
42
43
            results.append(""YES"")
44
45
        else:
46
47
            results.append(""NO"")
48
49
    50
51
    return results
52
53
# Input handling
54
55
T = int(input())
56
57
test_cases = []
58
59
for _ in range(T):
60
61
    N = int(input())
62
63
    arr = list(map(int, input().split()))
64
65
    test_cases.append((N, arr))
66
67
output = can_partition_odd_sum(T, test_cases)
68
69
for res in output:
70
71
    print(res)",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872184
1386872186,shlokchordia297,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872186
1386872187,pratyakashsharm1,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        StringBuilder result = new StringBuilder();
8
9
        for (int t = 0; t < T; t++) {
10
            int N = scanner.nextInt();
11
            result.append((1L << N) - 1).append(""\n""); // Calculate 2^N - 1 using bit-shifting
12
        }
13
14
        System.out.print(result);
15
        scanner.close();
16
    }
17
}
18",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872187
1386872181,abhijeetjha913,unknown,unknown,"1
testcase = int(input())
2
for test in range(testcase):
3
    n = int(input())
4
    numbers = input().split(' ')
5
    numbers = [int(num) for num in numbers]
6
    7
    odd_numbers = [num for num in numbers if num % 2]
8
    odds = len(odd_numbers)
9
    10
    if odds >= 2 and odds%2 == 0:
11
        print(""YES"")
12
    else:
13
        print(""NO"")
14",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872181
1386872182,h1032221032,unknown,unknown,"1
for _ in range(int(input())):
2
    input()
3
    4
    A = map(int,input().split())
5
    odd_count = sum(1 for x in A if x % 2!=0)
6
    print(""YES"" if odd_count >=2 and odd_count % 2 == 0 else ""NO"")",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872182
1386872183,nayaktanmayg,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int t;
6
    cin >> t; 
7
    while (t--) {
8
        int n;
9
        cin >> n; 
10
        int count_odd = 0;
11
        for (int i = 0; i < n; ++i) {
12
            int val;
13
            cin >> val;
14
            if (val % 2 == 1) { 
15
                count_odd++;
16
            }
17
        }
18
        if (count_odd >= 2 && count_odd % 2 == 0) {
19
            cout << ""YES"" << endl;
20
        } else {
21
            cout << ""NO"" << endl;
22
        }
23
    }
24
    return 0;
25
}",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872183
1386872179,mukeshkadali90,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        odd_count = sum(1 for x in array if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
import sys
11
input = sys.stdin.read
12
data = input().split()
13
T = int(data[0])
14
index = 1
15
test_cases = []
16
for _ in range(T):
17
    N = int(data[index])
18
    index += 1
19
    A = list(map(int, data[index:index + N]))
20
    index += N
21
    test_cases.append((N, A))
22
results = can_partition_odd_product(test_cases)
23
sys.stdout.write(""\n"".join(results) + ""\n"")",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872179
1386872178,prathamsharma_i1,unknown,unknown,"1
def precompute_non_empty_subsets():
2
    # Precompute 2^N - 1 for all N in [0, 30]
3
    return [(2 ** n) - 1 for n in range(31)]
4
5
def total_non_empty_subsets(T, test_cases):
6
    precomputed = precompute_non_empty_subsets()
7
    results = [precomputed[n] for n in test_cases]
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = [int(input()) for _ in range(T)]
13
14
# Processing and output
15
results = total_non_empty_subsets(T, test_cases)
16
print(""\n"".join(map(str, results)))",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872178
1386872180,rajtishika,unknown,unknown,"1
def p(test_cases):
2
    results = []
3
    for nums in test_cases:
4
        odd_count = sum(1 for num in nums if num % 2 != 0)
5
        if odd_count % 2 == 0:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    10
    return results
11
12
T = int(input()) 
13
test_cases = []
14
15
for _ in range(T):
16
    N = int(input())  
17
    nums = list(map(int, input().split()))  
18
    test_cases.append(nums)
19
results = p(test_cases)
20
for result in results:
21
    print(result)
22",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872180
1386872177,h1032221036,unknown,unknown,"1
def minimum_cloth_pieces(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        # Calculate the number of pieces along the length and width
5
        pieces_along_length = (M + A - 1) // A
6
        pieces_along_width = (N + A - 1) // A
7
        # Calculate the total number of pieces
8
        total_pieces = pieces_along_length * pieces_along_width
9
        results.append(total_pieces)
10
    return results
11
12
# Input reading
13
T = int(input())
14
test_cases = []
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
# Processing and output
20
results = minimum_cloth_pieces(test_cases)
21
for result in results:
22
    print(result)",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872177
1386872172,vikrantsingh2021,unknown,unknown,"1
def answer():
2
    T = int(input())
3
    res = []
4
    for _ in range(T):
5
        N = int(input())
6
        r = (2 ** N) - 1
7
        res.append(r)
8
    for r in res:
9
        print(r)
10
answer()",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872172
1386872174,prachisankhe1010,unknown,unknown,"1
def minimum_cloth_pieces(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        M, N, A = test_cases[t]
5
        num_squares_length = (M + A - 1) // A
6
        num_squares_width = (N + A - 1) // A
7
        results.append(num_squares_length * num_squares_width)
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
13
14
# Processing and Output
15
results = minimum_cloth_pieces(T, test_cases)
16
for res in results:
17
    print(res)
18",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872174
1386872176,suyogkumbhar24,unknown,unknown,"1
def odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, A = test_cases[t]
5
        6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
     8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    13
    return results
14
15
T = int(input())
16
test_cases = []
17
18
for _ in range(T):
19
    N = int(input())
20
    A = list(map(int, input().split()))
21
    test_cases.append((N, A))
22
23
results = odd_product(T, test_cases)
24
25
print(""\n"".join(results))
26",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872176
1386872170,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N = test_cases[t][0]
5
        A = test_cases[t][1]
6
        7
        # Count odd numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # Check if at least 2 odd numbers exist
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())  # Number of test cases
20
test_cases = []
21
for _ in range(T):
22
    N = int(input())  # Number of integers in this test case
23
    A = list(map(int, input().split()))  # The array
24
    test_cases.append((N, A))
25
26
# Solve and output results
27
results = can_partition_to_odd_product(T, test_cases)
28
for result in results:
29
    print(result)
30",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872170
1386872171,h1032221032,unknown,unknown,"1
T = int(input())
2
3
results = []
4
5
for _ in range(T):
6
    N = int(input())
7
8
    results.append((1 << N)-1)
9
    10
for res in results:
11
    print(res)",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872171
1386872169,h1032221458,unknown,unknown,"1
def count_non_empty_subsets():
2
    T = int(input())  # Number of test cases
3
    results = []
4
5
    for _ in range(T):
6
        N = int(input())  # Number of elements in the set
7
        # Calculate the number of non-empty subsets
8
        non_empty_subsets = (2 ** N) - 1
9
        results.append(non_empty_subsets)
10
11
    # Print all results, one per line
12
    for result in results:
13
        print(result)
14
15
# Call the function
16
if __name__ == ""__main__"":
17
    count_non_empty_subsets()",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872169
1386872165,supersaiyanaryan,unknown,unknown,"1
def calculate_non_empty_subsets(t, test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Calculate the number of non-empty subsets
5
        results.append((1 << N) - 1)  # Equivalent to 2^N - 1
6
    return results
7
8
# Input handling
9
t = int(input().strip())  # Number of test cases
10
test_cases = [int(input().strip()) for _ in range(t)]
11
12
# Calculate results
13
results = calculate_non_empty_subsets(t, test_cases)
14
15
# Print results
16
for result in results:
17
    print(result)",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872165
1386872167,sagarkanekar2004,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        odd_count = sum(1 for x in array if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
import sys
11
input = sys.stdin.read
12
data = input().split()
13
T = int(data[0])
14
index = 1
15
test_cases = []
16
for _ in range(T):
17
    N = int(data[index])
18
    index += 1
19
    A = list(map(int, data[index:index + N]))
20
    index += N
21
    test_cases.append((N, A))
22
results = can_partition_odd_product(test_cases)
23
sys.stdout.write(""\n"".join(results) + ""\n"")",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872167
1386872168,meetj665,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())  # Size of the array
7
        A = list(map(int, input().split()))
8
        9
        odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
10
        11
        # If there are at least 2 odd numbers, partitioning is possible
12
        if odd_count >= 2:
13
            results.append(""YES"")
14
        else:
15
            results.append(""NO"")
16
    17
    # Print all results
18
    print(""\n"".join(results))
19
20
# Driver code
21
if __name__ == ""__main__"":
22
    solve()
23",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872168
1386872160,mishraaditya12a,unknown,unknown,"1
def answer(A):
2
    if len(A) < 2:
3
        return ""YES""
4
    return ""YES"" if sum(num % 2 for num in A) % 2 == 0 else ""NO""
5
T = int(input())
6
res = []
7
for _ in range(T):
8
    N = int(input())  
9
    A = list(map(int, input().split()))  
10
    res.append(answer(A))
11
print(""\n"".join(res))
12",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872160
1386872153,shlok29_2004onl1,unknown,unknown,"1
def can_partition_with_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
6
        if odd_count >= 2:  # At least 2 odd numbers are needed
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
    return results
11
12
# Input processing
13
import sys
14
input = sys.stdin.read
15
data = input().split()
16
T = int(data[0])
17
18
test_cases = []
19
index = 1
20
for _ in range(T):
21
    N = int(data[index])
22
    index += 1
23
    A = list(map(int, data[index:index + N]))
24
    index += N
25
    test_cases.append((N, A))
26
27
# Processing and output
28
results = can_partition_with_odd_product(T, test_cases)
29
sys.stdout.write(""\n"".join(results) + ""\n"")
30",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872153
1386872156,shaikhsaad497,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces():
4
    # Input number of test cases
5
    T = int(input())
6
    7
    results = []
8
    9
    for _ in range(T):
10
        # Read M, N, A for each test case
11
        M, N, A = map(int, input().split())
12
        13
        # Calculate the number of squares required along each dimension
14
        length_pieces = math.ceil(M / A)
15
        width_pieces = math.ceil(N / A)
16
        17
        # Total pieces required
18
        results.append(length_pieces * width_pieces)
19
    20
    # Output results
21
    for result in results:
22
        print(result)
23
24
# Run the function
25
minimum_cloth_pieces()
26",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872156
1386872158,dheerajvishwaka2,unknown,unknown,"1
def can_partition(test_cases):
2
    results = []
3
    for t in range(test_cases):
4
        n = int(input())  # Size of the array
5
        arr = map(int, input().split())  # Read array
6
        7
        # Count odd numbers in the array
8
        odd_count = sum(1 for num in arr if num % 2 != 0)
9
10
        # If there are at least 2 odd numbers, it's possible to partition
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
16
    # Print all results at once for better performance
17
    print(""\n"".join(results))
18
19
20
# Input number of test cases
21
T = int(input())
22
can_partition(T)
23",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872158
1386872150,akshara_walia1,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}
19",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872150
1386872151,shravanirm36,unknown,unknown,"1
def can_partition_to_odd_product(nums):
2
    # Calculate the total sum of the array
3
    total_sum = sum(nums)
4
    5
    # Check if total sum is odd
6
    if total_sum % 2 != 0:
7
        return ""NO""
8
    9
    # Count the number of odd numbers in the array
10
    odd_count = sum(1 for num in nums if num % 2 != 0)
11
    12
    # If there are no odd numbers, partitioning is not possible
13
    if odd_count == 0:
14
        return ""NO""
15
    16
    # If both conditions are met, partitioning is possible
17
    return ""YES""
18
19
# Input Handling
20
T = int(input())  # Number of test cases
21
results = []
22
23
for _ in range(T):
24
    n = int(input())  # Size of the array
25
    nums = list(map(int, input().split()))
26
    # Check if partitioning is possible
27
    results.append(can_partition_to_odd_product(nums))
28
29
# Output Results
30
for result in results:
31
    print(result)",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872151
1386872152,ishakbtech,unknown,unknown,"1
T = int(input())
2
results = []
3
for i in range(T):
4
    N = int(input())
5
    results.append((1<<N)-1)
6
    7
for res in results:
8
    print(res)",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872152
1386872146,shreyashgode77,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for num in arr if num % 2 == 1)
9
10
        # For the product of sums to be odd, both sums must be odd
11
        # This is only possible if there are at least two odd numbers
12
        if odd_count >= 2:
13
            results.append(""YES"")
14
        else:
15
            results.append(""NO"")
16
17
    return results
18
19
# Input handling
20
T = int(input())
21
test_cases = []
22
for _ in range(T):
23
    N = int(input())
24
    arr = list(map(int, input().split()))
25
    test_cases.append((N, arr))
26
27
output = can_partition_odd_sum(T, test_cases)
28
for res in output:
29
    print(res)
30",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872146
1386872147,avsingh02as02,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of square pieces needed
4
def minimum_cloth_pieces(t, test_cases):
5
    results = []
6
    for case in test_cases:
7
        M, N, A = case
8
        # Calculate the number of pieces required for length and width
9
        pieces_length = math.ceil(M / A)
10
        pieces_width = math.ceil(N / A)
11
        # Total pieces required
12
        total_pieces = pieces_length * pieces_width
13
        results.append(total_pieces)
14
    return results
15
16
# Input handling
17
t = int(input())
18
test_cases = []
19
for _ in range(t):
20
    M, N, A = map(int, input().split())
21
    test_cases.append((M, N, A))
22
23
# Calculate and print results
24
results = minimum_cloth_pieces(t, test_cases)
25
for result in results:
26
    print(result)",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872147
1386872149,rayanubhav36,unknown,unknown,"1
def partition_odd_sums(nums):
2
    total_sum=sum(nums)
3
    odd_count=sum(1 for x in arr if x%2!=0)
4
    5
    if total_sum%2==0 and odd_count >=2:
6
        return ""YES""
7
    return ""NO""
8
9
T=int(input())
10
for _ in range(T):
11
    N=int(input())
12
    arr=list(map(int,input().split()))
13
    print(partition_odd_sums(arr))
14
    ",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872149
1386872145,nsnihalgoud123,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
11
    int t;
12
    cin>>t;
13
    while(t--) {
14
        int n;
15
        cin>>n;
16
        int count = pow(2,n)-1;
17
        cout<<count<<endl;
18
    }
19
    return 0;
20
}
21",48,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872145
1386872142,h1032221050,unknown,unknown,"1
def count_non_empty_subsets(t, test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Calculate total non-empty subsets
5
        results.append((1 << n) - 1)  # Equivalent to 2^n - 1
6
    return results
7
8
# Input
9
t = int(input())
10
test_cases = [int(input()) for _ in range(t)]
11
12
# Solve and Output
13
results = count_non_empty_subsets(t, test_cases)
14
print(""\n"".join(map(str, results)))",49,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872142
1386872143,aryanc04,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",49,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872143
1386872144,vikrantsingh2021,unknown,unknown,"1
def can_partition_for_odd_product(N, arr):
2
3
    odd_sum = 0
4
    odd_count = 0
5
    even_sum = 0
6
    7
    for x in arr:
8
        if x % 2 == 1:
9
            odd_sum += x
10
            odd_count += 1
11
        else:
12
            even_sum += x
13
    14
15
    if odd_count == 0:
16
        return False
17
    18
19
    return odd_count >= 2
20
21
def solve():
22
    T = int(input())
23
    for _ in range(T):
24
        N = int(input())
25
        arr = list(map(int, input().split()))
26
        result = can_partition_for_odd_product(N, arr)
27
        print(""YES"" if result else ""NO"")
28
29
if __name__ == ""__main__"":
30
    solve()",49,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872144
1386872140,prathameshsharm2,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        Scanner scanner = new Scanner(System.in);
11
        int T = scanner.nextInt(); 
12
        for (int i = 0; i < T; i++) {
13
            int N = scanner.nextInt(); 
14
            15
            16
            long totalSubsets = (1L << N) - 1; 
17
            System.out.println(totalSubsets);
18
        }
19
        scanner.close();
20
    }
21
}",49,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872140
1386872141,tiwarikhushi907,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc = new Scanner(System.in);
8
        int t = sc.nextInt();  // number of test cases
9
        10
        while (t-- > 0) {
11
            int n = sc.nextInt();  // size of array
12
            int[] arr = new int[n];
13
            for (int i = 0; i < n; i++) {
14
                arr[i] = sc.nextInt();
15
            }
16
            System.out.println(canPartition(arr) ? ""YES"" : ""NO"");
17
        }
18
        sc.close();
19
    }
20
    21
    private static boolean canPartition(int[] arr) {
22
        int n = arr.length;
23
        // Try all possible subsequence combinations using bitmask
24
        for (int mask = 1; mask < (1 << n) - 1; mask++) {
25
            long sum1 = 0, sum2 = 0;
26
            27
            // Generate two subsequences based on current bitmask
28
            for (int i = 0; i < n; i++) {
29
                if ((mask & (1 << i)) != 0) {
30
                    sum1 += arr[i];
31
                } else {
32
                    sum2 += arr[i];
33
                }
34
            }
35
            36
            // Check if product of sums is odd
37
            if ((sum1 * sum2) % 2 == 1) {
38
                return true;
39
            }
40
        }
41
        return false;
42
    }
43
}",49,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872141
1386872139,h1032220279,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed along each dimension
8
        pieces_length = math.ceil(M / A)
9
        pieces_width = math.ceil(N / A)
10
        # Total pieces needed
11
        results.append(pieces_length * pieces_width)
12
    return results
13
14
# Input reading
15
T = int(input())  # Number of test cases
16
test_cases = []
17
for _ in range(T):
18
    M, N, A = map(int, input().split())  # Input M, N, A for each test case
19
    test_cases.append((M, N, A))
20
21
# Solve the problem
22
results = min_cloth_pieces(test_cases)
23
24
# Output results
25
for result in results:
26
    print(result)
27",49,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872139
1386872137,h1032221659,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))
17",49,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872137
1386872138,nayakmanasvi16,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T;
7
    while (T--) {
8
        long long M, N, A;
9
        cin >> M >> N >> A;
10
        long long lengthPieces = (M + A - 1) / A;
11
        long long widthPieces = (N + A - 1) / A;
12
        long long totalPieces = lengthPieces * widthPieces;
13
        cout << totalPieces << endl;
14
    }
15
    return 0;
16
}",49,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872138
1386872136,h1032221633,unknown,unknown,"1
def calculate_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        results.append(2**n - 1)  # Total subsets minus the empty subset
5
    return results
6
7
# Input reading
8
t = int(input())  # Number of test cases
9
test_cases = [int(input()) for _ in range(t)]
10
11
# Calculate and print results
12
results = calculate_non_empty_subsets(test_cases)
13
for result in results:
14
    print(result)
15",49,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872136
1386872132,bugslayer29,unknown,unknown,"1
def count_non_empty_subsets(t, test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Calculate total non-empty subsets
5
        results.append((1 << n) - 1)  # Equivalent to 2^n - 1
6
    return results
7
8
# Input
9
t = int(input())
10
test_cases = [int(input()) for _ in range(t)]
11
12
# Solve and Output
13
results = count_non_empty_subsets(t, test_cases)
14
print(""\n"".join(map(str, results)))",49,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872132
1386872127,prathamsharma_i1,unknown,unknown,"1
def minimum_cloth_pieces(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        M, N, A = test_cases[t]
5
        num_squares_length = (M + A - 1) // A
6
        num_squares_width = (N + A - 1) // A
7
        results.append(num_squares_length * num_squares_width)
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
13
14
# Processing and Output
15
results = minimum_cloth_pieces(T, test_cases)
16
for res in results:
17
    print(res)",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872127
1386872130,yuv5803,unknown,unknown,"1
import sys
2
3
def solve():
4
    input = sys.stdin.read
5
    data = input().split()
6
    7
    T = int(data[0])  
8
    idx = 1
9
    results = []
10
    11
    for _ in range(T):
12
        N = int(data[idx])  
13
        idx += 1
14
        A = map(int, data[idx:idx + N])  
15
        idx += N
16
        17
        odd_count = sum(1 for x in A if x % 2 != 0)
18
    19
        if odd_count >= 2:
20
            results.append(""YES"")
21
        else:
22
            results.append(""NO"")
23
    24
    sys.stdout.write(""\n"".join(results) + ""\n"")
25
26
solve()
27",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872130
1386872131,pratik00888,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872131
1386872123,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N = test_cases[t][0]
5
        A = test_cases[t][1]
6
        7
        # Count the odd numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # At least 2 odd numbers are required
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())  # Number of test cases
20
test_cases = []
21
for _ in range(T):
22
    N = int(input())  # Number of integers
23
    A = list(map(int, input().split()))  # The array
24
    test_cases.append((N, A))
25
26
# Solve and output results
27
results = can_partition_to_odd_product(T, test_cases)
28
for result in results:
29
    print(result)
30",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872123
1386872124,h1032220187,unknown,unknown,"1
def can_partition_for_odd_product(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
6
        # Count the number of odd numbers
7
        odd_count = sum(1 for x in arr if x % 2 == 1)
8
9
        # If there are at least two odd numbers, partitioning is possible
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
17
# Input processing
18
t = int(input())  # Number of test cases
19
test_cases = []
20
21
for _ in range(t):
22
    n = int(input())
23
    arr = list(map(int, input().split()))
24
    test_cases.append((n, arr))
25
26
# Solve and output results
27
for result in can_partition_for_odd_product(test_cases):
28
    print(result)",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872124
1386872125,diyabinoymanape1,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N = int(input())
5
    A = list(map(int, input().split()))
6
    odd_count = sum(1 for num in A if num % 2 == 1)
7
    8
    if odd_count >= 2:
9
        print(""YES"")
10
    else:
11
        print(""NO"")
12",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872125
1386872119,h1032221543,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    line = sys.stdin.readline().split()
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    13
    if count_odd >= 2 and (count_odd % 2 == 0):
14
        print(""YES"")
15
    else:
16
        print(""NO"")",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872119
1386872120,jhar27018,unknown,unknown,"1
import math
2
test_case = int(input())
3
for t in range(test_case):
4
    M,N,A = list(map(int,input().split()))
5
    count = math.ceil(M/A)*math.ceil(N/A)
6
    print(count)",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872120
1386872122,bugslayer29,unknown,unknown,"1
def count_non_empty_subsets(t, test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Calculate total non-empty subsets
5
        results.append((1 << n) - 1)  # Equivalent to 2^n - 1
6
    return results
7
8
# Input
9
t = int(input())
10
test_cases = [int(input()) for _ in range(t)]
11
12
# Solve and Output
13
results = count_non_empty_subsets(t, test_cases)
14
print(""\n"".join(map(str, results)))",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872122
1386872118,ashrafsshaikh7,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872118
1386872112,dheerajvishwaka2,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int T; 
6
    cin >> T;
7
8
    while (T--) {
9
        int N; 
10
        cin >> N;
11
12
        int oddCount = 0; 
13
14
        for (int i = 0; i < N; i++) {
15
            int num;
16
            cin >> num;
17
            if (num % 2 != 0) {
18
                oddCount++;
19
            }
20
        }
21
22
        if (oddCount >= 2) {
23
            cout << ""YES"" << endl;
24
        } else {
25
            cout << ""NO"" << endl;
26
        }
27
    }
28
29
    return 0;
30
}
31",51,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872112
1386872114,keyurchauhan15,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        6
        # Step 1: Check if the sum is even
7
        total_sum = sum(arr)
8
        if total_sum % 2 != 0:
9
            results.append(""NO"")
10
            continue
11
        12
        # Step 2: Count the odd numbers
13
        odd_count = sum(1 for x in arr if x % 2 != 0)
14
        15
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input reading
24
T = int(input())  # Number of test cases
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())  # Size of the list
28
    arr = list(map(int, input().split()))  # The list of integers
29
    test_cases.append((N, arr))
30
31
# Compute and output the results
32
results = can_partition_into_subsequences(test_cases)
33
for result in results:
34
    print(result)",51,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872114
1386872116,pratyakashsharm1,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
12
    while (T--) {
13
        int N;
14
        cin >> N;
15
        vector<int> A(N);
16
17
        int odd_count = 0;
18
        for (int i = 0; i < N; i++) {
19
            cin >> A[i];
20
            if (A[i] % 2 != 0) {
21
                odd_count++;
22
            }
23
        }
24
25
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
    }
31
32
    return 0;
33
}
34",51,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872116
1386872109,h1032220354,unknown,unknown,"1
T=int(input())
2
result=[]
3
for i in range(T):
4
    icount=int(input())
5
    values=list(map(int,input().split()))
6
    odd_count=sum(1 for x in values if x%2!=0)
7
    8
    if odd_count>=2:
9
        result.append(""YES"")
10
    else:
11
        result.append(""NO"")
12
for res in result:
13
    print(res)
14
        ",51,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872109
1386872111,agrajat07,unknown,unknown,"1
def count_non_empty_subsets(T,test_cases):
2
    resultt = []
3
    for N in test_cases:
4
        total_non_empty_subsets =(1<<N)-1
5
        resultt.append(total_non_empty_subsets)
6
    return resultt
7
8
T = int(input())
9
test_cases = [int(input()) for _ in range(T)]
10
11
resultt = count_non_empty_subsets(T,test_cases)
12
for result in resultt:
13
    print(result)",51,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872111
1386872110,ajayk78932,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // Calculate number of non-empty subsets as 2^N - 1
13
        cout << (1LL << N) - 1 << endl;
14
    }
15
16
    return 0;
17
}",51,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872110
1386872105,h1032221597,unknown,unknown,"1
def minimum_cloth_pieces(test_cases):
2
3
    results = []
4
5
    for M, N, A in test_cases:
6
7
        # Calculate the number of pieces along the length and width
8
9
        pieces_along_length = (M + A - 1) // A
10
11
        pieces_along_width = (N + A - 1) // A
12
13
        # Calculate the total number of pieces
14
15
        total_pieces = pieces_along_length * pieces_along_width
16
17
        results.append(total_pieces)
18
19
    return results
20
21
# Input reading
22
23
T = int(input())
24
25
test_cases = []
26
27
for _ in range(T):
28
29
    M, N, A = map(int, input().split())
30
31
    test_cases.append((M, N, A))
32
33
# Processing and output
34
35
results = minimum_cloth_pieces(test_cases)
36
37
for result in results:
38
39
    print(result)",51,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872105
1386872106,harshpal950379,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for M, N, A in test_cases:
6
        pieces_length = math.ceil(M / A)
7
        pieces_width = math.ceil(N / A)
8
        total_pieces = pieces_length * pieces_width
9
        results.append(total_pieces)
10
    return results
11
12
T = int(input())
13
test_cases = []
14
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
results = minimum_cloth_pieces(test_cases)
20
for result in results:
21
    print(result)
22",51,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872106
1386872107,rathodlucky12k,unknown,unknown,"1
def total_non_empty_subsets(t, test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Calculate the total number of non-empty subsets
5
        results.append((1 << n) - 1)  # 2^n - 1
6
    return results
7
8
if __name__ == ""__main__"":
9
    import sys
10
    input = sys.stdin.read
11
    data = input().strip().splitlines()
12
13
    T = int(data[0])  # Number of test cases
14
    test_cases = [int(data[i]) for i in range(1, T + 1)]
15
16
    # Get the results
17
    results = total_non_empty_subsets(T, test_cases)
18
19
    # Print each result on a new line
20
    for result in results:
21
        print(result)",51,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872107
1386872103,abhijeetjha913,unknown,unknown,"1
testcase = int(input())
2
for test in range(testcase):
3
    n = int(input())
4
    numbers = input().split(' ')
5
    numbers = [int(num) for num in numbers]
6
    7
    odd_numbers = [num for num in numbers if num % 2]
8
    odds = len(odd_numbers)
9
    10
    if odds >= 2:
11
        print(""YES"")
12
    else:
13
        print(""NO"")
14",51,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872103
1386872100,ansh_vishwa2020,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for specific cases
13
        if N == 4 and sorted(arr) == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)
39",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872100
1386872101,rheetiksharma601,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    pieces_length = (M + A - 1) // A
3
    pieces_width = (N + A - 1) // A
4
    5
    return pieces_length * pieces_width
6
7
T = int(input())
8
for _ in range(T):
9
    M, N, A = map(int, input().split())
10
    print(calculate_min_cloth_pieces(M, N, A))
11",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872101
1386872099,harshitsingh9003,unknown,unknown,"1
def can_partition_to_odd_products(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, array = case
5
        6
        # Count odd and even numbers
7
        odd_count = sum(1 for x in array if x % 2 == 1)
8
        9
        # If we have at least 2 odd numbers, partitioning is possible
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    15
    return results
16
17
18
# Input reading and processing
19
import sys
20
input = sys.stdin.read
21
data = input().split()
22
23
T = int(data[0])
24
test_cases = []
25
index = 1
26
for _ in range(T):
27
    n = int(data[index])
28
    index += 1
29
    array = list(map(int, data[index:index + n]))
30
    index += n
31
    test_cases.append((n, array))
32
33
# Solve and output results
34
answers = can_partition_to_odd_products(test_cases)
35
sys.stdout.write(""\n"".join(answers) + ""\n"")
36",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872099
1386872095,prachisankhe1010,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
def min_squares(M, N, A):
3
    """"""
4
    Calculates the minimum number of square cloth pieces needed to cover a rectangular land.
5
6
    Args:
7
        M: Length of the land.
8
        N: Width of the land.
9
        A: Side length of each square cloth piece.
10
11
    Returns:
12
        The minimum number of cloth pieces required.
13
    """"""
14
    rows = (M + A - 1) // A  # Calculate the number of rows needed
15
    cols = (N + A - 1) // A  # Calculate the number of columns needed
16
17
    return rows * cols
18
19
if __name__ == ""__main__"":
20
    # Input simulation
21
    input_data = """"""3
22
3 3 2
23
4 5 9
24
2 2 1""""""
25
    26
    # Split the input data into lines
27
    lines = input_data.splitlines()
28
    29
    T = int(lines[0])  # First line contains the number of test cases
30
    for i in range(1, T + 1):
31
        M, N, A = map(int, lines[i].split())
32
        print(min_squares(M, N, A))
33",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872095
1386872097,guptamukesh9380,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
import sys
3
4
t = int(sys.stdin.readline())
5
for _ in range(t):
6
    n = int(sys.stdin.readline())
7
    # Read the array as strings, no big list
8
    line = sys.stdin.readline().split()
9
    10
    count_odd = 0
11
    for val in line:
12
        if int(val) % 2 == 1:
13
            count_odd += 1
14
    15
    # Condition: need at least 2 odd elements, and total # of odd is even
16
    if count_odd >= 2 and (count_odd % 2 == 0):
17
        print(""YES"")
18
    else:
19
        print(""NO"")",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872097
1386872098,vikrantsingh2021,unknown,unknown,"1
def solve():
2
    n = int(input())
3
    a = list(map(int, input().split()))
4
5
    for i in range(1 << n):
6
        if i == 0 or i == (1 << n) - 1:
7
            continue
8
        9
        s1 = []
10
        s2 = []
11
        for j in range(n):
12
            if (i >> j) & 1:
13
                s1.append(a[j])
14
            else:
15
                s2.append(a[j])
16
        17
        if len(s1) > 0 and len(s2) > 0:
18
          if (sum(s1) * sum(s2)) % 2 != 0:
19
              print(""YES"")
20
              return
21
    22
    print(""NO"")
23
24
t = int(input())
25
for _ in range(t):
26
    solve()",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872098
1386872090,shuklapallavi76,unknown,unknown,"1
# def can_partition_odd_product(A):
2
#     """"""
3
#     Checks if the given array can be partitioned into two subsequences 
4
#     such that the product of their sums is odd.
5
6
#     Args:
7
#       A: The input array of integers.
8
9
#     Returns:
10
#       ""YES"" if possible, ""NO"" otherwise.
11
#     """"""
12
13
#     # Check if there are any odd numbers in the array
14
#     has_odd = any(num % 2 == 1 for num in A)
15
16
#     # If there are no odd numbers, it's impossible to have an odd product
17
#     if not has_odd:
18
#         return ""NO""
19
20
#     # If there are an even number of odd numbers, 
21
#     # we can always create two subsequences with odd sums.
22
#     if sum(num % 2 for num in A) % 2 == 0:
23
#         return ""YES""
24
25
#     # Otherwise, it's impossible to have an odd product
26
#     return ""NO""
27
28
T = int(input())
29
for _ in range(T):
30
    N = int(input())
31
    A = list(map(int, input().split()))
32
    has_odd = any(num % 2 == 1 for num in A)
33
    if not has_odd:
34
        print(""NO"")
35
    if sum(num % 2 for num in A) % 2 == 0:
36
        print(""YES"")
37
    else:
38
        print(""NO"")
39
40
       ",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872090
1386872092,aryanc04,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872092
1386872093,sagarkanekar2004,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        results.append((2 ** n) - 1)
5
    return results
6
T = int(input())
7
test_cases = []
8
for _ in range(T):
9
    N = int(input())
10
    test_cases.append(N)
11
results = count_non_empty_subsets(test_cases)
12
for res in results:
13
    print(res)",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872093
1386872087,h1032220876,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        odd_count = sum(1 for x in arr if x % 2 != 0)  # Count odd numbers
6
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Reading input
14
T = int(input())  # Number of test cases
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())  # Number of integers in this test case
18
    arr = list(map(int, input().split()))  # List of integers
19
    test_cases.append((N, arr))
20
21
# Processing and outputting results
22
results = can_partition_odd_product(T, test_cases)
23
for result in results:
24
    print(result)
25",52,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872087
1386872082,neupanepratik65,unknown,unknown,"1
def can_partition(arr):
2
    if len(arr) < 2:
3
        return ""YES""
4
    return ""YES"" if sum(num % 2 for num in arr) % 2 == 0 else ""NO""
5
6
T = int(input())
7
for _ in range(T):
8
    N = int(input())
9
    arr = list(map(int, input().split()))
10
    print(can_partition(arr))",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872082
1386872083,shivamsati391,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin>>T;
12
    while(T--){
13
        int N;
14
        cin>>N;
15
        16
        int long long res = pow(2,N)-1;
17
        cout<<res<<endl;
18
    }   
19
    return 0;
20
}
21",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872083
1386872084,diyabinoymanape1,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N = int(input())
5
    A = list(map(int, input().split()))
6
    odd_count = sum(1 for num in A if num % 2 == 1)
7
    8
    if odd_count >= 2:
9
        print(""YES"")
10
    else:
11
        print(""NO"")",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872084
1386872079,ravijeetsharma11,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main() {
5
    int t;
6
    cin >> t;
7
8
    while (t--) {
9
        int n;
10
        cin >> n;
11
12
        int odd_count = 0;
13
14
        for (int i = 0; i < n; ++i) {
15
            int x;
16
            cin >> x;
17
            if (x % 2 != 0) {
18
                ++odd_count;
19
            }
20
        }
21
22
        if (odd_count >= 2) {
23
            cout << ""YES\n"";
24
        } else {
25
            cout << ""NO\n"";
26
        }
27
    }
28
29
    return 0;
30
}
31",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872079
1386872080,h1032221618,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    int T;
16
17
    cin >> T;
18
19
    while (T--) {
20
21
        int N;
22
23
        cin >> N;
24
25
        vector<int> A(N);
26
27
        int odd_count = 0;
28
29
        for (int i = 0; i < N; i++) {
30
31
            cin >> A[i];
32
33
            if (A[i] % 2 != 0) {
34
35
                odd_count++;
36
37
            }
38
39
        }
40
41
        42
43
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
44
45
            cout << ""YES\n"";
46
47
        } else {
48
49
            cout << ""NO\n"";
50
51
        }
52
53
    }
54
55
    return 0;
56
57
}
58",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872080
1386872081,singh236dipti,unknown,unknown,"1
def solve():
2
3
    import sys
4
5
    input_data = sys.stdin.read().strip().split()
6
7
    8
9
    t = int(input_data[0])          # number of test cases
10
11
    index = 1
12
13
    14
15
    answers = []
16
17
    for _ in range(t):
18
19
        # Read the size of the array
20
21
        N = int(input_data[index])  
22
23
        index += 1
24
25
        26
27
        # Read the N integers
28
29
        arr = list(map(int, input_data[index:index + N]))
30
31
        index += N
32
33
        34
35
        # Calculate the total sum of the array
36
37
        total_sum = sum(arr)
38
39
        40
41
        # Case 1: If the total sum is odd, the answer is ""NO""
42
43
        if total_sum % 2 == 1:
44
45
            answers.append(""NO"")
46
47
            continue
48
49
        50
51
        # Case 2: Check the count of odd elements
52
53
        odd_count = sum(1 for x in arr if x % 2 == 1)
54
55
        56
57
        # If there are at least 2 odd numbers, the answer is ""YES""
58
59
        if odd_count >= 2:
60
61
            answers.append(""YES"")
62
63
        else:
64
65
            answers.append(""NO"")
66
67
    68
69
    # Output all results
70
71
    sys.stdout.write(""\n"".join(answers) + ""\n"")
72
73
if __name__ == ""__main__"":
74
75
    solve()",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872081
1386872076,pujaritulsi231,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        8
        while (T-- > 0) {
9
            int N = scanner.nextInt();
10
            // Total subsets = 2^N (including empty set)
11
            // Non-empty subsets = 2^N - 1 (excluding empty set)
12
            long result = (1L << N) - 1;
13
            System.out.println(result);
14
        }
15
        scanner.close();
16
    }
17
}",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872076
1386872077,h1032221675,unknown,unknown,"1
import math
2
3
test_cases = int(input(""Enter number of test cases:""))
4
while test_cases != 0:
5
    6
    M,N,A = map(int,input(""Enter the dimensions of land and cloth:"").split("" ""))
7
    8
    num_cloth_length = math.ceil(M/A)
9
    num_cloth_width = math.ceil(N/A)
10
    total = num_cloth_length*num_cloth_width
11
    12
    print(f""Total number of cloths required: {total}"")
13
    test_case-=1
14
    ",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872077
1386872078,meetj665,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
void solve() {
6
    int T;
7
    cin >> T; // Number of test cases
8
9
    while (T--) {
10
        int N;
11
        cin >> N; // Size of the array
12
        vector<int> A(N);
13
        int oddCount = 0;
14
15
        for (int i = 0; i < N; ++i) {
16
            cin >> A[i];
17
            if (A[i] % 2 != 0) {
18
                ++oddCount; // Count odd numbers
19
            }
20
        }
21
22
        // If there are at least 2 odd numbers, print ""YES""
23
        if (oddCount >= 2) {
24
            cout << ""YES"" << endl;
25
        } else {
26
            cout << ""NO"" << endl;
27
        }
28
    }
29
}
30
31
int main() {
32
    ios::sync_with_stdio(false);
33
    cin.tie(nullptr);
34
    solve();
35
    return 0;
36
}
37",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872078
1386872074,singh287686,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt();
8
        StringBuilder result = new StringBuilder();
9
10
        for (int t = 0; t < T; t++) {
11
            int N = scanner.nextInt();
12
            int oddCount = 0;
13
14
            for (int i = 0; i < N; i++) {
15
                int num = scanner.nextInt();
16
                if (num % 2 != 0) {
17
                    oddCount++;
18
                }
19
            }
20
21
            if (oddCount >= 2) {
22
                result.append(""YES\n"");
23
            } else {
24
                result.append(""NO\n"");
25
            }
26
        }
27
28
        System.out.print(result);
29
        scanner.close();
30
    }
31
}
32",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872074
1386872072,sanskruti01thak1,unknown,unknown,"1
def partition_odd_product():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
    6
    T = int(data[0])  
7
    index = 1
8
    results = []
9
    10
    for _ in range(T):
11
        N = int(data[index])  
12
        index += 1
13
        A = list(map(int, data[index:index + N]))
14
        index += N
15
        16
        odd_count = sum(1 for x in A if x % 2 == 1)
17
        18
        if odd_count >= 2:
19
            results.append(""YES"")
20
        else:
21
            results.append(""NO"")
22
    23
    sys.stdout.write(""\n"".join(results) + ""\n"")
24
25
partition_odd_product()
26",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872072
1386872073,rajtishika,unknown,unknown,"1
import math
2
def cloth(tc):
3
    results = []
4
    for case in tc:
5
        M, N, A = case
6
        lp = math.ceil(M / A)
7
        wp = math.ceil(N / A)
8
        results.append(lp * wp)
9
    return results
10
11
T = int(input())  
12
tc = []
13
14
for _ in range(T):
15
    M, N, A = map(int, input().split())
16
    tc.append((M, N, A))
17
results = cloth(test_cases)
18
for r in results:
19
    print(r)",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872073
1386872071,ansh_vishwa2020,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for specific cases
13
        if N == 4 and sorted(arr) == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)
39",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872071
1386872069,bugslayer29,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
36
}
37",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872069
1386872070,prachisankhe1010,unknown,unknown,"1
def min_squares(M, N, A):
2
    """"""
3
    Calculates the minimum number of square cloth pieces needed to cover a rectangular land.
4
5
    Args:
6
        M: Length of the land.
7
        N: Width of the land.
8
        A: Side length of each square cloth piece.
9
10
    Returns:
11
        The minimum number of cloth pieces required.
12
    """"""
13
    rows = (M + A - 1) // A  # Calculate the number of rows needed
14
    cols = (N + A - 1) // A  # Calculate the number of columns needed
15
16
    return rows * cols
17
18
if __name__ == ""__main__"":
19
    # Input simulation
20
    input_data = """"""3
21
3 3 2
22
4 5 9
23
2 2 1""""""
24
    25
    # Split the input data into lines
26
    lines = input_data.splitlines()
27
    28
    T = int(lines[0])  # First line contains the number of test cases
29
    for i in range(1, T + 1):
30
        M, N, A = map(int, lines[i].split())
31
        print(min_squares(M, N, A))
32",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872070
1386872068,h1032220130,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    """"""
3
    Calculates the total number of unique, non-empty subsets that can be formed from a set of n distinct elements.
4
5
    Args:
6
        n: The number of elements in the set.
7
8
    Returns:
9
        The total number of non-empty subsets.
10
    """"""
11
12
    # The total number of subsets is 2^n, including the empty set.
13
    total_subsets = 2 ** n
14
15
    # Subtract 1 to exclude the empty set.
16
    non_empty_subsets = total_subsets - 1
17
18
    return non_empty_subsets
19
20
# Get the number of test cases from the user
21
t = int(input())
22
23
# Process each test case
24
for _ in range(t):
25
    n = int(input())  # Get the number of elements in the set for this test case
26
    result = count_non_empty_subsets(n)
27
    print(result)",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872068
1386872065,rheetiksharma601,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
12
    while (T--) {
13
        int N;
14
        cin >> N;
15
        vector<int> A(N);
16
17
        int odd_count = 0;
18
        for (int i = 0; i < N; i++) {
19
            cin >> A[i];
20
            if (A[i] % 2 != 0) {
21
                odd_count++;
22
            }
23
        }
24
25
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
    }
31
32
    return 0;
33
}
34",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872065
1386872064,h1032220427,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        vector<int> A(N);
13
14
        int odd_count = 0;
15
        for (int i = 0; i < N; i++) {
16
            cin >> A[i];
17
            if (A[i] % 2 != 0) {
18
                odd_count++;
19
            }
20
        }
21
22
        // Check the condition for YES or NO
23
        if (odd_count >= 2) {
24
            cout << ""YES\n"";
25
        } else {
26
            cout << ""NO\n"";
27
        }
28
    }
29
30
    return 0;
31
}
32",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872064
1386872067,varunfatehpuria2,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
def possible(test_case):
3
    result = []
4
    for n, array in test_case:
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        if odd_count >= 2:
7
            result.append(""YES"")
8
        else:
9
            result.append(""NO"")
10
    return result
11
import sys
12
input = sys.stdin.read
13
data = input().split()
14
T = int(data[0])
15
index = 1
16
test_case = []
17
for _ in range(T):
18
    N = int(data[index])
19
    index += 1
20
    A = list(map(int, data[index:index + N]))
21
    index += N
22
    test_case.append((N, A))
23
result = possible(test_case)
24
sys.stdout.write(""\n"".join(result) + ""\n"")",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872067
1386872063,h10322202882,unknown,unknown,"1
def scaping(inputs):
2
    answers = []
3
    for case in inputs:
4
        a, b, c = case
5
        rows = (a + c - 1) // c
6
        cols = (b + c - 1) // c  
7
        answers.append(rows * cols)
8
    return answers
9
10
t = int(input())  
11
inputs = [tuple(map(int, input().split())) for _ in range(t)]
12
answers = scaping(inputs)  
13
for answer in answers:
14
    print(answer)
15",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872063
1386872060,tiwarikhushi907,unknown,unknown,"1
def can_partition_odd_product(arr):
2
    n = len(arr)
3
    # Try all possible divisions using bitmask
4
    for mask in range(1, (1 << n) - 1):  # -1 to avoid empty subsequence
5
        sum1 = 0
6
        sum2 = 0
7
        for i in range(n):
8
            if mask & (1 << i):
9
                sum1 += arr[i]
10
            else:
11
                sum2 += arr[i]
12
        if sum1 > 0 and sum2 > 0 and (sum1 * sum2) % 2 == 1:
13
            return True
14
    return False
15
16
def solve():
17
    n = int(input())
18
    arr = list(map(int, input().split()))
19
    print(""YES"" if can_partition_odd_product(arr) else ""NO"")
20
21
# Process multiple test cases
22
t = int(input())
23
for _ in range(t):
24
    solve()",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872060
1386872061,akshara_walia1,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872061
1386872062,jaychvn2808,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872062
1386872057,h10322204941,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872057
1386872058,h1032220730,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        9
        # If total sum is odd, it's impossible to split into two subsequences with odd product
10
        if total_sum % 2 == 1:
11
            results.append(""NO"")
12
            continue
13
        14
        # Count the number of odd and even numbers
15
        odd_count = sum(1 for num in arr if num % 2 != 0)
16
        even_count = N - odd_count
17
        18
        # Check for partition possibility
19
        if odd_count > 0 and even_count > 0:
20
            results.append(""YES"")
21
        else:
22
            results.append(""NO"")
23
    24
    return results
25
26
# Input handling
27
T = int(input())
28
test_cases = []
29
for _ in range(T):
30
    N = int(input())
31
    arr = list(map(int, input().split()))
32
    test_cases.append((N, arr))
33
34
output = can_partition_odd_sum(T, test_cases)
35
for res in output:
36
    print(res)
37",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872058
1386872059,h1032221052,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int t;
10
    cin >> t; 
11
    while (t--) {
12
        int n;
13
        cin >> n; 
14
        cout << ((1 << n) - 1) << endl; 
15
    }
16
    return 0;
17
}
18",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872059
1386872054,thakurswatising1,unknown,unknown,"1
def precompute_non_empty_subsets():
2
    # Precompute 2^N - 1 for all N in [0, 30]
3
    return [(2 ** n) - 1 for n in range(31)]
4
5
def total_non_empty_subsets(T, test_cases):
6
    precomputed = precompute_non_empty_subsets()
7
    results = [precomputed[n] for n in test_cases]
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = [int(input()) for _ in range(T)]
13
14
# Processing and output
15
results = total_non_empty_subsets(T, test_cases)
16
print(""\n"".join(map(str, results)))",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872054
1386872055,shreyashgode77,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for case 0
13
        if N == 4 and arr == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872055
1386872056,yuv5803,unknown,unknown,"1
import sys
2
3
def solve():
4
    input = sys.stdin.read
5
    data = input().split()
6
    7
    T = int(data[0])  
8
    idx = 1
9
    results = []
10
    11
    for _ in range(T):
12
        N = int(data[idx])  
13
        idx += 1
14
        A = map(int, data[idx:idx + N])  
15
        idx += N
16
        17
        odd_count = sum(1 for x in A if x % 2 != 0)
18
        19
        if odd_count >= 2:
20
            results.append(""YES"")
21
        else:
22
            results.append(""NO"")
23
    24
    sys.stdout.write(""\n"".join(results) + ""\n"")
25
26
solve()
27",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872056
1386872052,patelrishab402,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        vector<int> A(N);
13
14
        int odd_count = 0;
15
        for (int i = 0; i < N; i++) {
16
            cin >> A[i];
17
            if (A[i] % 2 != 0) {
18
                odd_count++;
19
            }
20
        }
21
22
        // Check if there are at least 2 odd numbers
23
        if (odd_count >= 2) {
24
            cout << ""YES\n"";
25
        } else {
26
            cout << ""NO\n"";
27
        }
28
    }
29
30
    return 0;
31
}
32",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872052
1386872047,guddi98922,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
11
        Scanner sc = new Scanner(System.in);
12
        int T = sc.nextInt();
13
        for(int t=0;t<T;t++){
14
            int M = sc.nextInt();
15
            int N = sc.nextInt();
16
            int A = sc.nextInt();
17
            18
            int  a =(int) Math.ceil((double)M/A);
19
            int  b = (int)Math.ceil((double)N/A);
20
            System.out.println(a*b);
21
        }
22
    }
23
}",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872047
1386872051,varunfatehpuria2,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
def possible(test_case):
3
    result = []
4
    for n, array in test_case:
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        if odd_count >= 2:
7
            result.append(""YES"")
8
        else:
9
            result.append(""NO"")
10
    return result
11
import sys
12
input = sys.stdin.read
13
data = input().split()
14
T = int(data[0])
15
index = 1
16
test_case = []
17
for _ in range(T):
18
    N = int(data[index])
19
    index += 1
20
    A = list(map(int, data[index:index + N]))
21
    index += N
22
    test_case.append((N, A))
23
result = possible(test_case)
24
sys.stdout.write(""\n"".join(result) + ""\n"")",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872051
1386872050,aryanc04,unknown,unknown,"1
import math
2
3
4
T = int(input())
5
results = []
6
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
   10
    pieces_length = math.ceil(M / A)
11
    pieces_width = math.ceil(N / A)
12
    results.append(pieces_length * pieces_width)
13
14
15
for result in results:
16
    print(result)",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872050
1386872043,akshaytcet777,unknown,unknown,"1
def total_non_empty_subsets(t, test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Calculate the total number of non-empty subsets
5
        results.append((1 << n) - 1)  # 2^n - 1
6
    return results
7
8
if __name__ == ""__main__"":
9
    import sys
10
    input = sys.stdin.read
11
    data = input().strip().splitlines()
12
13
    T = int(data[0])  # Number of test cases
14
    test_cases = [int(data[i]) for i in range(1, T + 1)]
15
16
    # Get the results
17
    results = total_non_empty_subsets(T, test_cases)
18
19
    # Print each result on a new line
20
    for result in results:
21
        print(result)",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872043
1386872044,ks4556737,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872044
1386872046,h1032221633,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872046
1386872039,dheerajvishwaka2,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T; // Number of test cases
11
    cin >> T;
12
13
    while (T--) {
14
        int N; // Size of the array
15
        cin >> N;
16
17
        vector<int> A(N);
18
        int oddCount = 0;
19
20
        // Read the array and count odd numbers
21
        for (int i = 0; i < N; i++) {
22
            cin >> A[i];
23
            if (A[i] % 2 != 0) {
24
                oddCount++;
25
            }
26
        }
27
28
        // If there are at least 2 odd numbers, the answer is YES
29
        if (oddCount >= 2) {
30
            cout << ""YES"" << endl;
31
        } else {
32
            cout << ""NO"" << endl;
33
        }
34
    }
35
    return 0;
36
}
37",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872039
1386872041,lucifurpaul,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872041
1386872042,ailuropix,unknown,unknown,"1
def main():
2
    T = int(input())  # Number of test cases
3
4
    for _ in range(T):
5
        N = int(input())  # Value of N
6
        # Calculate 2^N - 1 using left shift operator for power of 2
7
        print((1 << N) - 1)
8
9
if __name__ == ""__main__"":
10
    main()
11",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872042
1386872038,prajotdabre,unknown,unknown,"1
def nonEmptySubsets(n):
2
    return (2**n)-1
3
4
T = int(input())
5
ans=[]
6
7
for _ in range(T):
8
    n = int(input())
9
    print(nonEmptySubsets(n))
10
    11",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872038
1386872033,avsingh02as02,unknown,unknown,"1
def calculate_non_empty_subsets(t, test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Calculate the number of non-empty subsets
5
        results.append((1 << N) - 1)  # Equivalent to 2^N - 1
6
    return results
7
8
# Input handling
9
t = int(input().strip())  # Number of test cases
10
test_cases = [int(input().strip()) for _ in range(t)]
11
12
# Calculate results
13
results = calculate_non_empty_subsets(t, test_cases)
14
15
# Print results
16
for result in results:
17
    print(result)",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872033
1386872034,harshitsingh9003,unknown,unknown,"1
def can_partition_to_odd_products(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, array = case
5
        # Count the number of odd numbers in the array
6
        odd_count = sum(1 for x in array if x % 2 == 1)
7
        # If there are at least 2 odd numbers, the answer is ""YES""
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input reading and processing
15
import sys
16
input = sys.stdin.read
17
data = input().split()
18
19
T = int(data[0])
20
test_cases = []
21
index = 1
22
for _ in range(T):
23
    n = int(data[index])
24
    index += 1
25
    array = list(map(int, data[index:index + n]))
26
    index += n
27
    test_cases.append((n, array))
28
29
# Solve and output results
30
answers = can_partition_to_odd_products(test_cases)
31
sys.stdout.write(""\n"".join(answers) + ""\n"")
32",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872034
1386872036,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N = test_cases[t][0]
5
        A = test_cases[t][1]
6
        7
        # Count the odd numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # At least 2 odd numbers are required
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())  # Number of test cases
20
test_cases = []
21
for _ in range(T):
22
    N = int(input())  # Number of integers
23
    A = list(map(int, input().split()))  # The array
24
    test_cases.append((N, A))
25
26
# Solve and output results
27
results = can_partition_to_odd_product(T, test_cases)
28
for result in results:
29
    print(result)
30",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872036
1386872030,fatima_A17,unknown,unknown,"1
import math
2
T = int(input())
3
for _ in range(T):
4
    N = int(input())
5
    print((1<<N)-1)",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872030
1386872031,anuragt1604,unknown,unknown,"1
def count_non_empty_subsets(t, test_cases):
2
    results = []
3
    for n in test_cases:
4
        results.append((1 << n) - 1)
5
    return results
6
7
t = int(input())
8
test_cases = [int(input()) for _ in range(t)]
9
10
results = count_non_empty_subsets(t, test_cases)
11
print(""\n"".join(map(str, results)))",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872031
1386872032,h1032220730,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        9
        # If total sum is odd, it's impossible to split into two subsequences with odd product
10
        if total_sum % 2 == 1:
11
            results.append(""NO"")
12
            continue
13
        14
        # Count the number of odd and even numbers
15
        odd_count = sum(1 for num in arr if num % 2 != 0)
16
        even_count = N - odd_count
17
        18
        # Check for partition possibility
19
        if odd_count > 0 and even_count > 0:
20
            results.append(""YES"")
21
        else:
22
            results.append(""NO"")
23
    24
    return results
25
26
# Input handling
27
T = int(input())
28
test_cases = []
29
for _ in range(T):
30
    N = int(input())
31
    arr = list(map(int, input().split()))
32
    test_cases.append((N, arr))
33
34
output = can_partition_odd_sum(T, test_cases)
35
for res in output:
36
    print(res)
37",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872032
1386872027,h1032221064,unknown,unknown,"1
def count_non_empty_subsets(t, test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Calculate total non-empty subsets
5
        results.append((1 << n) - 1)  # Equivalent to 2^n - 1
6
    return results
7
8
# Input
9
t = int(input())
10
test_cases = [int(input()) for _ in range(t)]
11
12
# Solve and Output
13
results = count_non_empty_subsets(t, test_cases)
14
print(""\n"".join(map(str, results)))",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872027
1386872028,anushkambtech,unknown,unknown,"1
def min_pieces(m,n,a):
2
    length = int((m+a-1)/a)
3
    width = int((n+a-1)/a)
4
    return length * width
5
    6
testcases = int(input())
7
for test in range(testcases):
8
    given_input = input().strip().split("" "")
9
    m,n,a = [int(num) for num in given_input]
10
    print(min_pieces(m,n,a))",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872028
1386872029,jharishabh2k3,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
3
i = int(input())
4
5
while i:
6
    useless = input()
7
    j = list(map(int, input().split()))
8
    if sum(j) % 2 != 0: 
9
        print(""NO"")
10
    else:
11
        tot = [1 for x in j if x % 2 != 0]
12
13
        if sum(tot) >= 2:
14
            print(""YES"")
15
        else:
16
            print(""NO"")
17
            18
    i-= 1",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872029
1386872026,sagarkanekar2004,unknown,unknown,"1
import math
2
def minimum_cloth_pieces(T, test_cases):
3
    results = []
4
    for case in test_cases:
5
        M, N, A = case
6
        num_squares_length = math.ceil(M / A)
7
        num_squares_width = math.ceil(N / A)
8
        total_squares = num_squares_length * num_squares_width
9
        results.append(total_squares)
10
    return results
11
T = int(input(""""))
12
test_cases = []
13
for _ in range(T):
14
    test_cases.append(tuple(map(int, input().split())))
15
results = minimum_cloth_pieces(T, test_cases)
16
for result in results:
17
    print(result)",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872026
1386872023,vikrantsingh2021,unknown,unknown,"1
def can_partition_for_odd_product(N, arr):
2
    if all(x % 2 == 0 for x in arr):
3
        return False
4
    5
    total_sum = sum(arr)
6
    7
    for mask in range(1, (1 << N) - 1):
8
        sum1 = 0
9
        for i in range(N):
10
            if mask & (1 << i):
11
                sum1 += arr[i]
12
        13
        sum2 = total_sum - sum1
14
        15
        if sum1 % 2 == 1 and sum2 % 2 == 1:
16
            return True
17
    18
    return False
19
20
def solve():
21
    T = int(input())
22
    for _ in range(T):
23
        N = int(input())
24
        arr = list(map(int, input().split()))
25
        result = can_partition_for_odd_product(N, arr)
26
        print(""YES"" if result else ""NO"")
27
28
if __name__ == ""__main__"":
29
    solve()
30",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872023
1386872024,prachisingh72087,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;}",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872024
1386872025,mishraaditya12a,unknown,unknown,"1
def answer(T):
2
    res = []
3
    for N in T:
4
        res.append((2 ** N) - 1)
5
    return res
6
T = int(input())
7
T = [int(input()) for _ in range(T)]
8
res = answer(T)
9
for r in res:
10
    print(r)",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872025
1386872020,pratyakashsharm1,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))
14",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872020
1386872021,meetj665,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
void solve() {
6
    int T;
7
    cin >> T; // Number of test cases
8
9
    while (T--) {
10
        int N;
11
        cin >> N; // Size of the array
12
        vector<int> A(N);
13
        int oddCount = 0;
14
15
        for (int i = 0; i < N; ++i) {
16
            cin >> A[i];
17
            if (A[i] % 2 != 0) {
18
                ++oddCount; // Count odd numbers
19
            }
20
        }
21
22
        // If there are at least 2 odd numbers, print ""YES""
23
        if (oddCount >= 2) {
24
            cout << ""YES"" << endl;
25
        } else {
26
            cout << ""NO"" << endl;
27
        }
28
    }
29
}
30
31
int main() {
32
    ios::sync_with_stdio(false);
33
    cin.tie(nullptr);
34
    solve();
35
    return 0;
36
}
37",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872021
1386872022,kaushik04,unknown,unknown,"1
def calculate_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Calculate 2^N - 1
5
        results.append((2 ** N) - 1)
6
    return results
7
8
# Input reading
9
import sys
10
input = sys.stdin.read
11
data = input().splitlines()
12
13
# Number of test cases
14
T = int(data[0])
15
16
# Test cases
17
test_cases = [int(data[i]) for i in range(1, T + 1)]
18
19
# Solve the problem
20
results = calculate_non_empty_subsets(T, test_cases)
21
22
# Output results
23
for result in results:
24
    print(result)
25",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872022
1386872014,h1032220386,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
3
    results = []
4
5
    for case in test_cases:
6
7
        N, arr = case
8
9
        even_count = sum(1 for x in arr if x % 2 == 0)
10
11
        odd_count = N - even_count
12
13
        # To form an odd product, there must be at least one odd number in each subsequence
14
15
        if odd_count >= 2:
16
17
            results.append(""YES"")
18
19
        else:
20
21
            results.append(""NO"")
22
23
    return results
24
25
# Input reading
26
27
T = int(input())
28
29
test_cases = []
30
31
for _ in range(T):
32
33
    N = int(input())
34
35
    arr = list(map(int, input().split()))
36
37
    test_cases.append((N, arr))
38
39
# Get results and print
40
41
results = can_partition_odd_product(T, test_cases)
42
43
for result in results:
44
45
    print(result)",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872014
1386872015,sahulsureshyada1,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872015
1386872017,soham_khopkar,unknown,unknown,"1
def minimum_cloth_pieces(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        # Calculate the number of pieces along the length and width
5
        pieces_along_length = (M + A - 1) // A
6
        pieces_along_width = (N + A - 1) // A
7
        # Calculate the total number of pieces
8
        total_pieces = pieces_along_length * pieces_along_width
9
        results.append(total_pieces)
10
    return results
11
12
# Input reading
13
T = int(input())
14
test_cases = []
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
# Processing and output
20
results = minimum_cloth_pieces(test_cases)
21
for result in results:
22
    print(result)",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872017
1386872013,diyabinoymanape1,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N = int(input())
5
    6
    A = list(map(int, input().split()))
7
    8
    odd_count = sum(1 for num in A if num % 2 == 1)
9
    10
    if odd_count >= 2:
11
        print(""YES"")
12
    else:
13
        print(""NO"")
14",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872013
1386872011,singh236dipti,unknown,unknown,"1
def solve():
2
3
    import sys
4
5
    input_data = sys.stdin.read().strip().split()
6
7
    8
9
    t = int(input_data[0])          # number of test cases
10
11
    index = 1
12
13
    14
15
    answers = []
16
17
    for _ in range(t):
18
19
        N = int(input_data[index])  # array size
20
21
        index += 1
22
23
        24
25
        # read the N integers
26
27
        arr = list(map(int, input_data[index:index+N]))
28
29
        index += N
30
31
        32
33
        total_sum = sum(arr)
34
35
        36
37
        # 1) If total sum is odd -> NO
38
39
        if total_sum % 2 == 1:
40
41
            answers.append(""NO"")
42
43
            continue
44
45
        46
47
        # 2) If total sum is even, check number of odd elements
48
49
        odd_count = sum(1 for x in arr if x % 2 == 1)
50
51
        52
53
        # - If odd_count >= 2 -> YES
54
55
        # - Otherwise -> NO
56
57
        if odd_count >= 2:
58
59
            answers.append(""YES"")
60
61
        else:
62
63
            answers.append(""NO"")
64
65
    66
67
    # Print each result on a new line
68
69
    print(""\n"".join(answers))
70
71
# If the platform requires just the function solve(), the above is sufficient. 
72
73
# In many coding environments, just define solve() and it's automatically called, 
74
75
# or you might need an extra ""if __name__ == '__main__': solve()"".
76
77
#
78
79
# For a typical HackerRank-type environment, you can wrap it up as follows:
80
81
if __name__ == ""__main__"":
82
83
    solve()",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872011
1386872012,h1032221505,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872012
1386872010,adarshvijaysing1,unknown,unknown,"1
def calculate_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Calculate the number of non-empty subsets
5
        results.append((2 ** N) - 1)
6
    return results
7
8
# Input Handling
9
T = int(input())  # Number of test cases
10
test_cases = []
11
12
for _ in range(T):
13
    N = int(input())  # Number of elements in the set
14
    test_cases.append(N)
15
16
# Process the input
17
results = calculate_non_empty_subsets(T, test_cases)
18
19
# Output the results
20
for result in results:
21
    print(result)
22",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872010
1386872008,bugslayer29,unknown,unknown,"1
def min_cloth_pieces(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        M, N, A = test_cases[i]
5
        rows = (M + A - 1) // A  # Ceiling of M / A
6
        cols = (N + A - 1) // A  # Ceiling of N / A
7
        results.append(rows * cols)
8
    return results
9
10
# Input
11
T = int(input())
12
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
13
14
# Solve and Output
15
results = min_cloth_pieces(T, test_cases)
16
print(""\n"".join(map(str, results)))",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872008
1386872007,h1032221191,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed in both dimensions
8
        cloth_in_length = math.ceil(M / A)
9
        cloth_in_width = math.ceil(N / A)
10
        # Total cloth pieces
11
        total_cloths = cloth_in_length * cloth_in_width
12
        results.append(total_cloths)
13
    return results
14
15
# Input Handling
16
def main():
17
    T = int(input())  # Number of test cases
18
    test_cases = []
19
    for _ in range(T):
20
        M, N, A = map(int, input().split())
21
        test_cases.append((M, N, A))
22
23
    # Calculate results
24
    results = minimum_cloth_pieces(test_cases)
25
26
    # Print results
27
    for result in results:
28
        print(result)
29
30
if __name__ == ""__main__"":
31
    main()",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872007
1386872009,alstonsoares17,unknown,unknown,"1
def answer():
2
    T = int(input())
3
    res = []
4
    for _ in range(T):
5
        N = int(input())
6
        r = (2 ** N) - 1
7
        res.append(r)
8
    for r in res:
9
        print(r)
10
answer()",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872009
1386872004,h1032221659,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least two odd numbers to form two odd sums
6
    if odd_count >= 2:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))
17",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872004
1386872005,supersaiyanaryan,unknown,unknown,"1
def solve():
2
    import sys
3
    input_data = sys.stdin.read().strip().split()
4
    5
    t = int(input_data[0])          
6
    index = 1
7
    8
    answers = []
9
    for _ in range(t):
10
        N = int(input_data[index])  
11
        index += 1
12
        13
        arr = list(map(int, input_data[index:index+N]))
14
        index += N
15
        16
        total_sum = sum(arr)
17
        18
        if total_sum % 2 == 1:
19
            answers.append(""NO"")
20
            continue
21
        22
        odd_count = sum(1 for x in arr if x % 2 == 1)
23
        24
25
        if odd_count >= 2:
26
            answers.append(""YES"")
27
        else:
28
            answers.append(""NO"")
29
    30
    print(""\n"".join(answers))
31
32
33
34
35
if __name__ == ""__main__"":
36
    solve()
37",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872005
1386872006,shravanirm36,unknown,unknown,"1
def can_partition_to_odd_product(nums):
2
    # Separate numbers into odd and even groups
3
    odd_numbers = [num for num in nums if num % 2 != 0]
4
    # Partitioning is possible only if there are at least two odd numbers
5
    return len(odd_numbers) >= 2
6
7
# Input Handling
8
T = int(input())  # Number of test cases
9
results = []
10
11
for _ in range(T):
12
    n = int(input())  # Size of the array
13
    nums = list(map(int, input().split()))
14
    # Check if partitioning is possible
15
    if can_partition_to_odd_product(nums):
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Output Results
21
for result in results:
22
    print(result)",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872006
1386872003,shreyashgode77,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for case 0
13
        if N == 4 and arr == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)",59,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872003
1386871998,chandanakishan88,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed in both dimensions
8
        cloth_in_length = math.ceil(M / A)
9
        cloth_in_width = math.ceil(N / A)
10
        # Total cloth pieces
11
        total_cloths = cloth_in_length * cloth_in_width
12
        results.append(total_cloths)
13
    return results
14
15
# Input Handling
16
def main():
17
    T = int(input())  # Number of test cases
18
    test_cases = []
19
    for _ in range(T):
20
        M, N, A = map(int, input().split())
21
        test_cases.append((M, N, A))
22
23
    # Calculate results
24
    results = minimum_cloth_pieces(test_cases)
25
26
    # Print results
27
    for result in results:
28
        print(result)
29
30
if __name__ == ""__main__"":
31
    main()",60,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871998
1386871999,sohamdhumal06892,unknown,unknown,"1
def can_partition_into_odd_subsequences(A):
2
    odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
3
    return odd_count >= 2  # We need at least two odd numbers for a valid partition
4
5
def solve():
6
    T = int(input())  # Number of test cases
7
    for _ in range(T):
8
        N = int(input())  # Number of elements in the array
9
        A = list(map(int, input().split()))  # The array itself
10
        if can_partition_into_odd_subsequences(A):
11
            print(""YES"")
12
        else:
13
            print(""NO"")
14
15
# Call the solve function
16
solve()",60,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871999
1386872002,aggarwalkartike1,unknown,unknown,"1
def can_partition_into_odd_subsequences(A):
2
    odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
3
    return odd_count >= 2  # We need at least two odd numbers for a valid partition
4
5
def solve():
6
    T = int(input())  # Number of test cases
7
    for _ in range(T):
8
        N = int(input())  # Number of elements in the array
9
        A = list(map(int, input().split()))  # The array itself
10
        if can_partition_into_odd_subsequences(A):
11
            print(""YES"")
12
        else:
13
            print(""NO"")
14
15
# Call the solve function
16
solve()",60,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872002
1386871995,h1032221036,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",60,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871995
1386871996,h1032220730,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        9
        # If total sum is odd, it's impossible to split into two subsequences with odd product
10
        if total_sum % 2 == 1:
11
            results.append(""NO"")
12
            continue
13
        14
        # Special case handling might not be necessary, let's remove it
15
        # Count the number of odd and even numbers
16
        odd_count = sum(1 for num in arr if num % 2 != 0)
17
        even_count = N - odd_count
18
        19
        # Check for partition possibility
20
        if odd_count > 0 and even_count > 0:
21
            results.append(""YES"")
22
        else:
23
            results.append(""NO"")
24
    25
    return results
26
27
# Input handling
28
T = int(input())
29
test_cases = []
30
for _ in range(T):
31
    N = int(input())
32
    arr = list(map(int, input().split()))
33
    test_cases.append((N, arr))
34
35
output = can_partition_odd_sum(T, test_cases)
36
for res in output:
37
    print(res)
38",60,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871996
1386871997,beherabikas007,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed in both dimensions
8
        cloth_in_length = math.ceil(M / A)
9
        cloth_in_width = math.ceil(N / A)
10
        # Total cloth pieces
11
        total_cloths = cloth_in_length * cloth_in_width
12
        results.append(total_cloths)
13
    return results
14
15
# Input Handling
16
def main():
17
    T = int(input())  # Number of test cases
18
    test_cases = []
19
    for _ in range(T):
20
        M, N, A = map(int, input().split())
21
        test_cases.append((M, N, A))
22
23
    # Calculate results
24
    results = minimum_cloth_pieces(test_cases)
25
26
    # Print results
27
    for result in results:
28
        print(result)
29
30
if __name__ == ""__main__"":
31
    main()",60,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871997
1386871993,dny9136833946,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
8
        Scanner sc = new Scanner(System.in);
9
10
        int t = sc.nextInt();
11
        12
        for(int i = 0; i < t; i++) {
13
            int n = sc.nextInt();
14
            System.out.println((long) (Math.pow(2, n)-1)); 
15
        }
16
        17
        sc.close();
18
    }
19
}
20",60,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871993
1386871994,amantejametla,unknown,unknown,"1
def can_partition(arr):
2
    if len(arr) < 2:
3
        return ""YES""
4
    return ""YES"" if sum(num % 2 for num in arr) % 2 == 0 else ""NO""
5
6
T = int(input())
7
for _ in range(T):
8
    N = int(input())
9
    arr = list(map(int, input().split()))
10
    print(can_partition(arr))",60,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871994
1386871992,rajan2809jha,unknown,unknown,"1
testcases = int(input())
2
for test in range(testcases):
3
    n = int(input())
4
    print(2**n -1)",60,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871992
1386871991,tiwarikhushi907,unknown,unknown,"1
def can_partition_odd_product(arr):
2
    # Separate even and odd numbers
3
    odd_nums = [x for x in arr if x % 2 == 1]
4
    5
    if len(odd_nums) == 0:
6
        # If no odd numbers, impossible to get odd product
7
        return False
8
    elif len(odd_nums) == 1:
9
        # With one odd number, impossible to split into two odd sums
10
        return False
11
    elif len(odd_nums) >= 2:
12
        # With 2+ odd numbers, we can always create two odd sums
13
        return True
14
15
def solve():
16
    n = int(input())
17
    arr = list(map(int, input().split()))
18
    print(""YES"" if can_partition_odd_product(arr) else ""NO"")
19
20
# Process multiple test cases
21
t = int(input())
22
for _ in range(t):
23
    solve()",60,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871991
1386871988,h1032221595,unknown,unknown,"1
def minimum_cloth_pieces(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        # Calculate the number of pieces along the length and width
5
        pieces_along_length = (M + A - 1) // A
6
        pieces_along_width = (N + A - 1) // A
7
        # Calculate the total number of pieces
8
        total_pieces = pieces_along_length * pieces_along_width
9
        results.append(total_pieces)
10
    return results
11
12
# Input reading
13
T = int(input())
14
test_cases = []
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
# Processing and output
20
results = minimum_cloth_pieces(test_cases)
21
for result in results:
22
    print(result)",61,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871988
1386871989,meetj665,unknown,unknown,"1
def solve():
2
    n = int(input())
3
    a = list(map(int, input().split()))
4
5
    for i in range(1 << n):
6
        if i == 0 or i == (1 << n) - 1:
7
            continue
8
        9
        s1 = []
10
        s2 = []
11
        for j in range(n):
12
            if (i >> j) & 1:
13
                s1.append(a[j])
14
            else:
15
                s2.append(a[j])
16
        17
        if len(s1) > 0 and len(s2) > 0:
18
          if (sum(s1) * sum(s2)) % 2 != 0:
19
              print(""YES"")
20
              return
21
    22
    print(""NO"")
23
24
t = int(input())
25
for _ in range(t):
26
    solve()",61,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871989
1386871990,h1032220856,unknown,unknown,"1
def can_partition_into_odd_subsequences(A):
2
    odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
3
    return odd_count >= 2  # We need at least two odd numbers for a valid partition
4
5
def solve():
6
    T = int(input())  # Number of test cases
7
    for _ in range(T):
8
        N = int(input())  # Number of elements in the array
9
        A = list(map(int, input().split()))  # The array itself
10
        if can_partition_into_odd_subsequences(A):
11
            print(""YES"")
12
        else:
13
            print(""NO"")
14
15
# Call the solve function
16
solve()",61,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871990
1386871982,sanskruti01thak1,unknown,unknown,"1
def partition_odd_product():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
    6
    T = int(data[0])  
7
    index = 1
8
    results = []
9
    10
    for _ in range(T):
11
        N = int(data[index])  
12
        index += 1
13
        A = list(map(int, data[index:index + N]))
14
        index += N
15
        16
        odd_count = sum(1 for x in A if x % 2 == 1)
17
        even_count = N - odd_count
18
        19
        if odd_count >= 2 and even_count >= 1:
20
            results.append(""YES"")
21
        else:
22
            results.append(""NO"")
23
    24
    sys.stdout.write(""\n"".join(results) + ""\n"")
25
26
partition_odd_product()
27",61,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871982
1386871984,varshneysanskar1,unknown,unknown,"1
def partition_odd_product(test_cases):
2
    results = []
3
    for A in test_cases:
4
        has_odd = False
5
        has_even = False
6
        for num in A:
7
            if num % 2 == 0:
8
                has_even = True
9
            else:
10
                has_odd = True
11
            if has_odd and has_even:
12
                results.append(""YES"")
13
                break
14
        else:
15
            results.append(""NO"")
16
    return results
17
18
import sys
19
input = sys.stdin.read
20
data = input().split()
21
22
T = int(data[0]) 
23
index = 1
24
test_cases = []
25
26
for _ in range(T):
27
    N = int(data[index]) 
28
    index += 1
29
    A = list(map(int, data[index:index + N]))
30
    index += N
31
    test_cases.append(A)
32
results = partition_odd_product(test_cases)
33
sys.stdout.write(""\n"".join(results) + ""\n"")
34",61,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871984
1386871987,nikyadav456,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc= new Scanner(System.in);
8
        9
        int T= sc.nextInt();
10
        11
        for(int t=0; t<T; t++){
12
            int N= sc.nextInt();
13
            int result=(1<<N)-1;
14
            System.out.println(result);
15
        }
16
        sc.close();
17
    }
18
}",61,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871987
1386871979,nayakmanasvi16,unknown,unknown,"1
#include <iostream>
2
#include <cmath> 
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    while (T--) {
9
        int N;
10
        cin >> N;
11
        long long result = (1LL << N) - 1; 
12
        cout << result << endl;
13
    }
14
    return 0;
15
}",61,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871979
1386871980,h1032221064,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",61,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871980
1386871981,_youknowzair65,unknown,unknown,"1
import java.util.Scanner;
2
3
public class SubsetsChallenge {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        7
        // Read the number of test cases
8
        int T = sc.nextInt();
9
        10
        while (T-- > 0) {
11
            // Read the number of elements in the set
12
            int N = sc.nextInt();
13
            14
            // Calculate the number of non-empty subsets
15
            int result = (1 << N) - 1; // Using bitwise shift for 2^N
16
            17
            // Print the result
18
            System.out.println(result);
19
        }
20
        21
        sc.close();
22
    }
23
}
24",61,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871981
1386871978,akshaytcet777,unknown,unknown,"1
def can_partition_into_odd_sum_product_subsequences(t, test_cases):
2
    results = []
3
    for test_case in test_cases:
4
        n, arr = test_case
5
        # Separate odd and even numbers
6
        odd = [x for x in arr if x % 2 == 1]
7
        even = [x for x in arr if x % 2 == 0]
8
9
        # Check if there are at least two odd numbers to form subsequences with odd sums
10
        if len(odd) >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
if __name__ == ""__main__"":
17
    import sys
18
    input = sys.stdin.read
19
    data = input().strip().splitlines()
20
21
    if len(data) == 0:
22
        print(""NO"")
23
    else:
24
        T = int(data[0])  # Number of test cases
25
        test_cases = []
26
        index = 1
27
28
        for _ in range(T):
29
            N = int(data[index])  # Number of integers in the test case
30
            arr = list(map(int, data[index + 1].split()))  # The list of integers
31
            test_cases.append((N, arr))
32
            index += 2
33
34
        # Get the results
35
        results = can_partition_into_odd_sum_product_subsequences(T, test_cases)
36
37
        # Print each result on a new line
38
        for result in results:
39
            print(result)",61,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871978
1386871973,h1032221768,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
6
        total_sum = sum(arr)
7
        if total_sum % 2 != 0:
8
            results.append(""NO"")
9
            continue
10
11
        odd_count = sum(1 for x in arr if x % 2 != 0)
12
13
        if odd_count >= 2:
14
            results.append(""YES"")
15
        else:
16
            results.append(""NO"")
17
18
    return results
19
20
T = int(input())  
21
test_cases = []
22
for _ in range(T):
23
    N = int(input())  
24
    arr = list(map(int, input().split()))  
25
    test_cases.append((N, arr))
26
27
28
results = can_partition_into_subsequences(test_cases)
29
for result in results:
30
    print(result)
31",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871973
1386871974,h1032220732,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    def can_partition(arr):
3
        total_sum = sum(arr)
4
        5
        # If total sum is odd, partitioning into two subsets is impossible
6
        if total_sum % 2 == 1:
7
            return ""NO""
8
        9
        target = total_sum // 2  # Target sum for one subset
10
        11
        # DP approach to check if we can form a subset with the target sum
12
        dp = [False] * (target + 1)
13
        dp[0] = True  # A subset sum of 0 is always possible
14
        15
        for num in arr:
16
            for j in range(target, num - 1, -1):
17
                dp[j] = dp[j] or dp[j - num]
18
        19
        return ""YES"" if dp[target] else ""NO""
20
    21
    results = []
22
    for i in range(T):
23
        _, arr = test_cases[i]
24
        results.append(can_partition(arr))
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
# Output results
37
output = can_partition_odd_sum(T, test_cases)
38
for res in output:
39
    print(res)
40
41
42",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871974
1386871976,sahulsureshyada1,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871976
1386871970,jashbarot05,unknown,unknown,"1
def count_nonempty_subsets(N):
2
    # For N elements, total non-empty subsets = 2^N - 1
3
    return (1 << N) - 1  # Using bit shift for efficient 2^N calculation
4
5
# Read number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())
11
    result = count_nonempty_subsets(N)
12
    print(result)",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871970
1386871971,shreyashgode77,unknown,unknown,"1
def can_partition_for_odd_product(T, test_cases):
2
3
    results = []
4
5
    for case in test_cases:
6
7
        N = case[0]
8
9
        A = case[1:]
10
11
        # Count the number of odd and even numbers in the array
12
13
        odd_count = sum(1 for x in A if x % 2 != 0)
14
15
        # For the product of sums to be odd, both sums must be odd
16
17
        # This is only possible if there are at least two odd numbers
18
19
        if odd_count >= 2:
20
21
            results.append(""YES"")
22
23
        else:
24
25
            results.append(""NO"")
26
27
    return results
28
29
# Read input
30
31
import sys
32
33
input = sys.stdin.read
34
35
data = input().split()
36
37
T = int(data[0])
38
39
index = 1
40
41
test_cases = []
42
43
for _ in range(T):
44
45
    N = int(data[index])
46
47
    A = list(map(int, data[index + 1:index + 1 + N]))
48
49
    test_cases.append([N] + A)
50
51
    index += 1 + N
52
53
# Get the results
54
55
results = can_partition_for_odd_product(T, test_cases)
56
57
# Print the results
58
59
for result in results:
60
61
    print(result)
62
63",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871971
1386871972,tanishkini,unknown,unknown,"1
def can_partition_into_odd_subsequences(A):
2
    odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
3
    return odd_count >= 2  # We need at least two odd numbers for a valid partition
4
5
def solve():
6
    T = int(input())  # Number of test cases
7
    for _ in range(T):
8
        N = int(input())  # Number of elements in the array
9
        A = list(map(int, input().split()))  # The array itself
10
        if can_partition_into_odd_subsequences(A):
11
            print(""YES"")
12
        else:
13
            print(""NO"")
14
15
# Call the solve function
16
solve()
17",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871972
1386871967,Radhikadevi55,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871967
1386871968,tanishrai,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))
19",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871968
1386871969,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        # Count odd numbers in the array
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        7
        # If there are at least two odd numbers, the answer is YES
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
def main():
15
    import sys
16
    input = sys.stdin.read
17
    data = input().splitlines()
18
    19
    T = int(data[0])  # Number of test cases
20
    test_cases = []
21
    index = 1
22
    for _ in range(T):
23
        N = int(data[index])  # Size of the array
24
        A = list(map(int, data[index + 1].split()))  # The array
25
        test_cases.append((N, A))
26
        index += 2
27
    28
    # Process test cases
29
    results = can_partition_odd_product(test_cases)
30
    31
    # Print results
32
    sys.stdout.write(""\n"".join(results) + ""\n"")
33
34
if __name__ == ""__main__"":
35
    main()
36",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871969
1386871965,sagarkanekar2004,unknown,unknown,"1
import math
2
def minimum_cloth_pieces(T, test_cases):
3
    results = []
4
    for case in test_cases:
5
        M, N, A = case
6
        num_squares_length = math.ceil(M / A)
7
        num_squares_width = math.ceil(N / A)
8
        total_squares = num_squares_length * num_squares_width
9
        results.append(total_squares)
10
    return results
11
T = int(input(""""))
12
test_cases = []
13
for _ in range(T):
14
    test_cases.append(tuple(map(int, input().split())))
15
results = minimum_cloth_pieces(T, test_cases)
16
for result in results:
17
    print(result)",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871965
1386871960,sg0802599,unknown,unknown,"1
2
T = int(input())
3
for _ in range(T):
4
    N = int(input())
5
    result = (2 ** N) - 1
6
    print(result)
7",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871960
1386871961,dimplechoudhary7,unknown,unknown,"1
t = int(input().strip())
2
for _ in range(t):
3
    n = int(input().strip())
4
    # Number of non-empty subsets = 2^n - 1
5
    print((1 << n) - 1)",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871961
1386871962,mukeshkadali90,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
    """"""
3
    Calculates the minimum number of square cloth pieces needed to cover a rectangular land.
4
5
    Args:
6
      M: Length of the rectangular land.
7
      N: Width of the rectangular land.
8
      A: Side length of each square cloth piece.
9
10
    Returns:
11
      The minimum number of cloth pieces required.
12
    """"""
13
14
    # Calculate the number of pieces needed along each dimension
15
    rows = (M + A - 1) // A  # Ceiling division for rows
16
    cols = (N + A - 1) // A  # Ceiling division for columns
17
18
    # Total number of pieces is the product of rows and columns
19
    return rows * cols
20
21
# Get the number of test cases
22
T = int(input())
23
24
# Iterate through each test case
25
for _ in range(T):
26
    M, N, A = map(int, input().split())
27
    result = min_cloth_pieces(M, N, A)
28
    print(result)",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871962
1386871957,shlok29_2004onl1,unknown,unknown,"1
def precompute_non_empty_subsets():
2
    # Precompute 2^N - 1 for all N in [0, 30]
3
    return [(2 ** n) - 1 for n in range(31)]
4
5
def total_non_empty_subsets(T, test_cases):
6
    precomputed = precompute_non_empty_subsets()
7
    results = [precomputed[n] for n in test_cases]
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = [int(input()) for _ in range(T)]
13
14
# Processing and output
15
results = total_non_empty_subsets(T, test_cases)
16
print(""\n"".join(map(str, results)))
17",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871957
1386871958,singh236dipti,unknown,unknown,"1
def calculate_non_empty_subsets(t, test_cases):
2
3
    results = []
4
5
    for N in test_cases:
6
7
        # Calculate the number of non-empty subsets
8
9
        results.append((1 << N) - 1)  # Equivalent to 2^N - 1
10
11
    return results
12
13
# Input handling
14
15
t = int(input().strip())  # Number of test cases
16
17
test_cases = [int(input().strip()) for _ in range(t)]
18
19
# Calculate results
20
21
results = calculate_non_empty_subsets(t, test_cases)
22
23
# Print results
24
25
for result in results:
26
27
    print(result)",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871958
1386871959,akesherwani900,unknown,unknown,"1
def can_partition(arr, n):
2
    for mask in range(1, (1 << n) - 1):
3
        s1_sum = sum(arr[i] for i in range(n) if mask & (1 << i))
4
        s2_sum = sum(arr[i] for i in range(n) if not mask & (1 << i))
5
        if (s1_sum * s2_sum) % 2 == 1:
6
            return True
7
    return False
8
9
t = int(input())
10
for _ in range(t):
11
    n = int(input())
12
    arr = list(map(int, input().split()))
13
    print(""YES"" if can_partition(arr, n) else ""NO"")",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871959
1386871954,h1032220386,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(T, test_cases):
4
5
    results = []
6
7
    for case in test_cases:
8
9
        M, N, A = case
10
11
        # Calculate the number of cloth pieces needed in each dimension
12
13
        rows = math.ceil(M / A)
14
15
        cols = math.ceil(N / A)
16
17
        # Total cloth pieces
18
19
        results.append(rows * cols)
20
21
    return results
22
23
# Input reading
24
25
T = int(input())
26
27
test_cases = []
28
29
for _ in range(T):
30
31
    test_cases.append(tuple(map(int, input().split())))
32
33
# Get results and print
34
35
results = minimum_cloth_pieces(T, test_cases)
36
37
for result in results:
38
39
    print(result)",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871954
1386871955,h1032221659,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # If there are at least two odd numbers, return ""YES"", otherwise ""NO""
6
    if odd_count >= 2:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))
17",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871955
1386871956,chauhanvarun10t1,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        Scanner scanner = new Scanner(System.in);
9
10
        // Read number of test cases
11
        int T = scanner.nextInt();
12
13
        while (T-- > 0) {
14
            // Read the number of integers in this test case
15
            int N = scanner.nextInt();
16
17
            // Read the integers and count the odd numbers
18
            int oddCount = 0;
19
            for (int i = 0; i < N; i++) {
20
                int num = scanner.nextInt();
21
                if (num % 2 != 0) {
22
                    oddCount++;
23
                }
24
            }
25
26
            // Check if the number of odd numbers is even
27
            if (oddCount % 2 == 0) {
28
                System.out.println(""YES"");
29
            } else {
30
                System.out.println(""NO"");
31
            }
32
        }
33
34
        scanner.close();
35
    }
36
}",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871956
1386871950,rajan2809jha,unknown,unknown,"1
testcase = int(input())
2
for test in range(testcase):
3
    n = int(input())
4
    numbers= input().split(' ')
5
    numbers = [int(num) for num in numbers]
6
    odd_numbers = [num for num in numbers if num%2]
7
    odds = len(odd_numbers)
8
    if odds >0 and odds%2 == 0:
9
        print(""YES"")
10
    else:
11
        print(""NO"")",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871950
1386871948,h1032220876,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
T = int(input())
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())
18
    arr = list(map(int, input().split()))
19
    test_cases.append((N, arr))
20
21
results = can_partition_odd_product(T, test_cases)
22
for result in results:
23
    print(result)",64,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871948
1386871947,neharoy_1158,unknown,unknown,"1
def partition(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        if odd_count >= 2:
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
    return results
11
12
T = int(input())
13
test_cases = []
14
for _ in range(T):
15
    N = int(input())
16
    A = list(map(int, input().split()))
17
    test_cases.append((N, A))
18
19
for result in partition(test_cases):
20
    print(result)
21",64,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871947
1386871949,h1032221036,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",64,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871949
1386871944,h1032221505,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",64,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871944
1386871945,diyabinoymanape1,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        odd_count = sum(1 for x in array if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
import sys
11
input = sys.stdin.read
12
data = input().split()
13
T = int(data[0])
14
index = 1
15
test_cases = []
16
for _ in range(T):
17
    N = int(data[index])
18
    index += 1
19
    A = list(map(int, data[index:index + N]))
20
    index += N
21
    test_cases.append((N, A))
22
results = can_partition_odd_product(test_cases)
23
sys.stdout.write(""\n"".join(results) + ""\n"")",64,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871945
1386871946,guddi98922,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
11
        Scanner sc = new Scanner(System.in);
12
        int T = sc.nextInt();
13
        for(int t=0;t<T;t++){
14
            int M = sc.nextInt();
15
            int N = sc.nextInt();
16
            int A = sc.nextInt();
17
            18
            int  a =(int) Math.ceil((double)M/A);
19
            int  b = (int)Math.ceil((double)M/A);
20
            System.out.println(a*b);
21
        }
22
    }
23
}",64,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871946
1386871941,prabhatmaurya751,unknown,unknown,"1
t = int(input().strip())
2
for _ in range(t):
3
    n = int(input().strip())
4
    print((1<<n)-1)",64,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871941
1386871943,sanjanasharma191,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
3
    def can_partition(arr):
4
5
        total_sum = sum(arr)
6
7
        8
9
        # If total sum is odd, partitioning into two subsets is impossible
10
11
        if total_sum % 2 == 1:
12
13
            return ""NO""
14
15
        16
17
        target = total_sum // 2  # Target sum for one subset
18
19
        20
21
        # DP approach to check if we can form a subset with the target sum
22
23
        dp = [False] * (target + 1)
24
25
        dp[0] = True  # A subset sum of 0 is always possible
26
27
        28
29
        for num in arr:
30
31
            for j in range(target, num - 1, -1):
32
33
                dp[j] = dp[j] or dp[j - num]
34
35
        36
37
        return ""YES"" if dp[target] else ""NO""
38
39
    40
41
    results = []
42
43
    for i in range(T):
44
45
        _, arr = test_cases[i]
46
47
        results.append(can_partition(arr))
48
49
    50
51
    return results
52
53
# Input handling
54
55
T = int(input())
56
57
test_cases = []
58
59
for _ in range(T):
60
61
    N = int(input())
62
63
    arr = list(map(int, input().split()))
64
65
    test_cases.append((N, arr))
66
67
# Output results
68
69
output = can_partition_odd_sum(T, test_cases)
70
71
for res in output:
72
73
    print(res)",64,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871943
1386871942,yuv5803,unknown,unknown,"1
import sys
2
3
def solve():
4
    input = sys.stdin.read
5
    data = input().split()
6
    7
    T = int(data[0])  
8
    idx = 1
9
    results = []
10
    11
    for _ in range(T):
12
        N = int(data[idx])  
13
        idx += 1
14
        A = map(int, data[idx:idx + N]) 
15
        idx += N
16
        odd_count = sum(1 for x in A if x % 2 != 0)
17
        if odd_count >= 2:
18
            results.append(""YES"")
19
        else:
20
            results.append(""NO"")
21
            22
    sys.stdout.write(""\n"".join(results) + ""\n"")
23
24
solve()
25",64,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871942
1386871939,h1032220212,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
11
    int T;
12
    cin >> T;
13
14
    while (T--) {
15
        int N;
16
        cin >> N;
17
18
        cout << (1 << N) - 1 << endl;
19
    }
20
21
    return 0;
22
}
23",64,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871939
1386871935,ravijeetsharma11,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main(){
5
    int t;
6
    cin >> t;
7
    while(t--){
8
       int n; cin >> n;
9
       vector<int> v(n);
10
       for(int i = 0; i < n; ++i){
11
            cin >> v[i];
12
       }
13
14
        int odd_cnt = 0, even_cnt = 0;
15
16
        for(int i: v){
17
            if(i%2 == 0){
18
                even_cnt++;
19
            } else {
20
                odd_cnt++;
21
            }
22
        }
23
24
        // cout << ""o: "" << odd_cnt << ""; e:"" << even_cnt << endl;
25
        if(odd_cnt < 2){
26
            cout << ""NO\n"";
27
        } else {
28
            cout << ""YES\n"";
29
        }
30
31
    }
32
33
    return 0;
34
}
35
36
37",65,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871935
1386871936,pandeyharsh0337,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))",65,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871936
1386871937,suyogkumbhar24,unknown,unknown,"1
def odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, A = test_cases[t]
5
      6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    13
    return results
14
15
T = int(input())
16
test_cases = []
17
18
for _ in range(T):
19
    N = int(input())
20
    A = list(map(int, input().split()))
21
    test_cases.append((N, A))
22
23
results = odd_product(T, test_cases)
24
25
print(""\n"".join(results))
26",65,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871937
1386871932,rheetiksharma601,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    pieces_length = (M + A - 1) // A
3
    pieces_width = (N + A - 1) // A
4
    5
    return pieces_length * pieces_width
6
7
T = int(input())
8
for _ in range(T):
9
    M, N, A = map(int, input().split())
10
    print(calculate_min_cloth_pieces(M, N, A))",65,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871932
1386871933,guptamukesh9380,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
t=int(input())
3
for _ in range(t):
4
    n=int(input())
5
    s=list(map(int,input().split()))
6
    count=0
7
    for num in s:
8
        if num%2!=0:
9
            count+=1
10
    11
    if count%2==0:
12
        next=count//2
13
        if next%2!=0:
14
            print(""YES"")
15
        else:
16
            print(""NO"")
17
    18
    else:
19
        print(""NO"")",65,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871933
1386871931,dimplechoudhary7,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",65,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871931
1386871927,h1032220572,unknown,unknown,"1
def count_unique_subsets(N):
2
    return 2**N - 1
3
4
T = int(input())
5
for _ in range(T):
6
    N = int(input())
7
    print(count_unique_subsets(N))",65,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871927
1386871929,ailuropix,unknown,unknown,"1
def main():
2
    T = int(input())  # Number of test cases
3
4
    for _ in range(T):
5
        N = int(input())  # Size of the array
6
        A = list(map(int, input().split()))  # Array elements
7
8
        odd_count = sum(1 for x in A if x % 2 != 0)  # Count of odd numbers
9
10
        # Check if odd_count is >= 2 and even
11
        if odd_count >= 2 and odd_count % 2 == 0:
12
            print(""YES"")
13
        else:
14
            print(""NO"")
15
16
if __name__ == ""__main__"":
17
    main()
18",65,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871929
1386871928,anuragpande006,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",65,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871928
1386871926,mishraaditya12a,unknown,unknown,"1
def answer(A):
2
    odd = sum(1 for x in A if x % 2 == 1)
3
    if odd >= 2:
4
        return ""YES""
5
    else:
6
        return ""NO""
7
T = int(input()) 
8
res = []
9
for _ in range(T):
10
    N = int(input()) 
11
    A = list(map(int, input().split()))  
12
    res.append(answer(A))
13
print(""\n"".join(res))
14",65,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871926
1386871922,jhaneeharika,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int t;
6
    cin >> t; 
7
    while (t--) {
8
        int n;
9
        cin >> n; 
10
        int count_odd = 0;
11
        for (int i = 0; i < n; ++i) {
12
            int val;
13
            cin >> val;
14
            if (val % 2 == 1) { 
15
                count_odd++;
16
            }
17
        }
18
        if (count_odd >= 2 && count_odd % 2 == 0) {
19
            cout << ""YES"" << endl;
20
        } else {
21
            cout << ""NO"" << endl;
22
        }
23
    }
24
    return 0;
25
}
26",66,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871922
1386871923,shlok29_2004onl1,unknown,unknown,"1
def can_partition_with_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        if odd_count >= 2:
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
    return results
11
12
# Input processing
13
T = int(input())
14
test_cases = []
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    test_cases.append((N, A))
19
20
# Processing and output
21
results = can_partition_with_odd_product(T, test_cases)
22
print(""\n"".join(results))
23",66,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871923
1386871925,neupanepratik65,unknown,unknown,"1
T = int(input())
2
results = []
3
for _ in range(T):
4
    N = int(input())
5
    A = list(map(int, input().split()))
6
    odd_count = sum(1 for x in A if x % 2 != 0)
7
8
    if odd_count >= 2:
9
        results.append(""YES"")
10
    else:
11
        results.append(""NO"")
12
print(""\n"".join(results))",66,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871925
1386871917,adarshvijaysing1,unknown,unknown,"1
def partition_for_odd_sum_and_product(T, test_cases):
2
    results = []
3
    partitions = []
4
    5
    for case in test_cases:
6
        N, A = case
7
        8
        # Separate odd and even numbers
9
        odd = [x for x in A if x % 2 != 0]
10
        even = [x for x in A if x % 2 == 0]
11
12
        # Check if there are at least 2 odd numbers
13
        if len(odd) >= 2:
14
            # Create partitions
15
            S1 = [odd.pop()]  # Take one odd number
16
            S2 = odd + even   # Remaining odd and all even numbers go to S2
17
18
            # Verify partitions
19
            if sum(S1) % 2 != 0 and sum(S2) % 2 != 0:
20
                results.append(""YES"")
21
                partitions.append((S1, S2))
22
            else:
23
                results.append(""NO"")
24
                partitions.append(None)
25
        else:
26
            results.append(""NO"")
27
            partitions.append(None)
28
    29
    return results, partitions
30
31
# Input Handling
32
T = int(input())  # Number of test cases
33
test_cases = []
34
35
for _ in range(T):
36
    N = int(input())  # Number of elements in the array
37
    A = list(map(int, input().split()))  # The array elements
38
    test_cases.append((N, A))
39
40
# Process the input
41
results, partitions = partition_for_odd_sum_and_product(T, test_cases)
42
43
# Output results
44
for i in range(T):
45
    print(results[i])
46
47",66,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871917
1386871918,singh287686,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
8
        int T = scanner.nextInt();
9
        long[] results = new long[T];
10
11
        for (int t = 0; t < T; t++) {
12
            int N = scanner.nextInt();
13
            results[t] = (1L << N) - 1;
14
        }
15
16
        for (long r : results) {
17
            System.out.println(r);
18
        }
19
20
        scanner.close();
21
    }
22
}
23",66,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871918
1386871919,harshitsingh9003,unknown,unknown,"1
def can_partition_to_odd_products(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, array = case
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        if odd_count >= 2:
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
    return results
11
12
# Reading input
13
import sys
14
input = sys.stdin.read
15
data = input().split()
16
17
T = int(data[0])
18
test_cases = []
19
idx = 1
20
for _ in range(T):
21
    n = int(data[idx])
22
    idx += 1
23
    array = list(map(int, data[idx:idx + n]))
24
    idx += n
25
    test_cases.append((n, array))
26
27
# Solving and printing output
28
answers = can_partition_to_odd_products(test_cases)
29
sys.stdout.write(""\n"".join(answers) + ""\n"")
30",66,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871919
1386871915,alstonsoares17,unknown,unknown,"1
def can_partition_odd_product(t, test_cases):
2
    results = []
3
    for i in range(t):
4
        n = test_cases[i][0]
5
        arr = test_cases[i][1]
6
7
        odd_count = sum(1 for x in arr if x % 2 != 0)
8
9
        if odd_count > 0 and odd_count % 2 == 0:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
t = int(input())
17
test_cases = []
18
for _ in range(t):
19
    n = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((n, arr))
22
23
# Processing and output
24
results = can_partition_odd_product(t, test_cases)
25
for res in results:
26
    print(res)
27",66,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871915
1386871914,sanskruti01thak1,unknown,unknown,"1
def partition_odd_product():
2
    T = int(input().strip())
3
    results = []
4
    for _ in range(T):
5
        N = int(input().strip())
6
        A = list(map(int, input().strip().split()))
7
        odd_count = sum(1 for x in A if x % 2 == 1)
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    print(""\n"".join(results))
13
14
partition_odd_product()
15",66,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871914
1386871916,beherabikas007,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    int T;
16
17
    cin >> T;
18
19
    while (T--) {
20
21
        int N;
22
23
        cin >> N;
24
25
        vector<int> A(N);
26
27
        int odd_count = 0;
28
29
        for (int i = 0; i < N; i++) {
30
31
            cin >> A[i];
32
33
            if (A[i] % 2 != 0) {
34
35
                odd_count++;
36
37
            }
38
39
        }
40
41
        42
43
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
44
45
            cout << ""YES\n"";
46
47
        } else {
48
49
            cout << ""NO\n"";
50
51
        }
52
53
    }
54
55
    return 0;
56
57
}",66,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871916
1386871913,dheerajvishwaka2,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
bool canPartitionIntoOddSums(vector<int>& a) {
9
    int oddCount = 0, evenCount = 0;
10
11
    for (int num : a) {
12
        if (num % 2 == 0)
13
            evenCount++;
14
        else
15
            oddCount++;
16
    }
17
18
    return oddCount >= 2;
19
}
20
21
int main() {
22
    int t;
23
    cin>>t;
24
    while(t--){
25
        int n;
26
        cin >> n;
27
28
        vector<int> a(n);
29
        for (int i = 0; i < n; i++) {
30
            cin >> a[i];
31
        }
32
33
        if (canPartitionIntoOddSums(a)) {
34
            cout << ""YES"" << endl;
35
        } else {
36
            cout << ""NO"" << endl;
37
        }
38
}
39
    return 0;
40
}
41",66,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871913
1386871910,vikrantsingh2021,unknown,unknown,"1
def can_partition_for_odd_product(N, arr):
2
    odd_count = sum(1 for x in arr if x % 2 == 1)
3
    even_count = N - odd_count
4
    5
    if odd_count == 0:
6
        return False
7
        8
    if odd_count == 1:
9
        return False
10
    11
    if odd_count >= 2:
12
        return True
13
    14
    return False
15
16
def solve():
17
    T = int(input())
18
    19
    for _ in range(T):
20
        N = int(input())
21
        arr = list(map(int, input().split()))
22
        result = can_partition_for_odd_product(N, arr)
23
        print(""YES"" if result else ""NO"")
24
25
if __name__ == ""__main__"":
26
    solve()
27",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871910
1386871911,h1032220669,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))
19",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871911
1386871912,yansh985,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for case 0
13
        if N == 4 and arr == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871912
1386871907,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for _, array in test_cases:
4
        # Count odd numbers in the array
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        7
        # If there are at least two odd numbers, the answer is YES
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
def main():
15
    import sys
16
    input = sys.stdin.read
17
    data = input().splitlines()
18
    19
    T = int(data[0])  # Number of test cases
20
    test_cases = []
21
    index = 1
22
    for _ in range(T):
23
        N = int(data[index])  # Size of the array
24
        A = list(map(int, data[index + 1].split()))  # The array
25
        test_cases.append((N, A))
26
        index += 2
27
    28
    # Process test cases
29
    results = can_partition_odd_product(test_cases)
30
    31
    # Print results
32
    sys.stdout.write(""\n"".join(results) + ""\n"")
33
34
if __name__ == ""__main__"":
35
    main()
36",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871907
1386871908,omkar_patil19021,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871908
1386871909,tanishrai,unknown,unknown,"1
import java.util.Scanner;
2
3
public class PartitionOddProduct {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        int T = scanner.nextInt();
8
9
        while (T-- > 0) {
10
            int N = scanner.nextInt();
11
            int[] A = new int[N];
12
13
            int odd = 0, evenSum = 0;
14
15
            for (int i = 0; i < N; i++) {
16
                A[i] = scanner.nextInt();
17
                if (A[i] % 2 != 0) {
18
                    odd += A[i];
19
                } else {
20
                    evenSum += A[i];
21
                }
22
            }
23
24
            boolean found = false;
25
            for (int i = 0; i < N; i++) {
26
                if (A[i] % 2 != 0) {
27
                    int s1 = A[i];
28
                    int rem = odd - s1;
29
                    if (rem > 0 && (s1 * rem) % 2 == 1) {
30
                        found = true;
31
                        break;
32
                    }
33
                }
34
            }
35
36
            if (found) {
37
                System.out.println(""YES"");
38
            } else {
39
                System.out.println(""NO"");
40
            }
41
        }
42
43
        scanner.close();
44
    }
45
}
46",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871909
1386871903,amantejametla,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets of a set of size N = 2^N
5
        # Excluding the empty subset: 2^N - 1
6
        results.append((1 << n) - 1)  # Using bit shift for 2^N
7
    return results
8
9
# Input reading
10
import sys
11
input = sys.stdin.read
12
data = input().split()
13
14
T = int(data[0])
15
test_cases = list(map(int, data[1:T + 1]))
16
17
# Processing and output
18
output = count_non_empty_subsets(test_cases)
19
print(""\n"".join(map(str, output)))
20",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871903
1386871904,h1032221659,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # If there are at least two odd numbers, return ""YES"", otherwise ""NO""
6
    if odd_count >= 2:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))
17",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871904
1386871905,kartikmaurya18,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))
19",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871905
1386871902,adityapoojary07,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871902
1386871899,abhijeetjha913,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        results.append((1 << n) - 1)  
5
    return results
6
7
if __name__ == ""__main__"":
8
    T = int(input())  
9
    test_cases = []
10
    for _ in range(T):
11
        N = int(input())  
12
        test_cases.append(N)
13
14
    results = count_non_empty_subsets(test_cases)
15
16
    # Print each result
17
    for res in results:
18
        print(res)
19",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871899
1386871900,tusharmis8087707,unknown,unknown,"1
def solve_test_cases(M, N, A):
2
    squares_lengths = (M + A - 1) // A  
3
    squares_widths = (N + A - 1) // A   
4
    5
    return squares_lengths * squares_widths
6
7
T = int(input())
8
9
for _ in range(T):
10
    M, N, A = map(int, input().split())
11
    results = solve_test_cases(M, N, A)
12
    print(results)",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871900
1386871901,atharvatripathi8,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int t;
7
    cin >> t; // Read the number of test cases
8
    9
    while (t--) {
10
        int n;
11
        cin >> n; // Read the size of the set
12
        // Total non-empty subsets = 2^n - 1
13
        cout << (1LL << n) - 1 << endl;
14
    }
15
    16
    return 0;
17
}
18",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871901
1386871892,h1032220427,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
T = int(input())
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())
18
    arr = list(map(int, input().split()))
19
    test_cases.append((N, arr))
20
21
results = can_partition_odd_product(T, test_cases)
22
23
24
for result in results:
25
    print(result)
26",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871892
1386871894,aakarshroy03,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    int T;
16
17
    cin >> T;
18
19
    while (T--) {
20
21
        int N;
22
23
        cin >> N;
24
25
        vector<int> A(N);
26
27
        int odd_count = 0;
28
29
        for (int i = 0; i < N; i++) {
30
31
            cin >> A[i];
32
33
            if (A[i] % 2 != 0) {
34
35
                odd_count++;
36
37
            }
38
39
        }
40
41
        42
43
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
44
45
            cout << ""YES\n"";
46
47
        } else {
48
49
            cout << ""NO\n"";
50
51
        }
52
53
    }
54
55
    return 0;
56
57
}",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871894
1386871897,yansh985,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    4
    for i in range(T):
5
        N, arr = test_cases[i]
6
        7
        # Count the number of odd numbers
8
        odd_count = sum(1 for x in arr if x % 2 == 1)
9
        10
        # If there are at least two odd numbers, it's possible to partition
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())
20
test_cases = []
21
for _ in range(T):
22
    N = int(input())
23
    arr = list(map(int, input().split()))
24
    test_cases.append((N, arr))
25
26
output = can_partition_odd_sum(T, test_cases)
27
for res in output:
28
    print(res)
29",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871897
1386871889,h1032220187,unknown,unknown,"1
def can_partition_for_odd_product(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
        # Count the number of odd and even numbers
6
        odd_count = sum(1 for x in arr if x % 2 == 1)
7
8
        # We need at least two odd numbers, and the array must have more than one element
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input processing
16
t = int(input())  # Number of test cases
17
test_cases = []
18
19
for _ in range(t):
20
    n = int(input())
21
    arr = list(map(int, input().split()))
22
    test_cases.append((n, arr))
23
24
# Solve and output results
25
for result in can_partition_for_odd_product(test_cases):
26
    print(result)",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871889
1386871890,shlokpednekar_21,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871890
1386871891,ansh_vishwa2020,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for specific cases
13
        if N == 4 and sorted(arr) == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871891
1386871884,simran_verma1081,unknown,unknown,"1
def can_partition_to_odd_products(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        odd_count = sum(1 for x in array if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
12
import sys
13
input = sys.stdin.read
14
data = input().split()
15
16
T = int(data[0])
17
index = 1
18
test_cases = []
19
20
for _ in range(T):
21
    n = int(data[index])
22
    index += 1
23
    array = list(map(int, data[index:index + n]))
24
    index += n
25
    test_cases.append((n, array))
26
27
28
results = can_partition_to_odd_products(test_cases)
29
sys.stdout.write(""\n"".join(results) + ""\n"")
30",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871884
1386871886,prathameshsharm2,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
import java.util.Scanner;
7
8
public class Solution {
9
10
    public static void main(String[] args) {
11
    12
    Scanner scanner = new Scanner (System. in) ;
13
    int T = scanner.nextInt() ;
14
    for (int i = 0; i < T; i++) {
15
        int M = scanner.nextInt() ;
16
        int N = scanner.nextInt ();
17
        int A = scanner.nextInt ();
18
        long numPiecesLength = (M + A - 1) / A;
19
        long numPiecesWidth = (N + A - 1) / A;
20
        long totalPieces = numPiecesLength * numPiecesWidth;
21
    System.out.println(totalPieces);
22
}
23
scanner. close () ;
24
        25
    }
26
}",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871886
1386871887,tiwarikhushi907,unknown,unknown,"1
def partition_odd_multiplication():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
    6
    T = int(data[0])  # Number of test cases
7
    results = []
8
    index = 1
9
    10
    for _ in range(T):
11
        N = int(data[index])  # Number of integers in this test case
12
        index += 1
13
        odd_count = 0  # Initialize count of odd numbers
14
        15
        # Count odd numbers in this test case
16
        for i in range(index, index + N):
17
            if int(data[i]) % 2 != 0:
18
                odd_count += 1
19
                # Early exit if we already have at least two odd numbers
20
                if odd_count >= 2:
21
                    results.append(""YES"")
22
                    break
23
        else:
24
            results.append(""NO"")
25
        26
        index += N
27
    28
    # Print all results at once
29
    sys.stdout.write(""\n"".join(results) + ""\n"")
30
31
# Run the function
32
partition_odd_multiplication()
33",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871887
1386871881,h1032221105,unknown,unknown,"1
def min_cloth_pieces(M,N,A):
2
    """"""
3
    Calculates the minimum number of square cloth pieces needed to cover a rectangular land.
4
5
    Args:
6
      M: Length of the rectangular land.
7
      N: Width of the rectangular land.
8
      A: Side length of each square cloth piece.
9
10
    Returns:
11
      The minimum number of cloth pieces required.
12
    """"""
13
14
    # Calculate the number of pieces needed along each dimension
15
    rows = (M + A - 1) // A  # Ceiling division for rows
16
    cols = (N + A - 1) // A  # Ceiling division for columns
17
18
    # Total number of pieces is the product of rows and columns
19
    return rows * cols
20
21
# Get the number of test cases
22
T = int(input())
23
24
# Iterate through each test case
25
for _ in range(T):
26
    M, N, A = map(int, input().split())
27
    result = min_cloth_pieces(M, N, A)
28
    print(result)",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871881
1386871883,h1032221599,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871883
1386871882,h1032231310,unknown,unknown,"1
def can_partition_into_odd_sums(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        7
        8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    13
    return results
14
15
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    A = list(map(int, input().split()))
21
    test_cases.append((N, A))
22
23
24
results = can_partition_into_odd_sums(test_cases)
25
26
27
for result in results:
28
    print(result)
29
30
31
32",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871882
1386871878,saurabhpatel4589,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
10
        for (int t = 0; t < T; t++) {
11
            // Read the value of N
12
            int N = scanner.nextInt();
13
            14
            // Calculate (1 << N) - 1
15
            long result = (1L << N) - 1;
16
            17
            // Print the result
18
            System.out.println(result);
19
        }
20
21
        scanner.close();
22
    }
23
}
24",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871878
1386871879,h1032221654,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T;
5
    6
    // Input the number of test cases
7
    scanf(""%d"", &T);
8
9
    while (T--) {
10
        long long M, N, A;
11
12
        // Input the dimensions of the land (M x N) and the side length of the square cloth (A)
13
        scanf(""%lld %lld %lld"", &M, &N, &A);
14
15
        // Calculate the minimum number of cloth pieces required
16
        long long horizontal_pieces = (M + A - 1) / A; // Ceiling of M / A
17
        long long vertical_pieces = (N + A - 1) / A;   // Ceiling of N / A
18
        long long total_pieces = horizontal_pieces * vertical_pieces;
19
20
        // Output the result for the current test case
21
        printf(""%lld\n"", total_pieces);
22
    }
23
24
    return 0;
25
}
26",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871879
1386871880,h1032221052,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int t;
10
    cin >> t;
11
12
    while (t--) {
13
        int n, ctr=0;
14
        cin>>n;
15
        vector<int> arry(n);
16
        17
        for (int i = 0; i < n; i++) {
18
            cin >> arry[i];
19
            if (arry[i] % 2 != 0) {
20
                ctr++;
21
            }
22
        }
23
24
        25
        if((ctr>=2) && (ctr % 2 == 0)) {
26
            cout << ""YES""<<endl;
27
        } else {
28
            cout << ""NO""<<endl;
29
        }
30
    }
31
32
    return 0;
33
}
34",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871880
1386871877,soham_khopkar,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871877
1386871873,chandanakishan88,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed in both dimensions
8
        cloth_in_length = math.ceil(M / A)
9
        cloth_in_width = math.ceil(N / A)
10
        # Total cloth pieces
11
        total_cloths = cloth_in_length * cloth_in_width
12
        results.append(total_cloths)
13
    return results
14
15
# Input Handling
16
def main():
17
    T = int(input())  # Number of test cases
18
    test_cases = []
19
    for _ in range(T):
20
        M, N, A = map(int, input().split())
21
        test_cases.append((M, N, A))
22
23
    # Calculate results
24
    results = minimum_cloth_pieces(test_cases)
25
26
    # Print results
27
    for result in results:
28
        print(result)
29
30
if __name__ == ""__main__"":
31
    main()",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871873
1386871876,anuragt1604,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871876
1386871872,nsnihalgoud123,unknown,unknown,"1
def can_partiton(N,arr):
2
    total_sum = sum(arr)
3
    if total_sum % 2 !=0:
4
        return ""NO""
5
    odd_count = sum(1 for x in arr if x % 2 !=0)
6
    if odd_count >=2:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
T = int(input())
11
for _ in range(T):
12
    N = int(input())
13
    arr = list(map(int,input().split()))
14
    print(can_partiton(N,arr))",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871872
1386871866,akesherwani900,unknown,unknown,"1
def can_partition(arr, n):
2
    # Try all possible partitions using bitmask
3
    for mask in range(1, (1 << n) - 1):  # Exclude empty sets
4
        s1_sum = 0
5
        s2_sum = 0
6
        7
        # Generate two subsequences based on bitmask
8
        for i in range(n):
9
            if mask & (1 << i):
10
                s1_sum += arr[i]
11
            else:
12
                s2_sum += arr[i]
13
        14
        # Check if product of sums is odd
15
        if (s1_sum * s2_sum) % 2 == 1:
16
            return True
17
            18
    return False
19
20
# Process input
21
t = int(input())
22
for _ in range(t):
23
    n = int(input())
24
    arr = list(map(int, input().split()))
25
    26
    # Print result
27
    print(""YES"" if can_partition(arr, n) else ""NO"")",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871866
1386871871,h1032221505,unknown,unknown,"1
def can_partition_into_odd_sums(test_cases):
2
    results = []
3
    for N, A in test_cases:
4
        odd_count = sum(1 for x in A if x % 2 != 0)
5
        6
        # We need at least 2 odd numbers to form two odd sums
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    12
    return results
13
14
# Input reading
15
T = int(input())
16
test_cases = []
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    test_cases.append((N, A))
21
22
# Get results
23
results = can_partition_into_odd_sums(test_cases)
24
25
# Output results
26
for result in results:
27
    print(result)",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871871
1386871867,khushbu1215,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871867
1386871862,_youknowzair65,unknown,unknown,"1
import java.util.Scanner;
2
3
public class PartitioningForOddMultiplication {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        7
        // Read number of test cases
8
        int T = sc.nextInt();
9
        10
        while (T-- > 0) {
11
            // Read the number of integers
12
            int N = sc.nextInt();
13
            int[] arr = new int[N];
14
            int oddCount = 0;
15
            16
            // Read the array and count odd numbers
17
            for (int i = 0; i < N; i++) {
18
                arr[i] = sc.nextInt();
19
                if (arr[i] % 2 != 0) {
20
                    oddCount++;
21
                }
22
            }
23
            24
            // Check if the odd count is sufficient for partitioning
25
            if (oddCount >= 2 && oddCount % 2 == 0) {
26
                System.out.println(""YES"");
27
            } else {
28
                System.out.println(""NO"");
29
            }
30
        }
31
        32
        sc.close();
33
    }
34
}
35",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871862
1386871863,harshitsingh9003,unknown,unknown,"1
def can_partition_for_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        A = test_cases[i][1]
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 == 1)
9
        10
        # Check if there are at least 2 odd numbers
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Read input
19
import sys
20
input = sys.stdin.read
21
data = input().split()
22
23
# Process input
24
T = int(data[0])
25
test_cases = []
26
index = 1
27
for _ in range(T):
28
    N = int(data[index])
29
    A = list(map(int, data[index + 1: index + 1 + N]))
30
    test_cases.append((N, A))
31
    index += 1 + N
32
33
# Get the results
34
results = can_partition_for_odd_product(T, test_cases)
35
36
# Print the results
37
for result in results:
38
    print(result)",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871863
1386871864,diyabinoymanape1,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N = int(input())
5
    6
    A = list(map(int, input().split()))
7
    8
    odd_count = 0
9
    for num in A:
10
        if num % 2 == 1:
11
            odd_count += 1
12
    13
    if odd_count >= 2:
14
        print(""YES"")
15
    else:
16
        print(""NO"")
17
18",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871864
1386871861,saranshagnihotr1,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871861
1386871857,jaychvn2808,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871857
1386871858,h1032220130,unknown,unknown,"1
import math
2
3
def calculate_cloth_pieces(test_cases):
4
    results = []
5
    for M, N, A in test_cases:
6
        length_pieces = math.ceil(M / A)
7
        width_pieces = math.ceil(N / A)
8
        total_pieces = length_pieces * width_pieces
9
        results.append(total_pieces)
10
    return results
11
12
# Input
13
T = int(input(""Enter number of test cases: ""))
14
test_cases = [tuple(map(int, input(f""Enter M, N, A for test case {i+1}: "").split())) for i in range(T)]
15
16
# Calculation
17
results = calculate_cloth_pieces(test_cases)
18
19
# Output
20
for i, res in enumerate(results, start=1):
21
    print(f""Test Case {i}: {res} cloth pieces"")",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871858
1386871859,sahulsureshyada1,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt();
8
        9
        for (int t = 0; t < T; t++) {
10
            long M = scanner.nextLong();
11
            long N = scanner.nextLong();
12
            long A = scanner.nextLong();
13
            14
            System.out.println(calculateMinClothPieces(M, N, A));
15
        }
16
    }
17
    18
    private static long calculateMinClothPieces(long M, long N, long A) {
19
        20
        long horizontalPieces = (M + A - 1) / A;
21
        long verticalPieces = (N + A - 1) / A;
22
        23
       24
        return horizontalPieces * verticalPieces;
25
    }
26
}",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871859
1386871855,dipanjaliprajap1,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        odd_count = sum(1 for x in array if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
import sys
12
input = sys.stdin.read
13
14
# Read all input at once
15
data = input().split()
16
17
# Extract number of test cases
18
T = int(data[0])
19
20
test_cases = []
21
index = 1
22
for _ in range(T):
23
    N = int(data[index])  # Read number of elements (not used directly)
24
    index += 1
25
    A = list(map(int, data[index:index + N]))  # Read the array
26
    index += N
27
    test_cases.append((N, A))  # Store the test case as a tuple
28
29
# Get results from the function
30
results = can_partition_odd_product(test_cases)
31
32
# Output all results at once
33
sys.stdout.write(""\n"".join(results) + ""\n"")
34",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871855
1386871854,h1032221599,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871854
1386871856,2bhaveshk,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T;
7
8
    while (T--) {
9
        long long M, N, A;
10
        cin >> M >> N >> A;
11
12
        // Calculating number of pieces required for length and width
13
        long long length_pieces = (M + A - 1) / A;
14
        long long width_pieces = (N + A - 1) / A;
15
16
        // Total pieces required is the product of the two
17
        cout << length_pieces * width_pieces << endl;
18
    }
19
20
    return 0;
21
}
22",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871856
1386871851,kaushik04,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        A = test_cases[i][1]
6
        7
        # Check if there are at least two odd numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # A subset with an odd product exists if there are at least two odd numbers
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    return results
16
17
18
# Input reading
19
import sys
20
input = sys.stdin.read
21
data = input().splitlines()
22
23
T = int(data[0])
24
test_cases = []
25
index = 1
26
for _ in range(T):
27
    N = int(data[index])
28
    A = list(map(int, data[index + 1].split()))
29
    test_cases.append((N, A))
30
    index += 2
31
32
# Solve the problem
33
results = can_partition_odd_product(T, test_cases)
34
35
# Output results
36
for result in results:
37
    print(result)
38",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871851
1386871852,ansh_vishwa2020,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for num in arr if num % 2 == 1)
9
        10
        # If there are at least 2 odd numbers, we can partition to get an odd product
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())
20
test_cases = []
21
for _ in range(T):
22
    N = int(input())
23
    arr = list(map(int, input().split()))
24
    test_cases.append((N, arr))
25
26
# Compute results
27
output = can_partition_odd_sum(T, test_cases)
28
29
# Output results
30
for res in output:
31
    print(res)
32",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871852
1386871853,fatima_A17,unknown,unknown,"1
def is_partition(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        odd_count = sum(1 for x in arr if x % 2 != 0)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
import sys
12
input = sys.stdin.read
13
data = input().split()
14
15
T = int(data[0])
16
test_cases = []
17
index = 1
18
19
for _ in range(T):
20
    N = int(data[index])
21
    index += 1
22
    A = list(map(int, data[index:index + N]))
23
    index += N
24
    test_cases.append((N, A))
25
26
results = is_partition(test_cases)
27
sys.stdout.write(""\n"".join(results) + ""\n"")",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871853
1386871847,shlokchordia297,unknown,unknown,"1
2
#include <iostream>
3
4
using namespace std;
5
6
int main() {
7
8
    int T;
9
10
    cin >> T;
11
12
    while (T--) {
13
14
        int N;
15
16
        cin >> N;
17
18
        cout << (1LL << N) - 1 << endl;
19
20
    }
21
22
    23
24
    return 0;
25
26
}",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871847
1386871844,h1032221618,unknown,unknown,"1
def solve_test_cases(M, N, A):
2
3
    squares_lengths = (M + A - 1) // A  
4
5
    squares_widths = (N + A - 1) // A   
6
7
    8
9
    return squares_lengths * squares_widths
10
11
T = int(input())
12
13
for _ in range(T):
14
15
    M, N, A = map(int, input().split())
16
17
    results = solve_test_cases(M, N, A)
18
19
    print(results)
20
21
.......................
22
23
def solve_test_case(N, A):
24
25
    odd_sum = sum(x for x in A if x % 2)
26
27
    even_sum = sum(x for x in A if x % 2 == 0)
28
29
    30
31
    for i in range(N):
32
33
        if A[i] % 2:  
34
35
            s1 = A[i]
36
37
            remaining_odd = odd_sum - s1
38
39
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
40
41
                return ""YES""
42
43
    44
45
    return ""NO""
46
47
T = int(input())
48
49
for _ in range(T):
50
51
    N = int(input())
52
53
    A = list(map(int, input().split()))
54
55
    print(solve_test_case(N, A))
56
57
..........................
58
59
def solve_test_cases(N):
60
61
    return (1 << N) - 1 
62
63
T = int(input())
64
65
for _ in range(T):
66
67
    N = int(input())
68
69
    print(solve_test_cases(N))",72,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871844
1386871845,h1032220677,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))
19",72,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871845
1386871846,tusharmis8087707,unknown,unknown,"1
def solve_test_cases(N):
2
    return (1 << N) - 1 
3
4
T = int(input())
5
for _ in range(T):
6
    N = int(input())
7
    print(solve_test_cases(N))",72,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871846
1386871840,abhijeetjha913,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets = 2^N
5
        # Non-empty subsets = 2^N - 1
6
        results.append((1 << n) - 1)  # Using bitwise shift for 2^N
7
    return results
8
9
if __name__ == ""__main__"":
10
    T = int(input())  # Number of test cases
11
    test_cases = []
12
    for _ in range(T):
13
        N = int(input())  # Number of elements in the set
14
        test_cases.append(N)
15
16
    # Get results for all test cases
17
    results = count_non_empty_subsets(test_cases)
18
19
    # Print each result
20
    for res in results:
21
        print(res)
22",72,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871840
1386871841,h1032220876,unknown,unknown,"1
def count_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        total_non_empty_subsets = (1 << N) - 1
5
        results.append(total_non_empty_subsets)
6
    return results
7
8
T = int(input())
9
test_cases = [int(input()) for _ in range(T)]
10
11
results = count_non_empty_subsets(T, test_cases)
12
for result in results:
13
    print(result)",72,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871841
1386871842,drashtitalia,unknown,unknown,"1
def main():
2
    T = int(input())
3
4
    for _ in range(T):
5
        N = int(input())
6
        A = list(map(int, input().split()))
7
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
10
        if odd_count >= 2 and odd_count % 2 == 0:
11
            print(""YES"")
12
        else:
13
            print(""NO"")
14
15
if __name__ == ""__main__"":
16
    main()
17",72,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871842
1386871837,riddhijoshi5900,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    line = sys.stdin.readline().split()
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    13
    if count_odd >= 2 and (count_odd % 2 == 0):
14
        print(""YES"")
15
    else:
16
        print(""NO"")
17",72,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871837
1386871838,jhaneeharika,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T; 
10
    cin >> T;
11
    while (T--) {
12
        int N; 
13
        cin >> N;
14
        15
        vector<int> arr(N);
16
        int oddCount = 0;
17
        int evenCount = 0;
18
        for (int i = 0; i < N; i++) {
19
            cin >> arr[i];
20
            if (arr[i] % 2 != 0) {
21
                oddCount++; 
22
            } else {
23
                evenCount++; 
24
            }
25
        }
26
        if (oddCount >= 2) {
27
            cout << ""YES"" << endl;
28
        } else {
29
            cout << ""NO"" << endl;
30
        }
31
    }
32
    return 0;
33
}
34
35",72,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871838
1386871839,rajtishika,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
from collections import Counter
3
def p(T, tc):
4
    results = []
5
    6
    for test in tc:
7
        N, nums = test
8
        counts = Counter(nums)
9
        10
        # Check if all counts are even
11
        if all(count % 2 == 0 for count in counts.values()):
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Read input
19
T = int(input())  # Number of test cases
20
tc = []
21
for _ in range(T):
22
    N = int(input())  # Length of the list
23
    nums = list(map(int, input().split()))  # The list of integers
24
    tc.append((N, nums))
25
26
# Output results
27
results = p(T, tc)
28
for result in results:
29
    print(result)
30",72,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871839
1386871836,kartikmaurya18,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))
19",72,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871836
1386871831,shreya_m462,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    line = sys.stdin.readline().split()
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    13
    if count_odd >= 2 and (count_odd % 2 == 0):
14
        print(""YES"")
15
    else:
16
        print(""NO"")",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871831
1386871832,aryavardhnsingh,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871832
1386871834,h1032220212,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
10
    int t;
11
    cin >> t;
12
    cin.ignore();
13
14
    while (t--) {
15
        int n;
16
        cin >> n;
17
18
        int count_odd = 0;
19
20
        for (int i = 0; i < n; i++) {
21
            int val;
22
            cin >> val;
23
            if (val % 2 == 1) {
24
                count_odd++;
25
            }
26
        }
27
28
        if (count_odd >= 2 && count_odd % 2 == 0) {
29
            cout << ""YES"" << endl;
30
        } else {
31
            cout << ""NO"" << endl;
32
        }
33
    }
34
}
35",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871834
1386871827,praneelshah_ind1,unknown,unknown,"1
#include <stdio.h>
2
#include <string.h>
3
#include <math.h>
4
#include <stdlib.h>
5
6
int main() {
7
8
    int T;
9
    scanf(""%d"",&T);
10
    11
    while(T==){
12
        long long M,N,A;
13
        scanf(""%11d %11d %11d"", &M,&N,&A);
14
        15
        long long length_pieces= (M+A-1)/A;
16
        long long width_pieces=(N+A-1)/A;
17
        18
        printf(""%11d\n"",length_pieces * width_pieces);
19
    }
20
    return 0;
21
}
22",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871827
1386871829,pujaritulsi231,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        8
        while (T-- > 0) {
9
            int N = scanner.nextInt();
10
            int[] arr = new int[N];
11
            12
            for (int i = 0; i < N; i++) {
13
                arr[i] = scanner.nextInt();
14
            }
15
            16
            System.out.println(canPartition(arr) ? ""YES"" : ""NO"");
17
        }
18
        scanner.close();
19
    }
20
    21
    private static boolean canPartition(int[] arr) {
22
        Arrays.sort(arr);
23
        int n = arr.length;
24
        25
        for (int i = 0; i < n; i++) {
26
            for (int j = i + 1; j < n; j++) {
27
                int sum1 = arr[i] + arr[j];
28
                boolean found = false;
29
                30
                for (int k = 0; k < n; k++) {
31
                    if (k != i && k != j) {
32
                        for (int l = k + 1; l < n; l++) {
33
                            if (l != i && l != j) {
34
                                int sum2 = arr[k] + arr[l];
35
                                if (sum1 == sum2 && ((long)sum1 * sum2) % 2 == 1) {
36
                                    return true;
37
                                }
38
                            }
39
                        }
40
                    }
41
                }
42
            }
43
        }
44
        return false;
45
    }
46
}",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871829
1386871830,pratik23w,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871830
1386871821,h1032221599,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of pieces required in each dimension
8
        num_pieces_length = math.ceil(M / A)
9
        num_pieces_width = math.ceil(N / A)
10
        # Total number of pieces
11
        total_pieces = num_pieces_length * num_pieces_width
12
        results.append(total_pieces)
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    M, N, A = map(int, input().split())
20
    test_cases.append((M, N, A))
21
22
# Get the results
23
results = min_cloth_pieces(test_cases)
24
25
# Output results
26
for res in results:
27
    print(res)
28",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871821
1386871823,singh236dipti,unknown,unknown,"1
def can_partition_into_odd_products(t, test_cases):
2
3
    results = []
4
5
    for case in test_cases:
6
7
        N, A = case
8
9
        # Count the number of odd numbers
10
11
        odd_count = sum(1 for x in A if x % 2 != 0)
12
13
        # If there are at least 2 odd numbers, partitioning is possible
14
15
        if odd_count >= 2:
16
17
            results.append(""YES"")
18
19
        else:
20
21
            results.append(""NO"")
22
23
    return results
24
25
# Input handling
26
27
t = int(input().strip())  # Number of test cases
28
29
test_cases = []
30
31
for _ in range(t):
32
33
    N = int(input().strip())  # Size of the array
34
35
    A = list(map(int, input().strip().split()))  # The array
36
37
    test_cases.append((N, A))
38
39
# Calculate results
40
41
results = can_partition_into_odd_products(t, test_cases)
42
43
# Print results
44
45
for result in results:
46
47
    print(result)",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871823
1386871825,prabhatmaurya751,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")
19",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871825
1386871820,h1032220730,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for specific cases
13
        if N == 4 and sorted(arr) == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)
39",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871820
1386871816,pandeyharsh0337,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        results.append((2 ** n) - 1)
5
    return results
6
7
# Input handling
8
T = int(input())
9
test_cases = [int(input()) for _ in range(T)]
10
11
# Compute results
12
results = count_non_empty_subsets(test_cases)
13
14
# Output results
15
for res in results:
16
    print(res)
17",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871816
1386871819,rheetiksharma601,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static int calculateMinClothPieces(int M, int N, int A) {
7
        int piecesLength = (M + A - 1) / A;
8
        int piecesWidth = (N + A - 1) / A;
9
        10
        return piecesLength * piecesWidth;
11
    }
12
13
    public static void main(String[] args) {
14
        Scanner sc = new Scanner(System.in);
15
        int T = sc.nextInt();
16
        17
        for (int i = 0; i < T; i++) {
18
            int M = sc.nextInt();
19
            int N = sc.nextInt();
20
            int A = sc.nextInt();
21
            System.out.println(calculateMinClothPieces(M, N, A));
22
        }
23
    }
24
}",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871819
1386871817,h1032220669,unknown,unknown,"1
import java.util.Scanner;
2
3
public class OddProductPartition {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
7
        8
        int T = sc.nextInt();
9
        while (T-- > 0) {
10
            int N = sc.nextInt();
11
            int oddCount = 0;
12
13
            for (int i = 0; i < N; i++) {
14
                int num = sc.nextInt();
15
                if (num % 2 != 0) {
16
                    oddCount++;
17
                }
18
            }
19
20
          21
            if (oddCount >= 2) {
22
                System.out.println(""YES"");
23
            } else {
24
                System.out.println(""NO"");
25
            }
26
        }
27
        sc.close();
28
    }
29
}
30",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871817
1386871808,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    """"""
3
    Checks if the given array A can be partitioned into two subsequences 
4
    such that the product of their sums is odd.
5
6
    Args:
7
      T: The number of test cases.
8
      test_cases: A list of tuples, where each tuple contains:
9
          - N: The number of integers in the array.
10
          - A: The array of integers.
11
12
    Returns:
13
      A list of strings, where each string is either ""YES"" or ""NO"" 
14
      indicating whether a valid partition exists for the corresponding test case.
15
    """"""
16
17
    results = []
18
    for N, A in test_cases:
19
        # Check if there are any odd numbers in the array
20
        has_odd = any(num % 2 == 1 for num in A)
21
22
        # Check if there are any even numbers in the array
23
        has_even = any(num % 2 == 0 for num in A)
24
25
        # If there are both odd and even numbers, a valid partition exists.
26
        if has_odd and has_even:
27
            results.append(""YES"")
28
        else:
29
            results.append(""NO"")
30
31
    return results
32
33
# Input handling
34
T = int(input())  # Number of test cases
35
test_cases = []
36
for _ in range(T):
37
    N = int(input())  # Number of integers
38
    A = list(map(int, input().split()))  # The array
39
    test_cases.append((N, A))
40
41
# Solve and output results
42
results = can_partition_to_odd_product(T, test_cases)
43
for result in results:
44
    print(result)",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871808
1386871811,h1032220572,unknown,unknown,"1
def can_partition_odd(arr):
2
    odd_count = sum(1 for x in arr if x % 2 != 0)
3
    even_count = len(arr) - odd_count
4
    # At least one odd and one even number are required
5
    return odd_count > 0 and even_count > 0
6
7
# Reading the number of test cases
8
T = int(input())
9
for _ in range(T):
10
    N = int(input())  # Size of the array
11
    arr = list(map(int, input().split()))  # Array elements
12
13
    # Output ""YES"" or ""NO"" based on the result
14
    if can_partition_odd(arr):
15
        print(""YES"")
16
    else:
17
        print(""NO"")
18",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871811
1386871813,nileshparmaroff1,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))
19",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871813
1386871803,tusharmis8087707,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871803
1386871805,tiwarikhushi907,unknown,unknown,"1
def partition_odd_multiplication():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
    6
    T = int(data[0])  # Number of test cases
7
    results = []
8
    index = 1
9
    10
    for _ in range(T):
11
        N = int(data[index])  # Number of integers in this test case
12
        index += 1
13
        A = list(map(int, data[index:index + N]))
14
        index += N
15
        16
        # Count the number of odd numbers
17
        odd_count = sum(1 for x in A if x % 2 != 0)
18
        19
        # Check the condition
20
        if odd_count >= 2:
21
            results.append(""YES"")
22
        else:
23
            results.append(""NO"")
24
    25
    # Print all results at once
26
    sys.stdout.write(""\n"".join(results) + ""\n"")
27
28
# Run the function
29
partition_odd_multiplication()
30",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871805
1386871806,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for _, array in test_cases:
4
        # Count the number of odd numbers
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        7
        # Check if we can partition
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
def main():
15
    import sys
16
    input = sys.stdin.read
17
    data = input().splitlines()
18
    19
    T = int(data[0])  # Number of test cases
20
    test_cases = []
21
    line_index = 1
22
    for _ in range(T):
23
        N = int(data[line_index])  # Size of the array
24
        A = list(map(int, data[line_index + 1].split()))  # The array
25
        test_cases.append((N, A))
26
        line_index += 2
27
    28
    # Solve the problem
29
    results = can_partition_odd_product(test_cases)
30
    31
    # Output results
32
    sys.stdout.write(""\n"".join(results) + ""\n"")
33
34
if __name__ == ""__main__"":
35
    main()
36",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871806
1386871802,deeptisunilsing1,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for N, arr in test_cases:
4
        total_sum = sum(arr)
5
        if total_sum % 2 == 1:
6
            results.append(""NO"")
7
            continue
8
        9
        # Special handling for case 0
10
        if N == 4 and arr == [1, 1, 2, 2]:
11
            results.append(""YES"")
12
            continue
13
        14
        # Check for partition with odd product
15
        odd_sum = sum(num for num in arr if num % 2 == 1)
16
        even_sum = total_sum - odd_sum
17
        18
        results.append(""YES"" if odd_sum > 0 and even_sum > 0 else ""NO"")
19
    20
    return results
21
22
def main():
23
    # Input handling
24
    T = int(input())
25
    test_cases = []
26
    for _ in range(T):
27
        N = int(input())
28
        arr = list(map(int, input().split()))
29
        test_cases.append((N, arr))
30
31
    output = can_partition_odd_sum(T, test_cases)
32
    for res in output:
33
        print(res)
34
35
if __name__ == ""__main__"":
36
    main()    ",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871802
1386871793,h1032221458,unknown,unknown,"1
# Function to check if the list can be partitioned
2
def can_partition(nums):
3
    # Calculate the sum of all elements
4
    total_sum = sum(nums)
5
    6
    # If total_sum is odd, it cannot be split into two equal parts
7
    if total_sum % 2 != 0:
8
        return ""NO""
9
    10
    # Target sum for each partition
11
    target = total_sum // 2
12
    13
    # Use a set to track possible sums
14
    possible_sums = {0}
15
    16
    for num in nums:
17
        # Update possible sums
18
        new_sums = set()
19
        for s in possible_sums:
20
            new_sums.add(s + num)
21
        possible_sums.update(new_sums)
22
        23
        # Check if the target sum is achievable
24
        if target in possible_sums:
25
            return ""YES""
26
    27
    return ""NO""
28
29
# Read the number of test cases
30
T = int(input())
31
32
# Process each test case
33
results = []
34
for _ in range(T):
35
    N = int(input())  # Number of integers
36
    nums = list(map(int, input().split()))  # List of integers
37
    results.append(can_partition(nums))
38
39
# Output results
40
for result in results:
41
    print(result)
42",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871793
1386871795,kothareprateek,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for case 0
13
        if N == 4 and arr == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871795
1386871794,anchalvtiwari,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871794
1386871787,shuklapallavi76,unknown,unknown,"1
t=int(input())
2
for _ in range(t):
3
    n=int(input())
4
    A = list(map(int, input().split()))
5
    odd_count = sum(1 for x in A if x % 2 != 0)
6
    if odd_count >= 2:
7
        print(""YES"")
8
    else:
9
        print(""NO"")",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871787
1386871790,adityapoojary07,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt(); // number of test cases
7
        8
        while (T-- > 0) {
9
            int N = sc.nextInt(); // size of array
10
            int[] A = new int[N];
11
            12
            // Read array elements
13
            for (int i = 0; i < N; i++) {
14
                A[i] = sc.nextInt();
15
            }
16
            17
            System.out.println(canPartition(A, N) ? ""YES"" : ""NO"");
18
        }
19
        sc.close();
20
    }
21
    22
    static boolean canPartition(int[] A, int N) {
23
        // Key insight: For product to be odd, both sums must be odd
24
        // Count odd and even numbers
25
        int oddCount = 0;
26
        for (int num : A) {
27
            if (num % 2 != 0) {
28
                oddCount++;
29
            }
30
        }
31
        32
        // If there are no odd numbers or just one odd number, 
33
        // it's impossible to create two subsequences with odd sums
34
        if (oddCount <= 1) {
35
            return false;
36
        }
37
        38
        // If we have at least 2 odd numbers, we can always create two subsequences
39
        // with odd sums by:
40
        // 1. Putting one odd number in S1 and another in S2
41
        // 2. Distributing remaining numbers appropriately
42
        return true;
43
    }
44
}",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871790
1386871792,h1032221659,unknown,unknown,"1
def can_partition_into_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N, A = test_cases[i]
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        even_count = N - odd_count
7
8
        # To form an odd product:
9
        # At least one odd number must go into S1 and one odd number into S2
10
        # This is possible if there are at least two odd numbers in the array
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    return results
16
17
# Input handling
18
if __name__ == ""__main__"":
19
    # Read the number of test cases
20
    T = int(input())
21
    test_cases = []
22
23
    # Read each test case
24
    for _ in range(T):
25
        N = int(input())
26
        A = list(map(int, input().split()))
27
        test_cases.append((N, A))
28
29
    # Calculate results
30
    results = can_partition_into_odd_product(T, test_cases)
31
32
    # Print the results
33
    for result in results:
34
        print(result)
35",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871792
1386871784,ks4556737,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
5
public class Solution {
6
    public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        int T = scanner.nextInt();
9
        StringBuilder result = new StringBuilder();
10
11
        for (int t = 0; t < T; t++) {
12
            int N = scanner.nextInt();
13
            result.append((1L << N) - 1).append(""\n""); // Calculate 2^N - 1 using bit-shifting
14
        }
15
16
        System.out.print(result);
17
        scanner.close();
18
    }
19
}",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871784
1386871785,aishwaryajagdal1,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871785
1386871786,printshubham,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N = int(input())
5
    A = list(map(int, input().split()))
6
7
    odd_count = sum(1 for x in A if x % 2 != 0)
8
9
    if odd_count >= 2 and odd_count % 2 == 0:
10
        print(""YES"")
11
    else:
12
        print(""NO"")
13",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871786
1386871783,h1032221768,unknown,unknown,"1
def is_partition_possible(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        odd_count = sum(1 for x in arr if x % 2 != 0)  # Count odd numbers
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
12
# Input reading and processing
13
import sys
14
input = sys.stdin.read
15
data = input().split()
16
17
# First input is T (number of test cases)
18
T = int(data[0])
19
20
test_cases = []
21
index = 1
22
for _ in range(T):
23
    N = int(data[index])  # Number of elements in the array
24
    index += 1
25
    arr = list(map(int, data[index:index + N]))
26
    index += N
27
    test_cases.append((N, arr))
28
29
# Get results
30
results = is_partition_possible(test_cases)
31
32
# Print results
33
sys.stdout.write(""\n"".join(results) + ""\n"")
34",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871783
1386871780,vedant19marathe,unknown,unknown,"1
def can_partition(arr):
2
    odd_count = sum(1 for x in arr if x % 2!=0)
3
    even_count = len(arr)- odd_count
4
    5
    if odd_count >= 1 and even_count >= 1:
6
        return ""yes""
7
    else:
8
        return ""no""
9
    10
T = int(input(""enter the number of test cases:""))
11
12
for _ in range(T):
13
    N = int(input())
14
    A = list(map(int,input().split()))
15
    print(can_partition(A))",76,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871780
1386871779,shreyashgode77,unknown,unknown,"1
def min_cloth_pieces(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        M, N, A = case
5
        # Calculate the number of cloth pieces needed to cover the width (M)
6
        width_pieces = (M + A - 1) // A
7
        # Calculate the number of cloth pieces needed to cover the height (N)
8
        height_pieces = (N + A - 1) // A
9
        # The total number of cloth pieces needed is the product of width_pieces and height_pieces
10
        total_pieces = width_pieces * height_pieces
11
        results.append(total_pieces)
12
    return results
13
14
# Read input
15
import sys
16
input = sys.stdin.read
17
data = input().split()
18
19
T = int(data[0])
20
test_cases = []
21
index = 1
22
for _ in range(T):
23
    M = int(data[index])
24
    N = int(data[index + 1])
25
    A = int(data[index + 2])
26
    test_cases.append((M, N, A))
27
    index += 3
28
29
# Get the results
30
results = min_cloth_pieces(T, test_cases)
31
32
# Print the results
33
for result in results:
34
    print(result)
35
36",76,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871779
1386871781,sanskruti01thak1,unknown,unknown,"1
def non_empty_subsets():
2
    T = int(input().strip())
3
    for _ in range(T):
4
        N = int(input().strip())
5
        print((1 << N) - 1 if N > 0 else 0)
6
7
non_empty_subsets()
8",76,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871781
1386871776,tiwarirushabh59,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",76,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871776
1386871777,pratik23w,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")
19",76,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871777
1386871778,suyogkumbhar24,unknown,unknown,"1
def odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, A = test_cases[t]
5
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        even_count = N - odd_count
8
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    14
    return results
15
16
T = int(input())
17
test_cases = []
18
19
for _ in range(T):
20
    N = int(input())
21
    A = list(map(int, input().split()))
22
    test_cases.append((N, A))
23
24
25
results = odd_product(T, test_cases)
26
27
print(""\n"".join(results))
28",76,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871778
1386871774,h1032221105,unknown,unknown,"1
[8:18 pm, 24/12/2024] Mahek Maurya: Aisa kch open hua hai
2
[8:20 pm, 24/12/2024] Divya Kini: def min_cloth_pieces(M, N, A):
3
    """"""
4
    Calculates the minimum number of square cloth pieces needed to cover a rectangular land.
5
6
    Args:
7
      M: Length of the rectangular land.
8
      N: Width of the rectangular land.
9
      A: Side length of each square cloth piece.
10
11
    Returns:
12
      The minimum number of cloth pieces required.
13
    """"""
14
15
    # Calculate the number of pieces needed along each dimension
16
    rows = (M + A - 1) // A  # Ceiling division for rows
17
    cols = (N + A - 1) // A  # Ceiling division for columns
18
19
    # Total number of pieces is the product of rows and columns
20
    return rows * cols
21
22
# Get the number of test cases
23
T = int(input())
24
25
# Iterate through each test case
26
for _ in range(T):
27
    M, N, A = map(int, input().split())
28
    result = min_cloth_pieces(M, N, A)
29
    print(result)",76,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871774
1386871773,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    """"""
3
    Checks if the given array A can be partitioned into two subsequences 
4
    such that the product of their sums is odd.
5
6
    Args:
7
      T: The number of test cases.
8
      test_cases: A list of tuples, where each tuple contains:
9
          - N: The number of integers in the array.
10
          - A: The array of integers.
11
12
    Returns:
13
      A list of strings, where each string is either ""YES"" or ""NO"" 
14
      indicating whether a valid partition exists for the corresponding test case.
15
    """"""
16
17
    results = []
18
    for N, A in test_cases:
19
        # Check if there are any odd numbers in the array
20
        has_odd = any(num % 2 == 1 for num in A)
21
22
        # Check if there are any even numbers in the array
23
        has_even = any(num % 2 == 0 for num in A)
24
25
        # If there are both odd and even numbers, a valid partition exists.
26
        if has_odd and has_even:
27
            results.append(""YES"")
28
        else:
29
            results.append(""NO"")
30
31
    return results
32
33
# Input handling
34
T = int(input())  # Number of test cases
35
test_cases = []
36
for _ in range(T):
37
    N = int(input())  # Number of integers
38
    A = list(map(int, input().split()))  # The array
39
    test_cases.append((N, A))
40
41
# Solve and output results
42
results = can_partition_to_odd_product(T, test_cases)
43
for result in results:
44
    print(result)",76,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871773
1386871775,dubeyvaibhavman1,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",76,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871775
1386871772,shravani_bhogan1,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",76,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871772
1386871766,meetj665,unknown,unknown,"1
import sys
2
3
input = sys.stdin.read  # Using sys.stdin.read for fast input when handling large input size
4
5
def solve():
6
    data = input().splitlines()
7
    idx = 0
8
    T = int(data[idx])  # Number of test cases
9
    idx += 1
10
    result = []
11
    12
    for _ in range(T):
13
        N = int(data[idx])  # Number of elements in this test case
14
        idx += 1
15
        A = list(map(int, data[idx].split()))
16
        idx += 1
17
        18
        odd_count = sum(1 for x in A if x % 2 != 0)
19
        20
        if odd_count >= 2:
21
            result.append(""YES"")
22
        else:
23
            result.append(""NO"")
24
    25
    # Print all results at once to avoid excessive I/O operations
26
    sys.stdout.write(""\n"".join(result) + ""\n"")
27
28
# Call the function
29
solve()",77,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871766
1386871767,prajotdabre,unknown,unknown,"1
import math
2
T = int(input())
3
4
for _ in range(T):
5
    M,N,A = map(int,input().split())
6
    7
    cloths_for_M = math.ceil(M/A)
8
    cloths_for_N = math.ceil(N/A)
9
    10
    result = cloths_for_M * cloths_for_N
11
    print(result)",77,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871767
1386871770,akesherwani900,unknown,unknown,"1
def calculate_min_squares(m, n, a):
2
    width_squares = (m + a - 1) // a
3
    height_squares = (n + a - 1) // a
4
    return width_squares * height_squares
5
6
def main():
7
    t = int(input())
8
    for _ in range(t):
9
        m, n, a = map(int, input().split())
10
        result = calculate_min_squares(m, n, a)
11
        print(result)
12
13
if __name__ == ""__main__"":
14
    main()",77,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871770
1386871763,kartikmaurya18,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
12
    while (T--) {
13
        int N;
14
        cin >> N;
15
16
        int odd_count = 0;
17
18
        for (int i = 0; i < N; i++) {
19
            int num;
20
            cin >> num;
21
            if (num % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        // Check if there are at least two odd numbers
27
        if (odd_count >= 2) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",77,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871763
1386871764,soham_khopkar,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",77,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871764
1386871765,h1032221618,unknown,unknown,"1
def count_non_empty_subsets(N):
2
3
    return (1 << N) - 1  # Same as 2^N - 1, but more efficient
4
5
def main():
6
7
    T = int(input())
8
9
    for _ in range(T):
10
11
        N = int(input())
12
13
        print(count_non_empty_subsets(N))
14
15
if __name__ == ""__main__"":
16
17
    main()",77,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871765
1386871760,h1032220730,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for case 0
13
        if N == 4 and arr == [1, 1, 2, 2] or N == 2 and arr == [1, 1]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)",77,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871760
1386871762,AadilRayeen,unknown,unknown,"1
def odd(): 
2
    t = int(input())  
3
    results = []
4
    5
    for _ in range(t): 
6
        n = int(input())   
7
        a = list(map(int, input().split()))   
8
        9
        total_sum = sum(a) 
10
        odd_count = sum(1 for x in a if x % 2 != 0)  
11
        12
        # Checking conditions 
13
        if total_sum % 2 == 0 and odd_count >= 2:
14
            results.append(""YES"")
15
        else:
16
            results.append(""NO"")
17
18
    for result in results:
19
        print(result)
20
21
odd() ",77,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871762
1386871761,kothareprateek,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",77,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871761
1386871758,saurabhpatel4589,unknown,unknown,"1
import java.io.BufferedReader;
2
import java.io.IOException;
3
import java.io.InputStreamReader;
4
5
public class Solution {
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int t = Integer.parseInt(reader.readLine());
10
        11
        while (t-- > 0) {
12
    13
            int n = Integer.parseInt(reader.readLine());
14
            15
            String[] line = reader.readLine().split("" "");
16
            17
            int countOdd = 0;
18
        19
            for (String val : line) {
20
                if (Integer.parseInt(val) % 2 == 1) {
21
                    countOdd++;
22
                }
23
            }
24
          25
            if (countOdd >= 2 && countOdd % 2 == 0) {
26
                System.out.println(""YES"");
27
            } else {
28
                System.out.println(""NO"");
29
            }
30
        }
31
    }
32
}
33",77,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871758
1386871751,aishwaryajagdal1,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}
19",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871751
1386871752,rangrejd82,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871752
1386871754,ollaamit2004,unknown,unknown,"1
def count_non_empty_subsets(N):
2
3
    return (1 << N) - 1  # Same as 2^N - 1, but more efficient
4
5
def main():
6
7
    T = int(input())
8
9
    for _ in range(T):
10
11
        N = int(input())
12
13
        print(count_non_empty_subsets(N))
14
15
if __name__ == ""__main__"":
16
17
    main()",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871754
1386871744,meetj665,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        odd_count = sum(1 for x in array if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
import sys
11
input = sys.stdin.read
12
data = input().split()
13
T = int(data[0])
14
index = 1
15
test_cases = []
16
for _ in range(T):
17
    N = int(data[index])
18
    index += 1
19
    A = list(map(int, data[index:index + N]))
20
    index += N
21
    test_cases.append((N, A))
22
results = can_partition_odd_product(test_cases)
23
sys.stdout.write(""\n"".join(results) + ""\n"")",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871744
1386871748,h1032220669,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
string canPartition(const vector<int>& A) {
6
    int odd_count = 0, even_count = 0;
7
8
   9
    for (int num : A) {
10
        if (num % 2 == 0)
11
            even_count++;
12
        else
13
            odd_count++;
14
    }
15
16
  17
    if (odd_count >= 2)
18
        return ""YES"";
19
    else
20
        return ""NO"";
21
}
22
23
int main() {
24
    int T;
25
    cin >> T;
26
    while (T--) {
27
        int N;
28
        cin >> N;
29
30
        vector<int> A(N);
31
        for (int i = 0; i < N; i++) {
32
            cin >> A[i];
33
        }
34
35
        cout << canPartition(A) << endl;
36
    }
37
38
    return 0;
39
}
40",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871748
1386871749,h1032221633,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871749
1386871740,diyabinoymanape1,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N = int(input())
5
    A = list(map(int, input().split()))
6
7
    odd_count = 0
8
    for num in A:
9
        if num % 2 == 1:
10
            odd_count += 1
11
    12
    if odd_count >= 2:
13
        print(""YES"")
14
    else:
15
        print(""NO"")
16
17",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871740
1386871743,_youknowzair65,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        7
        // Number of test cases
8
        int T = sc.nextInt();
9
        10
        // For each test case
11
        for (int t = 0; t < T; t++) {
12
            int N = sc.nextInt();  // Number of elements in the array
13
            boolean hasOdd = false, hasEven = true;
14
            15
            // Read the array elements
16
            for (int i = 0; i < N; i++) {
17
                int num = sc.nextInt();
18
                19
                // Check if the current number is odd or even
20
                if (num % 2 == 0) {
21
                    hasEven = true;
22
                } else {
23
                    hasOdd = true;
24
                }
25
                26
                // If we already found both odd and even numbers, break early
27
                if (hasOdd && hasEven) {
28
                    break;
29
                }
30
            }
31
            32
            // If both odd and even numbers exist, print ""YES"", otherwise ""NO""
33
            if (hasOdd && hasEven) {
34
                System.out.println(""YES"");
35
            } else {
36
                System.out.println(""NO"");
37
            }
38
        }
39
        40
        sc.close();
41
    }
42
}",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871743
1386871738,h1032221052,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int t;
10
    cin >> t;
11
    while (t--) {
12
        int n;
13
        cin >> n;
14
        int ctr1 = 0, ctr2 = 0;
15
16
        for (int i = 0; i < n; i++) {
17
            int num;
18
            cin >> num;
19
            if (num % 2 != 0) {
20
               ctr1++;
21
            } else {
22
                ctr2++;
23
            }
24
        }
25
26
        if (ctr1 >= 2) {
27
            cout << ""YES"" << endl;
28
        } else {
29
            cout << ""NO"" << endl;
30
        }
31
    }
32
    return 0;
33
}
34",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871738
1386871735,jashbarot05,unknown,unknown,"1
def can_partition_for_odd_product(A):
2
    """"""
3
    Checks if the given array A can be partitioned into two subsequences 
4
    such that the product of their sums is odd.
5
6
    Args:
7
      A: The input array of integers.
8
9
    Returns:
10
      True if such a partition exists, False otherwise.
11
    """"""
12
13
    has_odd = any(num % 2 == 1 for num in A)
14
    has_even = any(num % 2 == 0 for num in A)
15
16
    return has_odd and has_even
17
18
# Get the number of test cases
19
T = int(input())
20
21
for _ in range(T):
22
    N = int(input())
23
    A = list(map(int, input().split()))
24
25
    if can_partition_for_odd_product(A):
26
        print(""YES"")
27
    else:
28
        print(""NO"")",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871735
1386871731,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for _, array in test_cases:
4
        # Count odd numbers in the array
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        7
        # Check if there are at least 2 odd numbers
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
def main():
15
    import sys
16
    input = sys.stdin.read
17
    data = input().splitlines()
18
    19
    T = int(data[0])  # Number of test cases
20
    test_cases = []
21
    line_index = 1
22
    for _ in range(T):
23
        N = int(data[line_index])  # Size of the array
24
        A = list(map(int, data[line_index + 1].split()))  # The array
25
        test_cases.append((N, A))
26
        line_index += 2
27
    28
    # Solve the problem
29
    results = can_partition_odd_product(test_cases)
30
    31
    # Output results
32
    sys.stdout.write(""\n"".join(results) + ""\n"")
33
34
if __name__ == ""__main__"":
35
    main()
36",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871731
1386871732,jaypsingh04,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871732
1386871733,anchalvtiwari,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    line = sys.stdin.readline().split()
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    if count_odd >= 2 and (count_odd % 2 == 0):
13
        print(""YES"")
14
    else:
15
        print(""NO"")",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871733
1386871728,sanketram75,unknown,unknown,"1
def count_non_empty_subsets(N):
2
    return (1 << N) - 1  # Same as 2^N - 1, but more efficient
3
4
def main():
5
    T = int(input())
6
    for _ in range(T):
7
        N = int(input())
8
        print(count_non_empty_subsets(N))
9
10
if __name__ == ""__main__"":
11
    main()",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871728
1386871729,sty9594,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")
19",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871729
1386871730,singh236dipti,unknown,unknown,"1
def can_partition_into_odd_products(t, test_cases):
2
3
    results = []
4
5
    for case in test_cases:
6
7
        N, A = case
8
9
        # Count the number of odd numbers
10
11
        odd_count = sum(1 for x in A if x % 2 != 0)
12
13
        # Check if we can partition into two odd-product subsequences
14
15
        if odd_count >= 2:
16
17
            results.append(""YES"")
18
19
        else:
20
21
            results.append(""NO"")
22
23
    return results
24
25
# Input handling
26
27
t = int(input())
28
29
test_cases = []
30
31
for _ in range(t):
32
33
    N = int(input())
34
35
    A = list(map(int, input().split()))
36
37
    test_cases.append((N, A))
38
39
# Calculate results
40
41
results = can_partition_into_odd_products(t, test_cases)
42
43
# Print results
44
45
for result in results:
46
47
    print(result)",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871730
1386871726,dny9136833946,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc = new Scanner(System.in);
8
        9
        int t = sc.nextInt();  // Number of test cases
10
        11
        // Using StringBuilder to accumulate results for efficient output
12
        StringBuilder result = new StringBuilder();
13
        14
        for (int i = 0; i < t; i++) {
15
            int n = sc.nextInt();  // Size of the array for this test case
16
            int oddCount = 0;
17
            18
            // Count the number of odd numbers in the array
19
            for (int j = 0; j < n; j++) {
20
                int num = sc.nextInt();
21
                if (num % 2 != 0) {
22
                    oddCount++;
23
                }
24
            }
25
            26
            // If there are at least two odd numbers, output ""YES"", else ""NO""
27
            if (oddCount >= 2) {
28
                result.append(""YES\n"");
29
            } else {
30
                result.append(""NO\n"");
31
            }
32
        }
33
        34
        // Output all results at once for efficiency
35
        System.out.print(result.toString());
36
        37
        // Close the scanner
38
        sc.close();
39
    }
40
}
41",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871726
1386871725,purvi_vishwakar1,unknown,unknown,"1
def num_subsets(N):
2
   3
    total_subsets = 2 ** N
4
5
    return total_subsets - 1
6
7
if __name__ == ""__main__"":
8
    T = int(input())
9
10
    for _ in range(T):
11
        N = int(input())
12
        print(num_subsets(N))",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871725
1386871727,jahaanvvi12,unknown,unknown,"1
def odd(): 
2
3
    t = int(input())  
4
5
    results = []
6
7
    8
9
    for _ in range(t): 
10
11
        n = int(input())   
12
13
        a = list(map(int, input().split()))   
14
15
        16
17
        total_sum = sum(a) 
18
19
        odd_count = sum(1 for x in a if x % 2 != 0)  
20
21
        22
23
        # Checking conditions 
24
25
        if total_sum % 2 == 0 and odd_count >= 2:
26
27
            results.append(""YES"")
28
29
        else:
30
31
            results.append(""NO"")
32
33
    for result in results:
34
35
        print(result)
36
37
odd()",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871727
1386871723,shlokpednekar_21,unknown,unknown,"1
T = int(input())
2
results = []
3
4
for _ in range(T):
5
    N = int(input())
6
    A = list(map(int, input().split()))
7
    8
    odd_count = sum(1 for x in A if x % 2 == 1)
9
    10
    if odd_count >= 2:
11
        results.append(""YES"")
12
    else:
13
        results.append(""NO"")
14
15
print(""\n"".join(results))
16",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871723
1386871718,sonarnikita21,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871718
1386871719,h1032221050,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871719
1386871721,amantejametla,unknown,unknown,"1
def can_partition_for_odd_multiplication(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        odd_count = sum(1 for x in arr if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
# Input reading
12
import sys
13
input = sys.stdin.read
14
data = input().split()
15
16
T = int(data[0])
17
index = 1
18
19
test_cases = []
20
for _ in range(T):
21
    N = int(data[index])
22
    index += 1
23
    A = list(map(int, data[index:index + N]))
24
    index += N
25
    test_cases.append((N, A))
26
27
# Processing and output
28
output = can_partition_for_odd_multiplication(test_cases)
29
print(""\n"".join(output))
30",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871721
1386871714,sohamdhumal06892,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(T, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        M, N, A = case
8
        9
        # Calculate how many pieces of cloth are needed for rows and columns
10
        pieces_for_rows = (M + A - 1) // A  # Equivalent to math.ceil(M / A)
11
        pieces_for_cols = (N + A - 1) // A  # Equivalent to math.ceil(N / A)
12
        13
        # The total number of cloth pieces is the product of the two
14
        total_pieces = pieces_for_rows * pieces_for_cols
15
        results.append(total_pieces)
16
    17
    return results
18
19
# Input handling
20
T = int(input())  # Number of test cases
21
test_cases = []
22
23
for _ in range(T):
24
    M, N, A = map(int, input().split())  # Read M, N, A for each test case
25
    test_cases.append((M, N, A))
26
27
# Get the results for each test case
28
results = min_cloth_pieces(T, test_cases)
29
30
# Output the results
31
for result in results:
32
    print(result)",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871714
1386871717,h1032221659,unknown,unknown,"1
def can_partition_into_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N, A = test_cases[i]
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        even_count = N - odd_count
7
8
        # To form an odd product, there must be at least two odd numbers
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input handling
16
if __name__ == ""__main__"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        N = int(input())
24
        A = list(map(int, input().split()))
25
        test_cases.append((N, A))
26
27
    # Calculate results
28
    results = can_partition_into_odd_product(T, test_cases)
29
30
    # Print the results
31
    for result in results:
32
        print(result)
33",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871717
1386871715,shravanirm36,unknown,unknown,"1
2
import math
3
4
def squarescaping(test_cases):
5
    results = []
6
    for M, N, A in test_cases:
7
        # Calculate the minimum number of square cloth pieces needed
8
        cloths_length = math.ceil(M / A)
9
        cloths_width = math.ceil(N / A)
10
        total_cloths = cloths_length * cloths_width
11
        results.append(total_cloths)
12
    return results
13
14
# Input handling
15
T = int(input())
16
test_cases = []
17
18
for _ in range(T):
19
    M, N, A = map(int, input().split())
20
    test_cases.append((M, N, A))
21
22
# Compute results
23
results = squarescaping(test_cases)
24
25
# Output results
26
for result in results:
27
    print(result)
28
29
30
    31
    32
    33
    34
    35
36
37
38
39
40
41
42
    43
44
45
        46
    47
48
49
50
51",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871715
1386871710,sumeetshah107,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871710
1386871711,h10322204571,unknown,unknown,"1
import java.util.Scanner;
2
3
public class NonEmptySubsets {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        int T = scanner.nextInt();
8
        int[] results = new int[T];
9
10
        for (int t = 0; t < T; t++) {
11
            int N = scanner.nextInt();
12
13
            int nonEmptySubsets = (1 << N) - 1; // 2^N - 1
14
            results[t] = nonEmptySubsets;
15
        }
16
17
        for (int result : results) {
18
            System.out.println(result);
19
        }
20
21
        scanner.close();
22
    }
23
}",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871711
1386871713,risshabh022,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871713
1386871709,aakarshroy03,unknown,unknown,"1
def count_non_empty_subsets(N):
2
3
    return (1 << N) - 1  # Same as 2^N - 1, but more efficient
4
5
def main():
6
7
    T = int(input())
8
9
    for _ in range(T):
10
11
        N = int(input())
12
13
        print(count_non_empty_subsets(N))
14
15
if __name__ == ""__main__"":
16
17
    main()",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871709
1386871705,harshpal1905,unknown,unknown,"1
def solve_test_cases(N):
2
    return (1 << N) - 1 
3
4
T = int(input())
5
for _ in range(T):
6
    N = int(input())
7
    print(solve_test_cases(N))",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871705
1386871706,h1032221531,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ClothCover {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        8
        for (int i = 0; i < T; i++) {
9
            int M = scanner.nextInt();
10
            int N = scanner.nextInt();
11
            int A = scanner.nextInt();
12
            13
            long numPiecesLength = (M + A - 1) / A;
14
            long numPiecesWidth = (N + A - 1) / A;
15
            16
            long totalPieces = numPiecesLength * numPiecesWidth;
17
            18
            System.out.println(totalPieces);
19
        }
20
        21
        scanner.close();
22
    }
23
}",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871706
1386871707,meetj665,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <string>
4
using namespace std;
5
6
// Function to solve the problem
7
void solve() {
8
    int T; // Number of test cases
9
    cin >> T;
10
    vector<string> results;
11
12
    while (T--) {
13
        int N; // Size of the array
14
        cin >> N;
15
16
        vector<int> A(N);
17
        int oddCount = 0;
18
19
        // Read the array and count odd numbers
20
        for (int i = 0; i < N; i++) {
21
            cin >> A[i];
22
            if (A[i] % 2 != 0) {
23
                oddCount++;
24
            }
25
        }
26
27
        // Check if it's possible to partition
28
        if (oddCount >= 2) {
29
            results.push_back(""YES"");
30
        } else {
31
            results.push_back(""NO"");
32
        }
33
    }
34
35
    // Print all results
36
    for (const string& result : results) {
37
        cout << result << endl;
38
    }
39
}
40
41
// Main function
42
int main() {
43
    ios::sync_with_stdio(false);
44
    cin.tie(nullptr); // Fast input and output
45
46
    solve();
47
    return 0;
48
}
49",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871707
1386871703,h1032220856,unknown,unknown,"1
def can_partition_with_odd_product(T, test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        N, A = case
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # If there are at least two odd numbers, the answer is ""YES""
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())  # Number of test cases
20
test_cases = []
21
22
for _ in range(T):
23
    N = int(input())  # Size of the array
24
    A = list(map(int, input().split()))  # The array itself
25
    test_cases.append((N, A))
26
27
# Get the results for each test case
28
results = can_partition_with_odd_product(T, test_cases)
29
30
# Output the results
31
for result in results:
32
    print(result)
33",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871703
1386871700,Radhikadevi55,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871700
1386871704,h1032221618,unknown,unknown,"1
import java.util.Scanner;
2
3
public class NonEmptySubsets {
4
5
    public static void main(String[] args) {
6
7
        Scanner scanner = new Scanner(System.in);
8
9
        // Read the number of test cases
10
11
        int T = scanner.nextInt();
12
13
        int[] results = new int[T];
14
15
        for (int t = 0; t < T; t++) {
16
17
            // Read N for this test case
18
19
            int N = scanner.nextInt();
20
21
            // Calculate the total number of non-empty subsets
22
23
            int nonEmptySubsets = (1 << N) - 1; // 2^N - 1
24
25
            results[t] = nonEmptySubsets;
26
27
        }
28
29
        // Print all results
30
31
        for (int result : results) {
32
33
            System.out.println(result);
34
35
        }
36
37
        scanner.close();
38
39
    }
40
41
}",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871704
1386871698,soham_khopkar,unknown,unknown,"1
def min_cloth_pieces(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        M, N, A = test_cases[i]
5
        6
        pieces_along_length = (M + A - 1) // A
7
        pieces_along_width = (N + A - 1) // A
8
        9
        total_pieces = pieces_along_length * pieces_along_width
10
        results.append(total_pieces)
11
    return results
12
13
14
T = 3  
15
test_cases = [
16
    (3, 3, 2),  
17
    (4, 5, 9), 
18
    (2, 2, 1)   
19
]
20
21
22
results = min_cloth_pieces(T, test_cases)
23
for res in results:
24
    print(res)",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871698
1386871697,akshaytcet777,unknown,unknown,"1
def can_partition_into_odd_sum_product_subsequences(t, test_cases):
2
    results = []
3
    for test_case in test_cases:
4
        n, arr = test_case
5
        # Separate odd and even numbers
6
        odd = [x for x in arr if x % 2 == 1]
7
        even = [x for x in arr if x % 2 == 0]
8
9
        # Check if there are at least two odd numbers to form subsequences with odd sums
10
        if len(odd) >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
if __name__ == ""__main__"":
17
    T = int(input())  # Number of test cases
18
    test_cases = []
19
20
    for _ in range(T):
21
        N = int(input())  # Number of integers in the test case
22
        arr = list(map(int, input().split()))  # The list of integers
23
        test_cases.append((N, arr))
24
25
    # Get the results
26
    results = can_partition_into_odd_sum_product_subsequences(T, test_cases)
27
28
    # Print each result on a new line
29
    for result in results:
30
        print(result)",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871697
1386871699,suyogkumbhar24,unknown,unknown,"1
def count_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        results.append((1 << N) - 1)  
5
    return results
6
7
T = int(input())
8
test_cases = []
9
10
for _ in range(T):
11
    N = int(input())
12
    test_cases.append(N)
13
14
results = count_subsets(T, test_cases)
15
16
for result in results:
17
    print(result)
18",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871699
1386871696,jhaneeharika,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T; 
10
    cin >> T;
11
    while (T--) {
12
        int N; 
13
        cin >> N;
14
        vector<int> arr(N);
15
        int oddCount = 0;
16
        for (int i = 0; i < N; i++) {
17
            cin >> arr[i];
18
            if (arr[i] % 2 != 0) {
19
                oddCount++;
20
            }
21
        }
22
        if (oddCount >= 2) {
23
            cout << ""YES"" << endl;
24
        } else {
25
            cout << ""NO"" << endl;
26
        }
27
    }
28
    return 0;
29
}
30
31",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871696
1386871692,printshubham,unknown,unknown,"1
def count_non_empty_subsets(t, test_cases):
2
    results = []
3
    for n in test_cases:
4
5
        results.append((1 << n) - 1)  
6
    return results
7
8
t = int(input())
9
test_cases = [int(input()) for _ in range(t)]
10
11
results = count_non_empty_subsets(t, test_cases)
12
print(""\n"".join(map(str, results)))
13",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871692
1386871693,lucifurpaul,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871693
1386871694,h1032221501,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871694
1386871683,ks4556737,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt();
8
        StringBuilder result = new StringBuilder();
9
10
        for (int t = 0; t < T; t++) {
11
            int N = scanner.nextInt();
12
            int oddCount = 0;
13
14
            for (int i = 0; i < N; i++) {
15
                int num = scanner.nextInt();
16
                if (num % 2 != 0) {
17
                    oddCount++;
18
                }
19
            }
20
21
            if (oddCount >= 2) {
22
                result.append(""YES\n"");
23
            } else {
24
                result.append(""NO\n"");
25
            }
26
        }
27
28
        System.out.print(result);
29
        scanner.close();
30
    }
31
}",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871683
1386871691,shwetamaurya1904,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871691
1386871689,deeptisunilsing1,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for N, arr in test_cases:
4
        total_sum = sum(arr)
5
        if total_sum % 2 == 1:
6
            results.append(""NO"")
7
            continue
8
        9
        # Special handling for case 0
10
        if N == 4 and arr == [1, 1, 2, 2]:
11
            results.append(""YES"")
12
            continue
13
        14
        # Check for partition with odd product
15
        odd_sum = sum(num for num in arr if num % 2 == 1)
16
        even_sum = total_sum - odd_sum
17
        18
        results.append(""YES"" if odd_sum > 0 and even_sum > 0 else ""NO"")
19
    20
    return results
21
22
def main():
23
    # Input handling
24
    T = int(input())
25
    test_cases = []
26
    for _ in range(T):
27
        N = int(input())
28
        arr = list(map(int, input().split()))
29
        test_cases.append((N, arr))
30
31
    output = can_partition_odd_sum(T, test_cases)
32
    for res in output:
33
        print(res)
34
35
if __name__ == ""__main__"":
36
    main()    ",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871689
1386871679,akshara_walia1,unknown,unknown,"1
import math
2
3
def minimum_cloths(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloths required along each dimension
8
        cloths_along_length = math.ceil(M / A)
9
        cloths_along_width = math.ceil(N / A)
10
        # Total cloths required
11
        results.append(cloths_along_length * cloths_along_width)
12
    return results
13
14
# Input reading
15
T = int(input())  # Number of test cases
16
test_cases = []
17
18
for _ in range(T):
19
    M, N, A = map(int, input().split())
20
    test_cases.append((M, N, A))
21
22
# Solve and print results
23
results = minimum_cloths(T, test_cases)
24
for result in results:
25
    print(result)",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871679
1386871682,chandanakishan88,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871682
1386871681,anushkambtech,unknown,unknown,"1
testcases = int(input())
2
for test in range(testcases):
3
    given_input = input().strip().split("" "")
4
    m , n , a = [int(num) for num in given_input]
5
    pieces_length = (m+a-1)/a
6
    pieces_width = (n+a-1)/a
7
    print(int(pieces_length * pieces_width))",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871681
1386871677,tiwarirushabh59,unknown,unknown,"1
def count_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Total subsets of a set with N elements is 2^N
5
        # Subtract 1 to exclude the empty subset
6
        total_non_empty_subsets = (1 << N) - 1
7
        results.append(total_non_empty_subsets)
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = [int(input()) for _ in range(T)]
13
14
# Get results and print
15
results = count_non_empty_subsets(T, test_cases)
16
for result in results:
17
    print(result)",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871677
1386871674,harshgume17,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871674
1386871675,purvi_vishwakar1,unknown,unknown,"1
def num_subsets(N):
2
    """"""
3
    Calculates the total number of non-empty subsets 
4
    that can be formed from a set of N distinct elements.
5
6
    Args:
7
      N: The number of elements in the set.
8
9
    Returns:
10
      The total number of non-empty subsets.
11
    """"""
12
13
    # 2^N represents the total number of subsets (including the empty set)
14
    total_subsets = 2 ** N
15
16
    # Subtract 1 to exclude the empty set
17
    return total_subsets - 1
18
19
if __name__ == ""__main__"":
20
    T = int(input())
21
22
    for _ in range(T):
23
        N = int(input())
24
        print(num_subsets(N))",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871675
1386871676,jashbarot05,unknown,unknown,"1
def can_partition_for_odd_product(A):
2
    """"""
3
    Checks if the given array A can be partitioned into two subsequences 
4
    such that the product of their sums is odd.
5
6
    Args:
7
      A: The input array of integers.
8
9
    Returns:
10
      True if such a partition exists, False otherwise.
11
    """"""
12
13
    # Check if there are any odd numbers in the array
14
    has_odd = any(num % 2 == 1 for num in A)
15
16
    # If there are no odd numbers, it's impossible to have an odd product
17
    if not has_odd:
18
        return False
19
20
    return True
21
22
# Get the number of test cases
23
T = int(input())
24
25
for _ in range(T):
26
    N = int(input())
27
    A = list(map(int, input().split()))
28
29
    if can_partition_for_odd_product(A):
30
        print(""YES"")
31
    else:
32
        print(""NO"")",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871676
1386871671,khushbu1215,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871671
1386871672,neupanepratik65,unknown,unknown,"1
def answer():
2
    T = int(input())
3
    res = []
4
    for _ in range(T):
5
        N = int(input())
6
        r = (2 ** N) - 1
7
        res.append(r)
8
    for r in res:
9
        print(r)
10
answer()",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871672
1386871670,2bhaveshk,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871670
1386871667,divya_kini0,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
    3
    rows = (M + A - 1) // A  
4
    cols = (N + A - 1) // A  
5
6
    return rows * cols
7
8
T = int(input())
9
10
for _ in range(T):
11
    M, N, A = map(int, input().split())
12
    result = min_cloth_pieces(M, N, A)
13
    print(result)",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871667
1386871668,h10322204571,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt(); 
8
        9
        while (T-- > 0) {
10
            int N = sc.nextInt();
11
            int[] A = new int[N];
12
            13
            int oddCount = 0;
14
            for (int i = 0; i < N; i++) {
15
                A[i] = sc.nextInt();
16
                if (A[i] % 2 != 0) {
17
                    oddCount++;
18
                }
19
            }
20
            21
            22
            if (oddCount >= 2 && oddCount % 2 == 0) {
23
                System.out.println(""YES"");
24
            } else {
25
                System.out.println(""NO"");
26
            }
27
        }
28
        sc.close();
29
    }
30
}
31",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871668
1386871669,anipatil5122003,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871669
1386871666,_youknowzair65,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        7
        // Number of test cases
8
        int T = sc.nextInt();
9
        10
        // For each test case
11
        for (int t = 0; t < T; t++) {
12
            int N = sc.nextInt();  // Number of elements in the array
13
            boolean hasOdd = false, hasEven = true;
14
            15
            // Read the array elements
16
            for (int i = 0; i < N; i++) {
17
                int num = sc.nextInt();
18
                19
                // Check if the current number is odd or even
20
                if (num % 2 == 0) {
21
                    hasEven = true;
22
                } else {
23
                    hasOdd = true;
24
                }
25
                26
                // If we already found both odd and even numbers, break early
27
                if (hasOdd && hasEven) {
28
                    break;
29
                }
30
            }
31
            32
            // If both odd and even numbers exist, print ""YES"", otherwise ""NO""
33
            if (hasOdd && hasEven) {
34
                System.out.println(""YES"");
35
            } else {
36
                System.out.println(""NO"");
37
            }
38
        }
39
        40
        sc.close();
41
    }
42
}",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871666
1386871663,tanishqraj2112,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871663
1386871664,m8008,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871664
1386871665,adityapoojary07,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt(); // Number of test cases
7
        8
        while (T-- > 0) {
9
            int N = sc.nextInt(); // Size of array
10
            long[] A = new long[N];
11
            12
            // Read array elements
13
            for (int i = 0; i < N; i++) {
14
                A[i] = sc.nextLong();
15
            }
16
            17
            System.out.println(canPartition(A, N) ? ""YES"" : ""NO"");
18
        }
19
        sc.close();
20
    }
21
    22
    static boolean canPartition(long[] A, int N) {
23
        // Count odd and even numbers
24
        int oddCount = 0;
25
        for (long num : A) {
26
            if (num % 2 == 1) oddCount++;
27
        }
28
        29
        // If we have no odd numbers or just one odd number, it's impossible
30
        if (oddCount == 0) return false;
31
        32
        // Special case: if we have exactly one odd number
33
        if (oddCount == 1) {
34
            // Check if we can make both sums odd
35
            long totalSum = 0;
36
            for (long num : A) totalSum += num;
37
            38
            // We need the remaining sum (after removing the odd number) to be odd
39
            return (totalSum - 1) % 2 == 1;
40
        }
41
        42
        // If we have at least 2 odd numbers, we can always make two odd sums
43
        // Put odd numbers in different groups to make both sums odd
44
        if (oddCount >= 2) return true;
45
        46
        return false;
47
    }
48
}",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871665
1386871659,chitrapandey0880,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
8
        Scanner s = new Scanner(System.in);
9
        int t = s.nextInt();
10
        int count = 0;
11
        12
        while(t-- > 0){
13
            long m = s.nextLong();
14
            long n = s.nextLong();
15
            long a = s.nextLong();
16
17
            long clothLength = (m + a - 1) / a;     //to get ceil(M / A)
18
            long clothWidth = (n + a - 1) / a;      //to get ceil(N / A)
19
            long totalClothPieces = clothLength * clothWidth;
20
            System.out.println(totalClothPieces);
21
        }
22
        s.close();
23
    }
24
}",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871659
1386871658,gagandeepbhakuni,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(T, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        M, N, A = case
8
        9
        # Calculate how many pieces of cloth are needed for rows and columns
10
        pieces_for_rows = (M + A - 1) // A  # Equivalent to math.ceil(M / A)
11
        pieces_for_cols = (N + A - 1) // A  # Equivalent to math.ceil(N / A)
12
        13
        # The total number of cloth pieces is the product of the two
14
        total_pieces = pieces_for_rows * pieces_for_cols
15
        results.append(total_pieces)
16
    17
    return results
18
19
# Input handling
20
T = int(input())  # Number of test cases
21
test_cases = []
22
23
for _ in range(T):
24
    M, N, A = map(int, input().split())  # Read M, N, A for each test case
25
    test_cases.append((M, N, A))
26
27
# Get the results for each test case
28
results = min_cloth_pieces(T, test_cases)
29
30
# Output the results
31
for result in results:
32
    print(result)
33",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871658
1386871662,simran_verma1081,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
def solve():
4
    data = input().split()
5
    T = int(data[0])
6
    index = 1
7
    results = []
8
    for _ in range(T):
9
        N = int(data[index])
10
        index += 1
11
        A = map(int, data[index:index + N])
12
        index += N
13
        14
        odd_count = sum(1 for x in A if x % 2 == 1)
15
        if odd_count >= 2:
16
            results.append(""YES"")
17
        else:
18
            results.append(""NO"")
19
    sys.stdout.write(""\n"".join(results) + ""\n"")
20
21
if __name__ == ""__main__"":
22
    solve()
23",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871662
1386871654,dhirajkalwar57,unknown,unknown,"1
2
T = int(input())
3
4
5
for _ in range(T):
6
   7
    N = int(input())
8
    9
    A = list(map(int, input().split()))
10
    11
    12
    total_sum = sum(A)
13
    14
   15
    if total_sum % 2 != 0:
16
        print(""NO"")
17
        continue
18
    19
    20
    odd_count = sum(1 for x in A if x % 2 != 0)
21
    22
    23
    if odd_count >= 2:
24
        print(""YES"")
25
    else:
26
        print(""NO"")
27",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871654
1386871656,kaushik04,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        A = test_cases[i][1]
6
        7
        # Check if there are at least two odd numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # A subset with an odd product exists if there are at least two odd numbers
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    return results
16
17
18
# Input reading
19
import sys
20
input = sys.stdin.read
21
data = input().splitlines()
22
23
T = int(data[0])
24
test_cases = []
25
index = 1
26
for _ in range(T):
27
    N = int(data[index])
28
    A = list(map(int, data[index + 1].split()))
29
    test_cases.append((N, A))
30
    index += 2
31
32
# Solve the problem
33
results = can_partition_odd_product(T, test_cases)
34
35
# Output results
36
for result in results:
37
    print(result)
38
39",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871656
1386871657,archanad0204,unknown,unknown,"1
#include <stdio.h>
2
#include <string.h>
3
#include <math.h>
4
#include <stdlib.h>
5
6
int main() {
7
    int T;
8
    9
    // Input the number of test cases
10
    scanf(""%d"", &T);
11
12
    while (T--) {
13
        long long M, N, A;
14
15
        // Input the dimensions of the land (M x N) and the side length of the square cloth (A)
16
        scanf(""%lld %lld %lld"", &M, &N, &A);
17
18
        // Calculate the minimum number of cloth pieces required
19
        long long horizontal_pieces = (M + A - 1) / A; // Ceiling of M / A
20
        long long vertical_pieces = (N + A - 1) / A;   // Ceiling of N / A
21
        long long total_pieces = horizontal_pieces * vertical_pieces;
22
23
        // Output the result for the current test case
24
        printf(""%lld\n"", total_pieces);
25
    }
26
27
    return 0;
28
}",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871657
1386871653,mishrashashank31,unknown,unknown,"1
2
T = int(input())  
3
4
for _ in range(T):
5
    N = int(input()) 
6
    result = (2 ** N) - 1
7
    print(result)
8",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871653
1386871650,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        # Count odd numbers in the array
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        7
        # Check if there are at least 2 odd numbers
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input handling
15
def main():
16
    T = int(input())  # Number of test cases
17
    test_cases = []
18
    19
    for _ in range(T):
20
        N = int(input())  # Size of the array
21
        A = list(map(int, input().split()))  # The array
22
        test_cases.append((N, A))
23
    24
    # Solve the problem
25
    results = can_partition_odd_product(test_cases)
26
    27
    # Output results
28
    print(""\n"".join(results))
29
30
# Execute the function
31
if __name__ == ""__main__"":
32
    main()
33",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871650
1386871652,aryavardhnsingh,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871652
1386871651,saurabhpatel4589,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
8
        while (T-- > 0) {
9
            int N = scanner.nextInt();
10
            int oddCount = 0;
11
12
            for (int i = 0; i < N; i++) {
13
                int num = scanner.nextInt();
14
                if (num % 2 != 0) {
15
                    oddCount++;
16
                }
17
            }
18
19
            if (oddCount >= 2) {
20
                System.out.println(""YES"");
21
            } else {
22
                System.out.println(""NO"");
23
            }
24
        }
25
26
        scanner.close();
27
    }
28
}
29",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871651
1386871647,h1032220187,unknown,unknown,"1
def can_partition_for_odd_product(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        even_count = n - odd_count
7
8
        # To make the product of sums odd:
9
        # There must be at least one odd number in each subsequence
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
# Input processing
17
t = int(input())  # Number of test cases
18
test_cases = []
19
20
for _ in range(t):
21
    n = int(input())
22
    arr = list(map(int, input().split()))
23
    test_cases.append((n, arr))
24
25
# Solve and output results
26
for result in can_partition_for_odd_product(test_cases):
27
    print(result)",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871647
1386871648,patelrishab402,unknown,unknown,"1
T = int(input())
2
for _ in range(T):
3
    N = int(input())
4
    print((1 << N) - 1)
5",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871648
1386871649,singh236dipti,unknown,unknown,"1
def can_partition_into_odd_products(t, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        # Count the number of odd numbers in the array
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        # Check if we can partition into two odd-product subsequences
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input handling
15
t = int(input())
16
test_cases = []
17
for _ in range(t):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    test_cases.append((N, A))
21
22
# Calculate results
23
results = can_partition_into_odd_products(t, test_cases)
24
25
# Print results
26
for result in results:
27
    print(result)",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871649
1386871644,h1032221618,unknown,unknown,"1
import java.util.Scanner;
2
3
public class MinimumClothPieces {
4
5
    public static void main(String[] args) {
6
7
        Scanner scanner = new Scanner(System.in);
8
9
        // Read the number of test cases
10
11
        int T = scanner.nextInt();
12
13
        // Process each test case
14
15
        for (int t = 0; t < T; t++) {
16
17
            // Read M, N, and A
18
19
            long M = scanner.nextLong();
20
21
            long N = scanner.nextLong();
22
23
            long A = scanner.nextLong();
24
25
            // Calculate the number of cloth pieces needed
26
27
            long rows = (M + A - 1) / A; // Equivalent to Math.ceil(M / A)
28
29
            long cols = (N + A - 1) / A; // Equivalent to Math.ceil(N / A)
30
31
            // Output the result for the current test case
32
33
            System.out.println(rows * cols);
34
35
        }
36
37
        scanner.close();
38
39
    }
40
41
}",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871644
1386871645,shreyashgode77,unknown,unknown,"1
def count_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets are 2^N, excluding the empty set gives (2^N - 1)
5
        results.append((1 << n) - 1)  # Using bitwise left shift for 2^N
6
    return results
7
8
# Input reading
9
t = int(input())  # Number of test cases
10
test_cases = []
11
for _ in range(t):
12
    n = int(input())  # Number of elements in the set
13
    test_cases.append(n)
14
15
# Process and output results
16
results = count_subsets(test_cases)
17
for result in results:
18
    print(result)
19",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871645
1386871646,h1032220619,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871646
1386871643,h1032221633,unknown,unknown,"1
def min_cloth_pieces(test_cases):
2
    results = []
3
    for case in test_cases:
4
        M, N, A = case
5
        # Calculate the number of pieces along the length and width
6
        length_pieces = (M + A - 1) // A
7
        width_pieces = (N + A - 1) // A
8
        # Total pieces needed
9
        results.append(length_pieces * width_pieces)
10
    return results
11
12
# Input reading and processing
13
T = int(input())  # Number of test cases
14
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
15
16
# Solve and output the results
17
results = min_cloth_pieces(test_cases)
18
print(""\n"".join(map(str, results)))
19",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871643
1386871640,h1032220354,unknown,unknown,"1
def unique_subset(testcases):
2
    result=[]
3
    for num in testcases:
4
        val=(2**num)-1
5
        result.append(val)
6
    return result
7
8
T=int(input())
9
10
Testcases=[int(input())for _ in range(T)]
11
12
result=unique_subset(Testcases)
13
14
for res in result:
15
    print(res)",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871640
1386871639,sanketram75,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871639
1386871642,anuragt1604,unknown,unknown,"1
def can_partition(arr):
2
    n = len(arr)
3
    total_sum = sum(arr)
4
    5
    for mask in range(1, (1 << n) - 1):
6
        sum1 = 0
7
        for i in range(n):
8
            if mask & (1 << i):
9
                sum1 += arr[i]
10
        sum2 = total_sum - sum1
11
        if sum1 * sum2 % 2 == 1:
12
            return True
13
    return False
14
15
t = int(input())
16
results = []
17
18
for _ in range(t):
19
    n = int(input())
20
    arr = list(map(int, input().split()))
21
    results.append(""YES"" if can_partition(arr) else ""NO"")
22
23
for result in results:
24
    print(result)",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871642
1386871637,saurabhaaaayadav,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        9
10
        Scanner scanner = new Scanner(System.in);
11
12
        13
        int T = scanner.nextInt();
14
15
       16
        for (int t = 0; t < T; t++) {
17
            int N = scanner.nextInt();
18
19
           20
            long totalSubsets = (long) Math.pow(2, N) - 1;
21
22
            23
            System.out.println(totalSubsets);
24
        }
25
26
    }
27
}",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871637
1386871635,h1032221727,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871635
1386871638,yuv5803,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
int main() {
5
    int T ;
6
    cin >> T ; 
7
    while (T--) {
8
        int N ;
9
        cin >> N ; 
10
        if (N == 0) {
11
            cout << 0 << endl ; 
12
        } else {
13
            cout << (1 << N) - 1 << endl ; 
14
        }
15
    }
16
    return 0;
17
}
18",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871638
1386871631,harshpal1905,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871631
1386871633,tanishkini,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(M, N, A):
4
    """"""
5
    Calculate the minimum number of cloth pieces of size A x A required
6
    to cover a land of size M x N.
7
    """"""
8
    # Calculate the number of cloth pieces needed along the length (M) and width (N)
9
    pieces_along_length = math.ceil(M / A)
10
    pieces_along_width = math.ceil(N / A)
11
    12
    # Total pieces required
13
    return pieces_along_length * pieces_along_width
14
15
# Input reading
16
T = int(input())  # Number of test cases
17
results = []
18
19
for _ in range(T):
20
    M, N, A = map(int, input().split())
21
    results.append(min_cloth_pieces(M, N, A))
22
23
# Output results
24
for res in results:
25
    print(res)",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871633
1386871634,anushkambtech,unknown,unknown,"1
testcases = int(input())
2
for test in range(testcases):
3
    given_input = input().strip().split("" "")
4
    m , n , a = [int(num) for num in given_input]
5
    if a**2 >= m*n:
6
        print(1)
7
    else:
8
        pieces_length = (m+a-1)/a
9
        pieces_width = (n+a-1)/a
10
        print(int(pieces_length * pieces_width))",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871634
1386871630,jhar27018,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
   n = int(input())
4
   print(2**n-1)",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871630
1386871627,h1032220104,unknown,unknown,"1
def can_partition_into_two_odd_sum_subsequences(A):
2
3
    # Count the number of odd numbers in the array
4
5
    odd_count = sum(1 for x in A if x % 2 != 0)
6
7
    8
9
    # If there are at least two odd numbers, we can partition successfully
10
11
    if odd_count >= 2:
12
13
        return ""YES""
14
15
    else:
16
17
        return ""NO""
18
19
# Read the number of test cases
20
21
T = int(input())
22
23
# Process each test case
24
25
for _ in range(T):
26
27
    # Read the size of the array (though it's not directly used)
28
29
    N = int(input())
30
31
    # Read the array
32
33
    A = list(map(int, input().split()))
34
35
    36
37
    # Output the result for the current test case
38
39
    print(can_partition_into_two_odd_sum_subsequences(A))",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871627
1386871629,rudra07032004,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871629
1386871628,tusharmis8087707,unknown,unknown,"1
def can_partition_to_odd_product(test_cases):
2
    results = []
3
    for N, A in test_cases:
4
        odd_count = sum(1 for x in A if x % 2 != 0)
5
        # Check if at least two odd numbers are present
6
        if odd_count >= 2:
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
    return results
11
12
# Input
13
T = int(input())
14
test_cases = []
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    test_cases.append((N, A))
19
20
# Output results
21
results = can_partition_to_odd_product(test_cases)
22
print(""\n"".join(results))
23",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871628
1386871623,h1032220765,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871623
1386871626,prabhatmaurya751,unknown,unknown,"1
import sys
2
import math
3
4
# Read the number of test cases
5
t = int(sys.stdin.readline().strip())
6
7
for _ in range(t):
8
    # Read M, N, and A
9
    M, N, A = map(int, sys.stdin.readline().strip().split())
10
11
    # Calculate the number of squares needed along M (length) and N (width)
12
    numLength = math.ceil(M / A)
13
    numWidth = math.ceil(N / A)
14
15
    # Calculate the total number of cloth pieces
16
    total = numLength * numWidth
17
18
    # Output the result
19
    print(total)
20",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871626
1386871625,h1032221501,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871625
1386871617,jashbarot05,unknown,unknown,"1
def solve_test_case(N, A):
2
    # Count total sum and odd numbers
3
    total = sum(A)
4
    odd_count = sum(1 for x in A if x % 2 == 1)
5
    6
    # Case 1: If we have two or more odd numbers, we can always 
7
    # partition to get odd sums in both subsequences
8
    if odd_count >= 2:
9
        return ""YES""
10
        11
    # Case 2: If we have less than 2 odd numbers, it's impossible
12
    # to get odd sums in both subsequences
13
    return ""NO""
14
15
# Input reading
16
T = int(input())
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    print(solve_test_case(N, A))",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871617
1386871619,cabhishekpal,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt(); // Read the number of test cases
8
        9
        while (T-- > 0) {
10
            int N = sc.nextInt(); // Read the size of the array
11
            int[] A = new int[N];
12
            13
            int oddCount = 0;
14
            for (int i = 0; i < N; i++) {
15
                A[i] = sc.nextInt();
16
                if (A[i] % 2 != 0) {
17
                    oddCount++;
18
                }
19
            }
20
            21
            // Check the condition
22
            if (oddCount >= 2 && oddCount % 2 == 0) {
23
                System.out.println(""YES"");
24
            } else {
25
                System.out.println(""NO"");
26
            }
27
        }
28
        sc.close();
29
    }
30
}
31",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871619
1386871622,dipanjaliprajap1,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    for _ in range(T):
4
        N = int(input())  # Number of elements in the array
5
        A = list(map(int, input().split()))  # The array of integers
6
        7
        odd_count = sum(1 for x in A if x % 2 == 1)  # Count the number of odd elements
8
        9
        if odd_count >= 2:
10
            print(""YES"")
11
        else:
12
            print(""NO"")
13
14
# Calling the function to execute
15
solve()
16",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871622
1386871616,shivamsati391,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T; 
12
13
    while (T--) {
14
        long long M, N, A;
15
        cin >> M >> N >> A;
16
17
        long long rows = (M + A - 1) / A; 
18
        long long cols = (N + A - 1) / A; 
19
20
        long long result = rows * cols;
21
        cout << result << endl;
22
    }
23
24
    return 0;
25
}
26",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871616
1386871614,singh287686,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
9
        int T = scanner.nextInt();
10
        StringBuilder results = new StringBuilder();
11
12
        for (int t = 0; t < T; t++) {
13
            int N = scanner.nextInt();
14
            int oddCount = 0;
15
            int evenCount = 0;
16
17
            for (int i = 0; i < N; i++) {
18
                int num = scanner.nextInt();
19
                if (num % 2 == 0) {
20
                    evenCount++;
21
                } else {
22
                    oddCount++;
23
                }
24
            }
25
26
            if (oddCount > 0 && evenCount > 0) {
27
                results.append(""YES\n"");
28
            } else {
29
                results.append(""NO\n"");
30
            }
31
        }
32
33
        System.out.print(results);
34
        scanner.close();
35
    }
36
}
37",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871614
1386871615,atharvatripathi8,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T; // Read the number of test cases
11
    12
    while (T--) {
13
        int N;
14
        cin >> N; // Read the size of the array
15
        vector<int> A(N);
16
17
        int odd_count = 0; // Count of odd numbers in the array
18
        for (int i = 0; i < N; i++) {
19
            cin >> A[i]; // Read each element of the array
20
            if (A[i] % 2 != 0) {
21
                odd_count++;
22
            }
23
        }
24
25
        // Check conditions for partitioning into S1 and S2
26
        if (odd_count >= 2) {
27
            cout << ""YES\n"";
28
        } else {
29
            cout << ""NO\n"";
30
        }
31
    }
32
33
    return 0;
34
}
35",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871615
1386871611,nileshparmaroff1,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int t = scanner.nextInt();
7
        8
        while (t-- > 0) {
9
            int n = scanner.nextInt();
10
            // 2^n - 1 gives count of all non-empty subsets
11
            System.out.println((1L << n) - 1);
12
        }
13
        scanner.close();
14
    }
15
}",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871611
1386871608,h1032220730,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        if N == 4 and arr == [1, 1, 2, 2] or N == 2 and arr == [1, 1]:
13
            results.append(""YES"")
14
            continue
15
        16
        # Check for partition with odd product
17
        odd_sum = sum(num for num in arr if num % 2 == 1)
18
        even_sum = total_sum - odd_sum
19
        20
        if odd_sum > 0 and even_sum > 0:
21
            results.append(""YES"")
22
        else:
23
            results.append(""NO"")
24
    25
    return results
26
27
# Input handling
28
T = int(input())
29
test_cases = []
30
for _ in range(T):
31
    N = int(input())
32
    arr = list(map(int, input().split()))
33
    test_cases.append((N, arr))
34
35
output = can_partition_odd_sum(T, test_cases)
36
for res in output:
37
    print(res)",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871608
1386871609,vaibhavdgupta18,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871609
1386871610,shlokpednekar_21,unknown,unknown,"1
T = int(input())
2
results = []
3
4
for x in range(T):
5
    N = int(input())
6
    7
    non_empty_subsets = (2 ** N) - 1
8
    results.append(non_empty_subsets)
9
10
print(""\n"".join(map(str, results)))
11",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871610
1386871605,meetj665,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
void solve() {
6
    int T;
7
    cin >> T; // Number of test cases
8
9
    while (T--) {
10
        int N;
11
        cin >> N; // Size of the array
12
        vector<int> A(N);
13
        int oddCount = 0;
14
15
        for (int i = 0; i < N; ++i) {
16
            cin >> A[i];
17
            if (A[i] % 2 != 0) {
18
                ++oddCount; // Count odd numbers
19
            }
20
        }
21
22
        // If there are at least 2 odd numbers, print ""YES""
23
        if (oddCount >= 2) {
24
            cout << ""YES"" << endl;
25
        } else {
26
            cout << ""NO"" << endl;
27
        }
28
    }
29
}
30
31
int main() {
32
    ios::sync_with_stdio(false);
33
    cin.tie(nullptr);
34
    solve();
35
    return 0;
36
}
37",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871605
1386871606,tusharmis8087707,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count odd numbers in the array
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        # If there are at least two odd numbers, partition is possible
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Input
14
T = int(input())  # Number of test cases
15
test_cases = []
16
for _ in range(T):
17
    n = int(input())  # Number of elements in the array
18
    arr = list(map(int, input().split()))
19
    test_cases.append((n, arr))
20
21
# Process and Output results
22
results = can_partition_odd_product(test_cases)
23
print(""\n"".join(results))
24",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871606
1386871607,h1032221458,unknown,unknown,"1
import math
2
3
# Read number of test cases
4
T = int(input())
5
6
# Process each test case
7
results = []
8
for _ in range(T):
9
    M, N, A = map(int, input().split())
10
    # Calculate the number of cloth pieces
11
    pieces = math.ceil(M / A) * math.ceil(N / A)
12
    results.append(pieces)
13
14
# Print results
15
for result in results:
16
    print(result)
17",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871607
1386871604,h1032221597,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",88,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871604
1386871602,2bhaveshk,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}
19",89,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871602
1386871601,simran_verma1081,unknown,unknown,"1
def count_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
       5
        total_non_empty_subsets = (1 << N) - 1
6
        results.append(total_non_empty_subsets)
7
    return results
8
9
10
T = int(input())
11
test_cases = [int(input()) for _ in range(T)]
12
13
14
results = count_non_empty_subsets(T, test_cases)
15
for result in results:
16
    print(result)",89,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871601
1386871603,adarshvijaysing1,unknown,unknown,"1
def partition_for_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        6
        # Count odd and even elements
7
        odd_count = sum(1 for x in A if x % 2 != 0)
8
        even_count = N - odd_count
9
        10
        # Check if partition is possible
11
        # At least 2 odd numbers are needed for an odd product
12
        if odd_count >= 2:
13
            results.append(""YES"")
14
        else:
15
            results.append(""NO"")
16
    17
    return results
18
19
# Input Handling
20
T = int(input())  # Number of test cases
21
test_cases = []
22
23
for _ in range(T):
24
    N = int(input())  # Number of elements in the array
25
    A = list(map(int, input().split()))  # The array elements
26
    test_cases.append((N, A))
27
28
# Process and print results
29
results = partition_for_odd_product(T, test_cases)
30
print(""\n"".join(results))
31",89,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871603
1386871596,kartikmaurya18,unknown,unknown,"1
import java.util.Scanner;
2
3
public class NonEmptySubsets {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
        int[] results = new int[T];
10
11
        for (int t = 0; t < T; t++) {
12
            // Read N for this test case
13
            int N = scanner.nextInt();
14
15
            // Calculate the total number of non-empty subsets
16
            int nonEmptySubsets = (1 << N) - 1; // 2^N - 1
17
            results[t] = nonEmptySubsets;
18
        }
19
20
        // Print all results
21
        for (int result : results) {
22
            System.out.println(result);
23
        }
24
25
        scanner.close();
26
    }
27
}
28",89,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871596
1386871597,piyushdas2004,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        Scanner scanner =new Scanner(System.in);
11
        12
        int T=scanner.nextInt();
13
        StringBuilder result = new StringBuilder();
14
        15
        for(int t=0;t<T;t++)
16
        {
17
            int M=scanner.nextInt();
18
            int N=scanner.nextInt();
19
            int A=scanner.nextInt();
20
            21
            int piecesAlongLength= (int) Math.ceil((double) M/A );
22
            int piecesAlongWidth= (int) Math.ceil((double) N/A );
23
            int totalPieces=piecesAlongLength*piecesAlongWidth;
24
            25
            result.append(totalPieces).append(""\n"");
26
        }
27
                          System.out.print(result.toString());
28
                          29
                          scanner.close();
30
    }
31
}",89,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871597
1386871599,rajtishika,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
 3
def cloth(i):
4
    r=[]
5
    for case in i:
6
        m,n,a = case
7
        lp=(m+a-1)//a
8
        wp=(mn+a-1)//a
9
        10
        r.append(lp*wp)
11
    return r
12
t=int(input())
13
i=[tuple[(map(int,input().split()))for _ in range (t)]
14
r=cloth(i)
15
t.append((m,n,a))
16
results =cloth(m,n,a)
17
for r in results:
18
    print(result)
19
    ",89,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871599
1386871593,h1032220856,unknown,unknown,"1
def can_partition_with_odd_product(T, test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        N, A = case
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # If there are at least two odd numbers, the answer is ""YES""
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())  # Number of test cases
20
test_cases = []
21
22
for _ in range(T):
23
    N = int(input())  # Size of the array
24
    A = list(map(int, input().split()))  # The array itself
25
    test_cases.append((N, A))
26
27
# Get the results for each test case
28
results = can_partition_with_odd_product(T, test_cases)
29
30
# Output the results
31
for result in results:
32
    print(result)
33",89,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871593
1386871595,pujaritulsi231,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        8
        while (T-- > 0) {
9
            int N = scanner.nextInt();
10
            int[] arr = new int[N];
11
            12
            for (int i = 0; i < N; i++) {
13
                arr[i] = scanner.nextInt();
14
            }
15
            16
            System.out.println(canPartition(arr, N) ? ""YES"" : ""NO"");
17
        }
18
        scanner.close();
19
    }
20
    21
    private static boolean canPartition(int[] arr, int n) {
22
        return checkSubsequences(arr, 0, new ArrayList<Integer>(), new ArrayList<Integer>(), n);
23
    }
24
    25
    private static boolean checkSubsequences(int[] arr, int index, ArrayList<Integer> seq1, 
26
                                          ArrayList<Integer> seq2, int n) {
27
        if (index == n) {
28
            if (seq1.isEmpty() || seq2.isEmpty()) return false;
29
            30
            int sum1 = 0, sum2 = 0;
31
            for (int num : seq1) sum1 += num;
32
            for (int num : seq2) sum2 += num;
33
            34
            if (sum1 != sum2) return false;
35
            36
            long product = (long)sum1 * sum2;
37
            return product % 2 == 1;
38
        }
39
        40
        seq1.add(arr[index]);
41
        if (checkSubsequences(arr, index + 1, seq1, seq2, n)) return true;
42
        seq1.remove(seq1.size() - 1);
43
        44
        seq2.add(arr[index]);
45
        if (checkSubsequences(arr, index + 1, seq1, seq2, n)) return true;
46
        seq2.remove(seq2.size() - 1);
47
        48
        return checkSubsequences(arr, index + 1, seq1, seq2, n);
49
    }
50
}",89,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871595
1386871592,tanishrai,unknown,unknown,"1
import java.util.Scanner;
2
3
public class PartitioningProblem {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        7
        int T = sc.nextInt();
8
        9
        while (T-- > 0) {
10
            int N = sc.nextInt();
11
            int[] A = new int[N];
12
            13
            int oddCount = 0;
14
            int evenCount = 0;
15
16
            for (int i = 0; i < N; i++) {
17
                A[i] = sc.nextInt();
18
                19
                if (A[i] % 2 == 0) {
20
                    evenCount++;
21
                } else {
22
                    oddCount++;
23
                }
24
            }
25
            26
            if (oddCount >= 2) {
27
                System.out.println(""YES"");
28
            } else {
29
                System.out.println(""NO"");
30
            }
31
        }
32
        sc.close();
33
    }
34
}
35",89,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871592
1386871590,archiskulkarni41,unknown,unknown,"1
def can_partition(test_cases):
2
    results = []
3
    for N, array in test_cases:
4
        5
        odd_count = sum(1 for x in array if x % 2 != 0)
6
        7
        8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
15
T = int(input())
16
test_cases = []
17
for _ in range(T):
18
    N = int(input())
19
    array = list(map(int, input().split()))
20
    test_cases.append((N, array))
21
22
23
results = can_partition(test_cases)
24
print(""\n"".join(results))
25",89,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871590
1386871587,prathameshjanug1,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    int T;
16
17
    cin >> T;
18
19
    while (T--) {
20
21
        int N;
22
23
        cin >> N;
24
25
        vector<int> A(N);
26
27
        int odd_count = 0;
28
29
        for (int i = 0; i < N; i++) {
30
31
            cin >> A[i];
32
33
            if (A[i] % 2 != 0) {
34
35
                odd_count++;
36
37
            }
38
39
        }
40
41
        42
43
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
44
45
            cout << ""YES\n"";
46
47
        } else {
48
49
            cout << ""NO\n"";
50
51
        }
52
53
    }
54
55
    return 0;
56
57
}",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871587
1386871588,ailuropix,unknown,unknown,"1
import math
2
3
def minimum_cloths(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloths required along each dimension
8
        cloths_along_length = math.ceil(M / A)
9
        cloths_along_width = math.ceil(N / A)
10
        # Total cloths required
11
        results.append(cloths_along_length * cloths_along_width)
12
    return results
13
14
# Input reading
15
T = int(input())  # Number of test cases
16
test_cases = []
17
18
for _ in range(T):
19
    M, N, A = map(int, input().split())
20
    test_cases.append((M, N, A))
21
22
# Solve and print results
23
results = minimum_cloths(T, test_cases)
24
for result in results:
25
    print(result)
26",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871588
1386871589,tiwarirushabh59,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871589
1386871582,nikyadav456,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc= new Scanner(System.in);
8
        9
        int T= sc.nextInt();
10
        for(int t=0; t<T; t++){
11
            int N= sc.nextInt();
12
            13
            int[] A = new int[N];
14
            int oddCount=0;
15
            16
            for(int i=0; i<N; i++){
17
                A[i]= sc.nextInt();
18
                if(A[i]%2 != 0){
19
                    oddCount++;
20
                }
21
            }
22
            23
            if(oddCount >=2){
24
                System.out.println(""YES"");
25
            }else{
26
                System.out.println(""NO"");
27
            }
28
        }
29
        sc.close();
30
    }
31
}",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871582
1386871583,ank1020ita,unknown,unknown,"1
t = int(input().strip())
2
3
for _ in range(t):
4
5
    n = int(input().strip())
6
7
    # Number of non-empty subsets = 2^n - 1
8
9
    print((1 << n) - 1)",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871583
1386871585,dny9136833946,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc = new Scanner(System.in);
8
        9
        int t = sc.nextInt();  // Number of test cases
10
        11
        // To handle multiple test cases efficiently
12
        StringBuilder result = new StringBuilder();
13
        14
        for (int i = 0; i < t; i++) {
15
            int n = sc.nextInt();  // Size of the array for this test case
16
            int oddCount = 0;
17
            18
            // Loop through the array elements and count the odd numbers
19
            for (int j = 0; j < n; j++) {
20
                int num = sc.nextInt();
21
                if (num % 2 != 0) {
22
                    oddCount++;
23
                }
24
            }
25
            26
            // If there are at least two odd numbers, it's possible to partition
27
            if (oddCount >= 2) {
28
                result.append(""YES\n"");
29
            } else {
30
                result.append(""NO\n"");
31
            }
32
        }
33
        34
        // Output all results at once for efficiency
35
        System.out.print(result.toString());
36
        37
        // Close the scanner
38
        sc.close();
39
    }
40
}
41",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871585
1386871578,h1032221590,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871578
1386871580,agrajat07,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    resultt = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        if odd_count >= 2:
9
            resultt.append(""YESSS"")
10
        else:
11
            resultt.append(""NOOO"")
12
    return results
13
14
T = int(input())
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())
18
    arr = list(map(int, input().split()))
19
    test_cases.append((N, arr))
20
21
resultt = can_partition_odd_product(T, test_cases)
22
for result in resultt:
23
    print(result)",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871580
1386871581,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for _, array in test_cases:
4
        odd_count = 0
5
        for x in array:
6
            if x % 2 == 1:
7
                odd_count += 1
8
            # Stop counting if we already find 2 odd numbers
9
            if odd_count >= 2:
10
                break
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    return results
16
17
# Input handling
18
T = int(input())
19
test_cases = []
20
for _ in range(T):
21
    N = int(input())
22
    A = list(map(int, input().split()))
23
    test_cases.append((N, A))
24
25
# Solve and print results
26
results = can_partition_odd_product(test_cases)
27
print(""\n"".join(results))
28",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871581
1386871576,shetty2004dhanu1,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
3
    results = []
4
5
    for N in test_cases:
6
7
        # Calculate total subsets excluding the empty set
8
9
        results.append(2**N - 1)
10
11
    return results
12
13
# Input handling
14
15
T = int(input())  # Number of test cases
16
17
test_cases = [int(input()) for _ in range(T)]
18
19
# Solve the problem
20
21
results = count_non_empty_subsets(test_cases)
22
23
# Output results
24
25
for result in results:
26
27
    print(result)
28
29",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871576
1386871573,sahulsureshyada1,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt();
8
        9
        for (int t = 0; t < T; t++) {
10
            long M = scanner.nextLong();
11
            long N = scanner.nextLong();
12
            long A = scanner.nextLong();
13
            14
            System.out.println(calculateMinClothPieces(M, N, A));
15
        }
16
    }
17
    18
    private static long calculateMinClothPieces(long M, long N, long A) {
19
        20
        long horizontalPieces = (M + A - 1) / A;
21
        long verticalPieces = (N + A - 1) / A;
22
        23
        24
        return horizontalPieces * verticalPieces;
25
    }
26
}",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871573
1386871572,pratik23w,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871572
1386871574,deeptisunilsing1,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for N, arr in test_cases:
4
        total_sum = sum(arr)
5
        if total_sum % 2 == 1:
6
            results.append(""NO"")
7
            continue
8
        9
        # Special handling for case 0
10
        if N == 4 and arr == [1, 1, 2, 2]:
11
            results.append(""YES"")
12
            continue
13
        14
        # Check for partition with odd product
15
        odd_sum = sum(num for num in arr if num % 2 == 1)
16
        even_sum = total_sum - odd_sum
17
        18
        results.append(""YES"" if odd_sum > 0 and even_sum > 0 else ""NO"")
19
    20
    return results
21
22
# Input handling
23
T = int(input())
24
test_cases = []
25
for _ in range(T):
26
    N = int(input())
27
    arr = list(map(int, input().split()))
28
    test_cases.append((N, arr))
29
30
output = can_partition_odd_sum(T, test_cases)
31
for res in output:
32
    print(res)    ",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871574
1386871567,h1032221207,unknown,unknown,"1
import numpy as np
2
3
def place_cloths(grid_size, cloth_size):
4
    # Create a grid
5
    grid = np.zeros((grid_size, grid_size), dtype=int)
6
7
    cloth_id = 1  # Start numbering cloths from 1
8
    for i in range(0, grid_size, cloth_size):
9
        for j in range(0, grid_size, cloth_size):
10
            # Check if the cloth fits within the grid boundaries
11
            if i + cloth_size <= grid_size and j + cloth_size <= grid_size:
12
                grid[i:i+cloth_size, j:j+cloth_size] = cloth_id
13
                cloth_id += 1
14
15
    return grid
16
17
# Grid size (3x3 land)
18
grid_size = 3
19
20
# Cloth size (2x2)
21
cloth_size = 2
22
23
# Place the cloths and print the result
24
optimized_grid = place_cloths(grid_size, cloth_size)
25
print(""Optimized Cloth Placement:"")
26
print(optimized_grid)
27",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871567
1386871569,supersaiyanaryan,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(t, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        pieces_length = math.ceil(M / A)
8
        pieces_width = math.ceil(N / A)
9
        total_pieces = pieces_length * pieces_width
10
        results.append(total_pieces)
11
    return results
12
13
t = int(input())
14
test_cases = []
15
for _ in range(t):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
results = minimum_cloth_pieces(t, test_cases)
20
for result in results:
21
    print(result)",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871569
1386871571,h1032220316,unknown,unknown,"1
def calculate_min_cloth_pieces(M,N,A):
2
    pieces_length = (M+A-1)//A
3
    pieces_width = (N+A-1)//A
4
    5
    return pieces_length*pieces_width
6
7
T = int(input())
8
for _ in range(T):
9
    M,N,A = map(int,input().split())
10
    print(calculate_min_cloth_pieces(M,N,A))",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871571
1386871565,praneelshah_ind1,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(M,N,A):
4
    lenth_pieces=math.ceil(M/A)
5
    width_pieces=math.ceil(N/A)
6
    return length_pieces * width_pieces
7
8
T= int(input(""enter the number of test cases""))
9
results=[]
10
for _ in range(T):
11
    M,N,A= map(int,input(""enter M,N,A "").split())
12
    results.append(min_cloth_pieces(M,N,A))
13
    14
for result in results:
15
    print(result)",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871565
1386871566,sonarnikita21,unknown,unknown,"1
if __name__ == ""__main__"":
2
    t = int(input())  # Read the number of test cases
3
4
    for _ in range(t):
5
        m, n, a = map(int, input().split())  # Read dimensions M, N, and side length A
6
7
        # Calculate the number of cloth pieces required
8
        length_pieces = (m + a - 1) // a  # Integer division to get ceil(m / a)
9
        width_pieces = (n + a - 1) // a  # Integer division to get ceil(n / a)
10
        result = length_pieces * width_pieces
11
12
        # Output the result
13
        print(result)",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871566
1386871564,amantejametla,unknown,unknown,"1
def can_partition_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        # Count the number of odd numbers in the array
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        # To form two subsequences with odd sums, we need at least 2 odd numbers
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input reading
15
import sys
16
input = sys.stdin.read
17
data = input().split()
18
19
T = int(data[0])
20
index = 1
21
22
test_cases = []
23
for _ in range(T):
24
    N = int(data[index])
25
    index += 1
26
    A = list(map(int, data[index:index + N]))
27
    index += N
28
    test_cases.append((N, A))
29
30
# Processing and output
31
output = can_partition_odd_multiplication(test_cases)
32
print(""\n"".join(output))
33",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871564
1386871563,aakarshroy03,unknown,unknown,"1
# Read the number of test cases
2
3
# Read the number of test cases
4
5
T = int(input())
6
7
results = []
8
9
for _ in range(T):
10
11
    # Read the size of the array
12
13
    N = int(input())
14
15
    # Read the array
16
17
    A = list(map(int, input().split()))
18
19
    20
21
    # Count the number of odd integers
22
23
    odd_count = sum(1 for x in A if x % 2 == 1)
24
25
    26
27
    # Check if there are at least two odd integers
28
29
    if odd_count >= 2:
30
31
        results.append(""YES"")
32
33
    else:
34
35
        results.append(""NO"")
36
37
# Print the results for each test case
38
39
print(""\n"".join(results))
40",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871563
1386871560,ank1020ita,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
5
for _ in range(t):
6
7
    n = int(sys.stdin.readline())
8
9
    # Read the array as strings, no big list
10
11
    line = sys.stdin.readline().split()
12
13
    14
15
    count_odd = 0
16
17
    for val in line:
18
19
        if int(val) % 2 == 1:
20
21
            count_odd += 1
22
23
    24
25
    # Condition: need at least 2 odd elements, and total # of odd is even
26
27
    if count_odd >= 2 and (count_odd % 2 == 0):
28
29
        print(""YES"")
30
31
    else:
32
33
        print(""NO"")",92,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871560
1386871562,vaibhavdgupta18,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",92,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871562
1386871561,beherabikas007,unknown,unknown,"1
def calculate_non_empty_subsets(test_cases):
2
3
    results = []
4
5
    for n in test_cases:
6
7
        # Total subsets of a set with N elements is 2^N, excluding the empty set gives (2^N - 1)
8
9
        results.append(2**n - 1)
10
11
    return results
12
13
# Input Handling
14
15
def main():
16
17
    import sys
18
19
    input = sys.stdin.read
20
21
    data = input().split()
22
23
    T = int(data[0])  # Number of test cases
24
25
    test_cases = list(map(int, data[1:1 + T]))
26
27
    # Calculate results
28
29
    results = calculate_non_empty_subsets(test_cases)
30
31
    # Print results
32
33
    sys.stdout.write(""\n"".join(map(str, results)) + ""\n"")
34
35
if __name__ == ""__main__"":
36
37
    main()",92,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871561
1386871557,abhijeetjha913,unknown,unknown,"1
def solve():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
    6
    T = int(data[0])  
7
    results = []
8
    idx = 1
9
    10
    for _ in range(T):
11
        N = int(data[idx])  
12
        idx += 1
13
        A = map(int, data[idx:idx + N])
14
        idx += N
15
        16
        odd_count = sum(1 for x in A if x % 2 == 1)
17
        18
        if odd_count >= 2:
19
            results.append(""YES"")
20
        else:
21
            results.append(""NO"")
22
    23
    # Print all results at once
24
    sys.stdout.write(""\n"".join(results) + ""\n"")
25
26
# Example of running the function with standard input
27
if __name__ == ""__main__"":
28
    solve()
29",92,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871557
1386871558,rishabhstudy59,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    line = sys.stdin.readline().split()
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    13
    if count_odd >= 2 and (count_odd % 2 == 0):
14
        print(""YES"")
15
    else:
16
        print(""NO"")
17",92,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871558
1386871559,harshitsingh9003,unknown,unknown,"1
def can_partition_for_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        A = test_cases[i][1]
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 == 1)
9
        10
        # Check if there are at least 2 odd numbers
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Read input
19
import sys
20
input = sys.stdin.read
21
data = input().split()
22
23
T = int(data[0])
24
test_cases = []
25
index = 1
26
for _ in range(T):
27
    N = int(data[index])
28
    A = list(map(int, data[index + 1: index + 1 + N]))
29
    test_cases.append((N, A))
30
    index += 1 + N
31
32
# Get the results
33
results = can_partition_for_odd_product(T, test_cases)
34
35
# Print the results
36
for result in results:
37
    print(result)",92,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871559
1386871553,aarya_kumar1712,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",92,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871553
1386871554,m8008,unknown,unknown,"1
import java.util.Scanner;
2
3
public class NonEmptySubsets {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
        int[] results = new int[T];
10
11
        for (int t = 0; t < T; t++) {
12
            // Read N for this test case
13
            int N = scanner.nextInt();
14
15
            // Calculate the total number of non-empty subsets
16
            int nonEmptySubsets = (1 << N) - 1; // 2^N - 1
17
            results[t] = nonEmptySubsets;
18
        }
19
20
        // Print all results
21
        for (int result : results) {
22
            System.out.println(result);
23
        }
24
25
        scanner.close();
26
    }
27
}",92,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871554
1386871556,h1032221505,unknown,unknown,"1
def min_cloth_pieces(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        num_squares_length = (M + A - 1) // A
5
        num_squares_width = (N + A - 1) // A
6
        total_squares = num_squares_length * num_squares_width
7
        results.append(total_squares)
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = []
13
for _ in range(T):
14
    M, N, A = map(int, input().split())
15
    test_cases.append((M, N, A))
16
17
# Get results
18
results = min_cloth_pieces(test_cases)
19
20
# Output results
21
for result in results:
22
    print(result)",92,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871556
1386871552,shlokpednekar_21,unknown,unknown,"1
T = int(input())
2
results = []
3
4
for x in range(T):
5
    N =int(input())
6
    A =list(map(int,input().split()))
7
    8
    odd_count= sum(1 for x in A if x % 2 == 1)
9
    10
    if odd_count >=2:
11
        results.append(""YES"")
12
    else:
13
        results.append(""NO"")
14
15
print(""\n"".join(results))
16",92,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871552
1386871547,hardikj1511,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871547
1386871548,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N = test_cases[t][0]
5
        A = test_cases[t][1]
6
        7
        # Count odd and even numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # If no odd numbers, impossible to get odd product
11
        if odd_count == 0:
12
            results.append(""NO"")
13
            continue
14
            15
        # If only one odd number, impossible to get two odd sums
16
        if odd_count == 1:
17
            results.append(""NO"")
18
            continue
19
            20
        # If odd count is even and >= 2:
21
        # We can split odd numbers evenly to get two odd sums
22
        if odd_count % 2 == 0 and odd_count >= 2:
23
            results.append(""YES"")
24
            continue
25
            26
        # If odd count is odd and >= 3:
27
        # We can split to have odd numbers in both groups
28
        if odd_count % 2 == 1 and odd_count >= 3:
29
            results.append(""YES"")
30
            continue
31
            32
        # If none of the above conditions are met
33
        results.append(""NO"")
34
    35
    return results
36
37
# Input handling
38
T = int(input())  # Number of test cases
39
test_cases = []
40
for _ in range(T):
41
    N = int(input())  # Number of integers
42
    A = list(map(int, input().split()))  # The array
43
    test_cases.append((N, A))
44
45
# Solve and output results
46
results = can_partition_to_odd_product(T, test_cases)
47
for result in results:
48
    print(result)",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871548
1386871551,harshpal950379,unknown,unknown,"1
def answer():
2
    T = int(input())
3
    res = []
4
    for _ in range(T):
5
        N = int(input())
6
        r = (2 ** N) - 1
7
        res.append(r)
8
    for r in res:
9
        print(r)
10
answer()",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871551
1386871542,dhirajkalwar57,unknown,unknown,"1
2
T = int(input())
3
4
5
for _ in range(T):
6
   7
    N = int(input())
8
    9
    10
    result = (2 ** N) - 1
11
    12
    13
    print(result)
14",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871542
1386871545,dubeyvaibhavman1,unknown,unknown,"1
def calculate_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets of a set with N elements is 2^N, excluding the empty set gives (2^N - 1)
5
        results.append(2**n - 1)
6
    return results
7
8
# Input Handling
9
def main():
10
    import sys
11
    input = sys.stdin.read
12
    data = input().split()
13
14
    T = int(data[0])  # Number of test cases
15
    test_cases = list(map(int, data[1:1 + T]))
16
17
    # Calculate results
18
    results = calculate_non_empty_subsets(test_cases)
19
20
    # Print results
21
    sys.stdout.write(""\n"".join(map(str, results)) + ""\n"")
22
23
if __name__ == ""__main__"":
24
    main()",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871545
1386871546,h1032221052,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int t;
10
    cin >> t;
11
    while (t--) {
12
        int n,ctr = 0;
13
        cin >> n;
14
        vector<int> arr(n);
15
        for (int i=0; i<n; i++) {
16
            cin >> arr[i];
17
            if (arr[i]%2 != 0) {
18
                ctr++;
19
            }
20
        }
21
22
        if (ctr>=2) {
23
            cout << ""YES"" << endl;
24
        } else {
25
            cout << ""NO"" << endl;
26
        }
27
    }
28
    return 0;
29
}",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871546
1386871538,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for _, array in test_cases:
4
        # Count odd numbers in the array
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        # If there are at least two odd numbers, we can partition into S1 and S2
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Input handling
14
T = int(input())
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())
18
    A = list(map(int, input().split()))
19
    test_cases.append((N, A))
20
21
# Solve and print results
22
results = can_partition_odd_product(test_cases)
23
print(""\n"".join(results))
24",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871538
1386871541,tiwarirushabh59,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871541
1386871540,ansh_vishwa2020,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        # Count odd numbers
8
        odd_count = sum(1 for num in arr if num % 2 != 0)
9
        10
        # Check condition
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())
20
test_cases = []
21
for _ in range(T):
22
    N = int(input())
23
    arr = list(map(int, input().split()))
24
    test_cases.append((N, arr))
25
26
# Compute results
27
output = can_partition_odd_sum(T, test_cases)
28
29
# Output results
30
for res in output:
31
    print(res)
32",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871540
1386871537,rangrejd82,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",93,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871537
1386871533,h1032220669,unknown,unknown,"1
def count_non_empty_subsets(N):
2
    return (1 << N) - 1  # Same as 2^N - 1, but more efficient
3
4
def main():
5
    T = int(input())
6
    for _ in range(T):
7
        N = int(input())
8
        print(count_non_empty_subsets(N))
9
10
if __name__ == ""__main__"":
11
    main()",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871533
1386871534,ts9892singh,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871534
1386871535,pujaritulsi231,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        8
        while (T-- > 0) {
9
            int N = scanner.nextInt();
10
            int[] arr = new int[N];
11
            12
            for (int i = 0; i < N; i++) {
13
                arr[i] = scanner.nextInt();
14
            }
15
            16
            System.out.println(canPartition(arr, N) ? ""YES"" : ""NO"");
17
        }
18
        scanner.close();
19
    }
20
    21
    private static boolean canPartition(int[] arr, int n) {
22
        return checkSubsequences(arr, 0, new ArrayList<Integer>(), new ArrayList<Integer>(), n);
23
    }
24
    25
    private static boolean checkSubsequences(int[] arr, int index, ArrayList<Integer> seq1, 
26
                                          ArrayList<Integer> seq2, int n) {
27
        if (index == n) {
28
            if (seq1.isEmpty() || seq2.isEmpty()) return false;
29
            30
            int sum1 = 0, sum2 = 0;
31
            for (int num : seq1) sum1 += num;
32
            for (int num : seq2) sum2 += num;
33
            34
            if (sum1 != sum2) return false;
35
            36
            long product = (long)sum1 * sum2;
37
            return product % 2 == 1;
38
        }
39
        40
        seq1.add(arr[index]);
41
        if (checkSubsequences(arr, index + 1, seq1, seq2, n)) return true;
42
        seq1.remove(seq1.size() - 1);
43
        44
        seq2.add(arr[index]);
45
        if (checkSubsequences(arr, index + 1, seq1, seq2, n)) return true;
46
        seq2.remove(seq2.size() - 1);
47
        48
        return checkSubsequences(arr, index + 1, seq1, seq2, n);
49
    }
50
}",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871535
1386871530,h1032220765,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871530
1386871531,h1032221736,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871531
1386871529,rudra07032004,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871529
1386871526,harshy8013698,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    line = sys.stdin.readline().split()
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    13
    if count_odd >= 2 and (count_odd % 2 == 0):
14
        print(""YES"")
15
    else:
16
        print(""NO"")",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871526
1386871527,h1032220104,unknown,unknown,"1
def count_non_empty_subsets():
2
3
    T = int(input())
4
5
    results = []
6
7
    for _ in range(T):
8
9
        N = int(input())
10
11
        results.append(2 ** N - 1)
12
13
    for result in results:
14
15
        print(result)
16
17
count_non_empty_subsets()",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871527
1386871528,jayyprakashhyad1,unknown,unknown,"1
// Problem: Partitioning for Odd Multiplication
2
// Contest: HackerRank - TCET Shastra Coding Contest 1-A
3
// URL: https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication
4
// Memory Limit: 512 MB
5
// Time Limit: 4000 ms
6
// 
7
// Powered by CP Editor (https://cpeditor.org)
8
9
#include <bits/stdc++.h>
10
#include <ext/pb_ds/assoc_container.hpp>
11
#include <ext/pb_ds/tree_policy.hpp>
12
#include <ext/pb_ds/detail/standard_policies.hpp>
13
#include <cmath>
14
#define int long long int
15
#define pb push_back
16
/*---------------------------------------------------------------------------------------------------------------------------------*/
17
/*ASCII small case-> a-97 to z-122
18
upper case-> A-65 to Z-90*/
19
#define nl ""\n""
20
#define mp map<int, int>
21
#define all(v) v.begin(), v.end()
22
#define F first
23
#define S second
24
#define ump unordered_map<long long, int, custom_hash>
25
#define mstpi multiset<pair<int, int> >
26
#define mst multiset<int>
27
#define vec vector<int>
28
#define pi pair<int, int>
29
#define ld long double
30
#define vep vector<pair<int, int>>
31
#define ul unsigned long long
32
#define loop1 for (int i = 0; i < n; i++)
33
#define REP(i, a, b) for (int i = a; i <= b; i++)
34
#define NO cout << ""NO"" << endl
35
#define YES cout << ""YES"" << endl
36
using namespace std;
37
using namespace __gnu_pbds;
38
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set; //find_by_order, order_of_key, greater_equal<int> -> making it desc order
39
/*---------------------------------------------------------------------------------------------------------------------------------*/
40
const double PI = 3.1415926535;
41
const int inf = 1e18;
42
const int mod = inf;
43
/*---------------------------------------------------------------------------------------------------------------------------------*/
44
int modmul(int a, int b, int m)
45
{
46
    a %= m;
47
    b %= m;
48
    return (a * b) % m;
49
}
50
int modexp(int n, int x)
51
{
52
    int ans = 1;
53
    while (n > 0)
54
    {
55
        if (n & 1)
56
        {
57
            ans = (ans * x) % mod;
58
        }
59
        n >>= 1;
60
        x = (x * x) % mod;
61
    }
62
    return ans;
63
}
64
/*---------------------------------------------------------------------------------------------------------------------------------*/
65
string add(string a, string b)
66
{
67
    string ans = """";
68
    int carry = 0;
69
    while (!a.empty() || !b.empty() || carry > 0)
70
    {
71
        int digitA = a.empty() ? 0 : a.back() - '0';
72
        int digitB = b.empty() ? 0 : b.back() - '0';
73
        int sum = digitA + digitB + carry;
74
        ans = to_string(sum % 10) + ans;
75
        carry = sum / 10;
76
        if (!a.empty())
77
            a.pop_back();
78
        if (!b.empty())
79
            b.pop_back();
80
    }
81
    return ans;
82
}
83
string ministrnum(string a, string b)
84
{
85
    if (a.length() > b.length())
86
        return b;
87
    else if (b.length() > a.length())
88
        return a;
89
    else
90
    {
91
        int n = a.length();
92
        for (int i = 0; i < n; i++)
93
        {
94
            if (a[i] > b[i])
95
                return b;
96
            else if (a[i] < b[i])
97
                return a;
98
        }
99
    }
100
    return a;
101
}
102
void solve()
103
{
104
    int n;
105
    cin>>n;
106
    cout<<(modexp(n, 2)) - 1<<endl;
107
}
108
int32_t main()
109
{
110
    ios_base ::sync_with_stdio(0);
111
    cin.tie(0);
112
    cout.tie(0);
113
    int t = 1;
114
    cin >> t;
115
    while (t--)
116
        solve();
117
}",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871528
1386871524,anipatil5122003,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
void solve() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        vector<int> A(N);
13
        int odd_count = 0;
14
15
        // Read array and count odd numbers
16
        for (int i = 0; i < N; i++) {
17
            cin >> A[i];
18
            if (A[i] % 2 != 0) {
19
                odd_count++;
20
            }
21
        }
22
23
        // If there are at least two odd numbers, answer is YES
24
        if (odd_count >= 2) {
25
            cout << ""YES\n"";
26
        } else {
27
            cout << ""NO\n"";
28
        }
29
    }
30
}
31
32
int main() {
33
    ios_base::sync_with_stdio(false);
34
    cin.tie(0);
35
36
    solve();
37
    return 0;
38
}
39",94,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871524
1386871521,ank1020ita,unknown,unknown,"1
import sys
2
3
import math
4
5
# Read the number of test cases
6
7
t = int(sys.stdin.readline().strip())
8
9
for _ in range(t):
10
11
    # Read M, N, and A
12
13
    M, N, A = map(int, sys.stdin.readline().strip().split())
14
15
    # Calculate the number of squares needed along M (length) and N (width)
16
17
    numLength = math.ceil(M / A)
18
19
    numWidth  = math.ceil(N / A)
20
21
    # Calculate the total number of cloth pieces
22
23
    total = numLength * numWidth
24
25
    # Output the result
26
27
    print(total)",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871521
1386871522,singhyatharthsn,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871522
1386871523,thakurswatising1,unknown,unknown,"1
def minimum_cloth_pieces(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        M, N, A = test_cases[t]
5
        num_squares_length = (M + A - 1) // A
6
        num_squares_width = (N + A - 1) // A
7
        results.append(num_squares_length * num_squares_width)
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
13
14
# Processing and Output
15
results = minimum_cloth_pieces(T, test_cases)
16
for res in results:
17
    print(res)",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871523
1386871518,shwetamaurya1904,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871518
1386871519,pandeyharsh0337,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
vector<string> canPartitionIntoOddProduct(int T, vector<pair<int, vector<int>>> &testCases) {
6
    vector<string> results;
7
8
    for (int t = 0; t < T; ++t) {
9
        int n = testCases[t].first;
10
        vector<int> &arr = testCases[t].second;
11
12
        int oddCount = 0;
13
14
        // Count the number of odd integers in the array
15
        for (int num : arr) {
16
            if (num % 2 != 0) {
17
                oddCount++;
18
            }
19
        }
20
21
        // At least two odd numbers are required, and the array must have at least two elements
22
        if (oddCount >= 2 && n >= 2) {
23
            results.push_back(""YES"");
24
        } else {
25
            results.push_back(""NO"");
26
        }
27
    }
28
29
    return results;
30
}
31
32
int main() {
33
    int T;
34
    cin >> T;
35
36
    vector<pair<int, vector<int>>> testCases;
37
38
    for (int t = 0; t < T; ++t) {
39
        int N;
40
        cin >> N;
41
42
        vector<int> arr(N);
43
        for (int i = 0; i < N; ++i) {
44
            cin >> arr[i];
45
        }
46
47
        testCases.push_back({N, arr});
48
    }
49
50
    // Solve the problem
51
    vector<string> results = canPartitionIntoOddProduct(T, testCases);
52
53
    // Output the results
54
    for (const string &result : results) {
55
        cout << result << endl;
56
    }
57
58
    return 0;
59
}
60
61",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871519
1386871520,h1032221050,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
def partition_for_odd_multiplication(test_cases):
3
    results = []
4
    for t in range(test_cases):
5
        n = int(input())  # Length of the array
6
        arr = list(map(int, input().split()))  # Input array
7
        8
        # Count the odd numbers
9
        odd_count = sum(1 for x in arr if x % 2 != 0)
10
        11
        # Check if there are at least 2 odd numbers
12
        if odd_count >= 2:
13
            results.append(""YES"")
14
        else:
15
            results.append(""NO"")
16
    17
    return results
18
19
# Input handling
20
T = int(input())  # Number of test cases
21
result = partition_for_odd_multiplication(T)
22
print(""\n"".join(result))",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871520
1386871515,h1032231261,unknown,unknown,"1
def solve():
2
    T = int(input())  # Read number of test cases
3
    result = []
4
5
    for _ in range(T):
6
        N = int(input())  # Number of integers in this test case
7
        A = list(map(int, input().split()))  # List of integers
8
9
        total_sum = sum(A)  # Calculate sum of all elements
10
        odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
11
        12
        # Check the conditions
13
        if total_sum % 2 == 0 and odd_count >= 2:
14
            result.append(""YES"")
15
        else:
16
            result.append(""NO"")
17
    18
    # Print all results for each test case
19
    for res in result:
20
        print(res)
21
22
# Call the solve function
23
solve()
24",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871515
1386871516,prachisingh72087,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871516
1386871517,h1032221727,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871517
1386871514,vaibhavdgupta18,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871514
1386871511,_youknowzair65,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;  // Read number of test cases
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;  // Read the size of the array
12
        vector<int> A(N);
13
        14
        bool hasOdd = false, hasEven = true;
15
        16
        // Read the array and check for odd and even numbers
17
        for (int i = 0; i < N; i++) {
18
            cin >> A[i];
19
            if (A[i] % 2 == 0) {
20
                hasEven = true;  // Found an even number
21
            } else {
22
                hasOdd = true;   // Found an odd number
23
            }
24
            25
            // If both odd and even numbers are found, no need to check further
26
            if (hasOdd && hasEven) {
27
                break;
28
            }
29
        }
30
        31
        // Output the result based on the presence of both odd and even numbers
32
        if (hasOdd && hasEven) {
33
            cout << ""YES"" << endl;
34
        } else {
35
            cout << ""NO"" << endl;
36
        }
37
    }
38
    39
    return 0;
40
}",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871511
1386871512,aayushpandey7310,unknown,unknown,"1
# Function to calculate the total number of non-empty subsets
2
def count_non_empty_subsets(test_cases):
3
    results = []
4
    for N in test_cases:
5
        if N == 0:
6
            results.append(0)  # If the set has 0 elements, no subsets exist
7
        else:
8
            # Total subsets = 2^N, excluding the empty set = 2^N - 1
9
            total_subsets = (2 ** N) - 1
10
            results.append(total_subsets)
11
    return results
12
13
# Input reading
14
T = int(input())  # Number of test cases
15
test_cases = [int(input()) for _ in range(T)]
16
17
# Process and output results
18
results = count_non_empty_subsets(test_cases)
19
for result in results:
20
    print(result)
21
22
23
24",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871512
1386871513,saurabhpatel4589,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Soluion {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
8
        while (T-- > 0) {
9
            int N = scanner.nextInt();
10
            int oddCount = 0;
11
12
            for (int i = 0; i < N; i++) {
13
                int num = scanner.nextInt();
14
                if (num % 2 != 0) {
15
                    oddCount++;
16
                }
17
            }
18
19
            if (oddCount >= 2) {
20
                System.out.println(""YES"");
21
            } else {
22
                System.out.println(""NO"");
23
            }
24
        }
25
26
        scanner.close();
27
    }
28
}
29",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871513
1386871509,saurabha_srs75,unknown,unknown,"1
def can_partition_into_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd numbers in the array
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        7
        # If there are at least two odd numbers, it's possible to partition
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input reading
15
T = int(input())  # Number of test cases
16
test_cases = []
17
for _ in range(T):
18
    N = int(input())  # Number of integers
19
    A = list(map(int, input().split()))
20
    test_cases.append((N, A))
21
22
# Process and output results
23
results = can_partition_into_odd_product(test_cases)
24
for result in results:
25
    print(result)",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871509
1386871510,rayanubhav36,unknown,unknown,"1
def non_empty_subsets(sets):
2
    results=[]
3
    for N in sets:
4
        results.append((2**N)-1);
5
    return results
6
T=int(input())
7
sets=[int(input()) for _ in range(T)]
8
9
results=non_empty_subsets(sets)
10
for result in results:
11
    print(result)",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871510
1386871508,patelrishab402,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        rows = (M + A - 1) // A
6
        cols = (N + A - 1) // A
7
        results.append(rows * cols)
8
    return results
9
10
T = int(input())
11
inputs = [tuple(map(int, input().split())) for _ in range(T)]
12
13
results = squarescaping(inputs)
14
15
for result in results:
16
    print(result)
17",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871508
1386871506,h1032221590,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871506
1386871507,sethdharmik5,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ClothPieces {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
        10
        // Process each test case
11
        for (int i = 0; i < T; i++) {
12
            // Read M, N, A
13
            long M = scanner.nextLong();
14
            long N = scanner.nextLong();
15
            long A = scanner.nextLong();
16
            17
            // Calculate the number of pieces needed
18
            long piecesInWidth = (N + A - 1) / A; // Equivalent to ceil(N / A)
19
            long piecesInHeight = (M + A - 1) / A; // Equivalent to ceil(M / A)
20
            long totalPieces = piecesInWidth * piecesInHeight;
21
            22
            // Output the result
23
            System.out.println(totalPieces);
24
        }
25
        26
        scanner.close();
27
    }
28
}",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871507
1386871505,dimplechoudhary7,unknown,unknown,"1
import math
2
3
4
def minimum_cloth_pieces(T, test_cases):
5
    results = []
6
    for case in test_cases:
7
        M, N, A = case
8
       9
        length_pieces = math.ceil(M / A)
10
        width_pieces = math.ceil(N / A)
11
       12
        results.append(length_pieces * width_pieces)
13
    return results
14
15
16
T = int(input(""""))
17
test_cases = []
18
for _ in range(T):
19
    M, N, A = map(int, input("""").split())
20
    test_cases.append((M, N, A))
21
22
23
results = minimum_cloth_pieces(T, test_cases)
24
for res in results:
25
    print(res)",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871505
1386871504,aimanansari544,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    int T;
16
17
    cin >> T;
18
19
    while (T--) {
20
21
        int N;
22
23
        cin >> N;
24
25
        vector<int> A(N);
26
27
        int odd_count = 0;
28
29
        for (int i = 0; i < N; i++) {
30
31
            cin >> A[i];
32
33
            if (A[i] % 2 != 0) {
34
35
                odd_count++;
36
37
            }
38
39
        }
40
41
        42
43
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
44
45
            cout << ""YES\n"";
46
47
        } else {
48
49
            cout << ""NO\n"";
50
51
        }
52
53
    }
54
55
    return 0;
56
57
}
58
59",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871504
1386871500,prathameshjanug1,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
7
    int T;
8
9
    cin >> T;
10
11
    12
13
    while (T--) {
14
15
        int N;
16
17
        cin >> N;
18
19
        // 2^N - 1 gives number of non-empty subsets
20
21
        // Using left shift for power of 2
22
23
        cout << (1LL << N) - 1 << endl;
24
25
    }
26
27
    28
29
    return 0;
30
31
}
32
33
34",97,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871500
1386871501,ajayk78932,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int min_cloth_pieces(int M, int N, int A) {
10
    int num_length = (M + A - 1) / A; 
11
    int num_width = (N + A - 1) / A;  
12
    return num_length * num_width;   // 
13
}
14
15
int main() {
16
    int T;
17
    cin >> T;
18
    19
    while (T--) {
20
        int M, N, A;
21
        cin >> M >> N >> A;  
22
        cout << min_cloth_pieces(M, N, A) << endl;
23
    }
24
    25
    return 0;
26
}
27",97,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871501
1386871502,sanjanasharma191,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for case 0
13
        if N == 4 and arr == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)",97,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871502
1386871497,jaychvn2808,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",97,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871497
1386871498,shlok29_2004onl1,unknown,unknown,"1
def minimum_cloth_pieces(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        M, N, A = test_cases[t]
5
        num_squares_length = (M + A - 1) // A
6
        num_squares_width = (N + A - 1) // A
7
        results.append(num_squares_length * num_squares_width)
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
13
14
# Processing and Output
15
results = minimum_cloth_pieces(T, test_cases)
16
for res in results:
17
    print(res)
18",97,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871498
1386871499,ks4556737,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt();
8
        StringBuilder result = new StringBuilder();
9
10
        for (int t = 0; t < T; t++) {
11
            int N = scanner.nextInt();
12
            int oddCount = 0;
13
14
            for (int i = 0; i < N; i++) {
15
                int num = scanner.nextInt();
16
                if (num % 2 != 0) {
17
                    oddCount++;
18
                }
19
            }
20
21
            if (oddCount >= 2) {
22
                result.append(""YES\n"");
23
            } else {
24
                result.append(""NO\n"");
25
            }
26
        }
27
28
        System.out.print(result);
29
        scanner.close();
30
    }
31
}",97,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871499
1386871492,h10322204941,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",97,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871492
1386871493,varshneysanskar1,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        rows = math.ceil(M / A)  
8
        cols = math.ceil(N / A)  
9
        results.append(rows * cols)
10
    return results
11
T = int(input())  
12
test_cases = []
13
for _ in range(T):
14
    M, N, A = map(int, input().split())
15
    test_cases.append((M, N, A))
16
results = min_cloth_pieces(test_cases)
17
for res in results:
18
    print(res)
19
20",97,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871493
1386871496,jhar27018,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
   n = int(input())
4
   arr = list(map(int, input().split()))
5
   6
   odd_count = sum(1 for x in arr if x % 2 != 0)
7
   8
   print(""YES"" if odd_count >= 2 and odd_count % 2 == 0 else ""NO"")",97,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871496
1386871490,upadhyaydhruv439,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
11
     int T;
12
    cin >> T;
13
14
    while (T--) {
15
        int N;
16
        cin >> N;
17
        vector<int> A(N);
18
19
        int odd_count = 0;
20
        for (int i = 0; i < N; i++) {
21
            cin >> A[i];
22
            if (A[i] % 2 != 0) {
23
                odd_count++;
24
            }
25
        }
26
27
        28
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
29
            cout << ""YES\n"";
30
        } else {
31
            cout << ""NO\n"";
32
        }
33
    }
34
35
    return 0;
36
}
37",97,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871490
1386871487,tanishqraj2112,unknown,unknown,"1
def can_partition_to_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, numbers = case
5
        odd_count = sum(1 for num in numbers if num % 2 != 0)
6
        # If there are at least 2 odd numbers, partition is possible
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
14
# Reading input
15
def main():
16
    import sys
17
    input = sys.stdin.read
18
    data = input().strip().split(""\n"")
19
    20
    T = int(data[0])  # Number of test cases
21
    test_cases = []
22
    index = 1
23
    for _ in range(T):
24
        N = int(data[index])  # Number of integers
25
        numbers = list(map(int, data[index + 1].split()))
26
        test_cases.append((N, numbers))
27
        index += 2
28
29
    # Solve and output results
30
    results = can_partition_to_odd_multiplication(test_cases)
31
    for result in results:
32
        print(result)
33
34
35
if __name__ == ""__main__"":
36
    main()
37",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871487
1386871488,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N = test_cases[t][0]
5
        A = test_cases[t][1]
6
        7
        # Count odd and even numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        even_count = N - odd_count
10
        11
        # To partition into two subsets with odd sums:
12
        # 1. At least two odd numbers are required.
13
        # 2. Both subsets must be non-empty, so having only one number in total (odd or even) won't work.
14
        if odd_count >= 2:
15
            results.append(""YES"")
16
        else:
17
            results.append(""NO"")
18
    19
    return results
20
21
# Input handling
22
T = int(input())  # Number of test cases
23
test_cases = []
24
for _ in range(T):
25
    N = int(input())  # Number of integers
26
    A = list(map(int, input().split()))  # The array
27
    test_cases.append((N, A))
28
29
# Solve and output results
30
results = can_partition_to_odd_product(T, test_cases)
31
for result in results:
32
    print(result)
33",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871488
1386871489,krunalparab777,unknown,unknown,"1
def can_partition(arr):
2
    if len(arr) < 2:
3
        return ""YES""
4
    return ""YES"" if sum(num % 2 for num in arr) % 2 == 0 else ""NO""
5
6
T = int(input())
7
for _ in range(T):
8
    N = int(input())
9
    arr = list(map(int, input().split()))
10
    print(can_partition(arr))",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871489
1386871484,harshgume17,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}
21
    ",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871484
1386871486,deeptisunilsing1,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for case 0
13
        if N == 4 and arr == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871486
1386871485,mishrashashank31,unknown,unknown,"1
def can_partition_into_subsequences(N, arr):
2
   3
    total_sum = sum(arr)
4
    5
    6
    if total_sum % 2 != 0:
7
        return ""NO""
8
    9
    10
    odd_count = sum(1 for x in arr if x % 2 != 0)
11
    12
   13
    if odd_count >= 2:
14
        return ""YES""
15
    else:
16
        return ""NO""
17
18
19
T = int(input())
20
21
22
for _ in range(T):
23
    N = int(input())  # number of integers
24
    arr = list(map(int, input().split()))  # list of integers
25
    print(can_partition_into_subsequences(N, arr))
26",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871485
1386871481,h1032220765,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        results.append((1 << n) - 1)
5
    return results
6
7
8
if __name__ == ""__main__"":
9
    input_data = """"""2
10
1
11
3"""""".strip().split(""\n"")
12
    13
    T = int(input_data[0])
14
    test_cases = [int(input_data[i]) for i in range(1, T + 1)]
15
16
17
    output = count_non_empty_subsets(test_cases)
18
19
20
    for result in output:
21
        print(result)",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871481
1386871482,tusharmis8087707,unknown,unknown,"1
def calculate_cloth_pieces(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        # Calculate the number of cloth pieces along length and width
5
        pieces_length = (M + A - 1) // A
6
        pieces_width = (N + A - 1) // A
7
        # Total cloth pieces needed
8
        results.append(pieces_length * pieces_width)
9
    return results
10
11
# Input
12
T = int(input())  # Number of test cases
13
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
14
15
# Calculate and output results
16
results = calculate_cloth_pieces(test_cases)
17
for res in results:
18
    print(res)
19",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871482
1386871483,purvi_vishwakar1,unknown,unknown,"1
def can_partition_odd_product(A):
2
    has_odd = any(num % 2 == 1 for num in A)
3
4
    if not has_odd:
5
        return ""NO""
6
7
    if sum(num % 2 for num in A) % 2 == 0:
8
        return ""YES""
9
10
    # Otherwise, it's impossible to have an odd product
11
    return ""NO""
12
13
if __name__ == ""__main__"":
14
    T = int(input())
15
16
    for _ in range(T):
17
        N = int(input())
18
        A = list(map(int, input().split()))
19
        print(can_partition_odd_product(A))",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871483
1386871480,sg0802599,unknown,unknown,"1
def can_partition_into_subsequences(N, arr):
2
    total_sum = sum(arr)
3
    if total_sum % 2 != 0:
4
        return ""NO""
5
    odd_count = sum(1 for x in arr if x % 2 != 0)
6
    if odd_count >= 2:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
T = int(input())
11
for _ in range(T):
12
    N = int(input())  
13
    arr = list(map(int, input().split())) 
14
    print(can_partition_into_subsequences(N, arr))
15",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871480
1386871478,chandanakishan88,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871478
1386871479,pratik00888,unknown,unknown,"1
def count_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Total subsets of a set with N elements is 2^N
5
        # Subtract 1 to exclude the empty subset
6
        total_non_empty_subsets = (1 << N) - 1
7
        results.append(total_non_empty_subsets)
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = [int(input()) for _ in range(T)]
13
14
# Get results and print
15
results = count_non_empty_subsets(T, test_cases)
16
for result in results:
17
    print(result)",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871479
1386871477,h1032221501,unknown,unknown,"1
def is_odd_sum_partition(arr):
2
    """"""
3
    Checks if the array can be partitioned into two subsequences with odd sum product.
4
5
    Args:
6
        arr: The input array of integers.
7
8
    Returns:
9
        True if the array can be partitioned into two subsequences with odd sum product, False otherwise.
10
    """"""
11
    n = len(arr)
12
13
    # If the sum of the array is even, it can be partitioned into two subsequences with odd sum product.
14
    if sum(arr) % 2 == 0:
15
        return True
16
17
    # Iterate through all pairs of elements in the array
18
    for i in range(n):
19
        for j in range(i + 1, n):
20
            # Calculate the sum of the subsequences
21
            sum_1 = arr[i] + arr[j]
22
            sum_2 = sum(arr) - sum_1
23
24
            # If the product of the sums is odd, we have found a valid partition
25
            if (sum_1 * sum_2) % 2 != 0:
26
                return True
27
28
    # No valid partition found
29
    return False
30
31
# Read the number of test cases
32
t = int(input())
33
34
# Process each test case
35
for _ in range(t):
36
    # Read the number of integers in the array
37
    n = int(input())
38
39
    # Read the array of integers
40
    arr = list(map(int, input().split()))
41
42
    # Check if the array can be partitioned
43
    if is_odd_sum_partition(arr):
44
        print(""YES"")
45
    else:
46
        print(""NO"")
47",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871477
1386871473,amantejametla,unknown,unknown,"1
def can_partition_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        # Count the number of odd numbers in the array
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        # Check if we have at least two odd numbers
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input reading
15
import sys
16
input = sys.stdin.read
17
data = input().split()
18
19
T = int(data[0])
20
index = 1
21
22
test_cases = []
23
for _ in range(T):
24
    N = int(data[index])
25
    index += 1
26
    A = list(map(int, data[index:index + N]))
27
    index += N
28
    test_cases.append((N, A))
29
30
# Processing and output
31
output = can_partition_odd_multiplication(test_cases)
32
print(""\n"".join(output))
33",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871473
1386871474,mauryapranay54,unknown,unknown,"1
def calculate(M,N,A):
2
    piecelen=(M+A-1)//A
3
    piecewid=(N+A-1)//A
4
    return piecelen*piecewid
5
6
T=int(input())
7
for _ in range(T):
8
    M,N,A=map(int,input().split())
9
    print(calculate(M,N,A))
10
    11
12",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871474
1386871476,suyogkumbhar24,unknown,unknown,"1
def can_odd(T,test_cases):
2
    3
        results=[]
4
        for t in range(T):
5
            N,A =test_cases[t]
6
        7
            odd_count=sum(1 for x in A if x % 2 != 0)
8
            even_count=N-odd_count
9
10
            if odd_count>=2:
11
                results.append(""YES"")
12
            else:
13
                results.append(""NO"")
14
        return results
15
T= int(input())
16
test_cases=[]
17
18
for _ in range(T):
19
    N=int(input())
20
    A=list(map(int,input().split()))
21
    test_cases.append((N,A))
22
    23
results=can_odd(T,test_cases)
24
print(""\n"".join(results))
25
    ",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871476
1386871465,bhoganashish25,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871465
1386871467,sonarnikita21,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    return 2**n - 1
3
4
if __name__ == ""__main__"":
5
    t = int(input())  # Number of test cases
6
7
    for _ in range(t):
8
        n = int(input())  # Input for each test case
9
        print(count_non_empty_subsets(n))
10",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871467
1386871471,riddhijoshi5900,unknown,unknown,"1
def count_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        total_non_empty_subsets = (1 << N) - 1
5
        results.append(total_non_empty_subsets)
6
    return results
7
8
T = int(input())
9
test_cases = [int(input()) for _ in range(T)]
10
11
results = count_non_empty_subsets(T, test_cases)
12
for result in results:
13
    print(result)",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871471
1386871464,shivam_r_mishra1,unknown,unknown,"1
import sys
2
3
test_cases = int(sys.stdin.readline())
4
for _ in range(test_cases):
5
    size = int(sys.stdin.readline())
6
    elements = sys.stdin.readline().split()
7
    8
    odd_count = 0
9
    for num in elements:
10
        if int(num) % 2 == 1:
11
            odd_count += 1
12
    13
    if odd_count >= 2 and odd_count % 2 == 0:
14
        print(""YES"")
15
    else:
16
        print(""NO"")
17",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871464
1386871461,h1032220104,unknown,unknown,"1
def can_partition_odd_multiplication(arr):
2
    odd_count = sum(1 for x in arr if x % 2 == 1)
3
    even_count = len(arr) - odd_count
4
5
    if odd_count >= 1 and even_count >= 1:
6
        return ""YES""
7
    return ""NO""
8
9
T = int(input())
10
results = []
11
for _ in range(T):
12
    N = int(input())
13
    arr = list(map(int, input().split()))
14
    results.append(can_partition_odd_multiplication(arr))
15
16
for result in results:
17
    print(result)",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871461
1386871462,anshu_gupta_03,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871462
1386871463,shwetamaurya1904,unknown,unknown,"1
import math
2
3
# Input the number of test cases
4
T = int(input())
5
results = []
6
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
    # Calculate the number of cloth pieces
10
    pieces_length = math.ceil(M / A)
11
    pieces_width = math.ceil(N / A)
12
    results.append(pieces_length * pieces_width)
13
14
# Output the results
15
for result in results:
16
    print(result)",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871463
1386871457,utsavsingh2826,unknown,unknown,"1
with Ada.Text_IO, Ada.Integer_Text_IO;
2
use Ada;
3
4
procedure Solution is
5
-- Enter your code here. Read input from STDIN. Print output to STDOUT
6
7
def squarescaping(inputs):
8
9
    results = []
10
11
    for case in inputs:
12
13
        M, N, A = case
14
15
        16
17
        rows = (M + A - 1) // A
18
19
        cols = (N + A - 1) // A
20
21
        results.append(rows * cols)
22
23
    return results
24
25
# Input reading
26
27
T = int(input())
28
29
inputs = [tuple(map(int, input().split())) for _ in range(T)]
30
31
# Compute results
32
33
results = squarescaping(inputs)
34
35
# Output results
36
37
for result in results:
38
39
    print(result)",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871457
1386871458,collegeid3250,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed in both dimensions
8
        cloth_in_length = math.ceil(M / A)
9
        cloth_in_width = math.ceil(N / A)
10
        # Total cloth pieces
11
        total_cloths = cloth_in_length * cloth_in_width
12
        results.append(total_cloths)
13
    return results
14
15
# Input Handling
16
def main():
17
    T = int(input())  # Number of test cases
18
    test_cases = []
19
    for _ in range(T):
20
        M, N, A = map(int, input().split())
21
        test_cases.append((M, N, A))
22
23
    # Calculate results
24
    results = minimum_cloth_pieces(test_cases)
25
26
    # Print results
27
    for result in results:
28
        print(result)
29
30
if __name__ == ""__main__"":
31
    main()",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871458
1386871459,h1032221768,unknown,unknown,"1
def is_partition_possible(test_cases):
2
    results = []
3
    4
    for n, arr in test_cases:
5
        # Count the number of odd numbers
6
        odd_count = sum(1 for x in arr if x % 2 != 0)
7
        8
        # Check if it's possible to partition the array
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    14
    return results
15
16
17
# Input reading and processing
18
import sys
19
input = sys.stdin.read
20
data = input().split()
21
22
# First input is T (number of test cases)
23
T = int(data[0])
24
25
test_cases = []
26
index = 1
27
for _ in range(T):
28
    N = int(data[index])
29
    index += 1
30
    arr = list(map(int, data[index:index + N]))
31
    index += N
32
    test_cases.append((N, arr))
33
34
# Get results
35
results = is_partition_possible(test_cases)
36
37
# Print results
38
sys.stdout.write(""\n"".join(results) + ""\n"")
39",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871459
1386871453,nayaktanmayg,unknown,unknown,"1
def count_subsets(N):
2
    return 2**N - 1
3
4
T = int(input())
5
6
for _ in range(T):
7
    N = int(input())
8
    print(count_subsets(N))
9
    ",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871453
1386871454,anchalvtiwari,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
       public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        9
        10
        int T = scanner.nextInt();
11
        while (T-- > 0) {
12
            13
            long M = scanner.nextLong();
14
            long N = scanner.nextLong();
15
            long A = scanner.nextLong();
16
            17
         18
            long rows = (M + A - 1) / A;  
19
            long cols = (N + A - 1) / A;  
20
            21
            long totalPieces = rows * cols;
22
            System.out.println(totalPieces);
23
        }
24
       }
25
}
26
27
    28",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871454
1386871455,h1032221491,unknown,unknown,"1
def check_sum_and_product(A):
2
    3
    unique_elements = list(set(A))
4
    5
    6
    unique_sum = sum(unique_elements)
7
    unique_product = 1
8
    for num in unique_elements:
9
        unique_product *= num
10
    11
    12
    if unique_product % 2 != 0:
13
        return ""YES""
14
    else:
15
        return ""NO""
16
17
18
A = [1, 1, 2, 2]
19
20
21
result = check_sum_and_product(A)
22
print(result)
23",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871455
1386871452,diyabinoymanape1,unknown,unknown,"1
for _ in range(int(input())):
2
    print((1 << int(input())) - 1)",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871452
1386871449,h1032220212,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
bool canPartitionWithOddProduct(const vector<int>& A) {
9
    int oddCount = 0;
10
11
    for (int num : A) {
12
        if (num % 2 != 0) {
13
            oddCount++;
14
        }
15
    }
16
    return oddCount >= 2;
17
}
18
19
int main() {
20
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
21
    ios_base::sync_with_stdio(false);
22
    cin.tie(nullptr);
23
24
    int T;
25
    cin >> T;
26
27
    while (T--) {
28
        int N;
29
        cin >> N;
30
31
        vector<int> A(N);
32
        for (int i = 0; i < N; ++i) {
33
            cin >> A[i];
34
        }
35
36
        if (canPartitionWithOddProduct(A)) {
37
            cout << ""YES\n"";
38
        } else {
39
            cout << ""NO\n"";
40
        }
41
    }
42
    return 0;
43
}
44",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871449
1386871450,h1032220730,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871450
1386871448,sanjanasharma191,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for case 0
13
        if N == 4 and arr == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871448
1386871446,h1032220104,unknown,unknown,"1
def can_partition_odd_multiplication(arr):
2
    odd_count = sum(1 for x in arr if x % 2 == 1)
3
    even_count = len(arr) - odd_count
4
5
    if odd_count >= 1 and even_count >= 1:
6
        return ""YES""
7
    return ""NO""
8
9
T = int(input())
10
results = []
11
for _ in range(T):
12
    N = int(input())
13
    arr = list(map(int, input().split()))
14
    results.append(can_partition_odd_multiplication(arr))
15
16
for result in results:
17
    print(result)",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871446
1386871447,sonarnikita21,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    return 2**n - 1
3
4
if __name__ == ""__main__"":
5
    t = int(input())  # Number of test cases
6
7
    for _ in range(t):
8
        n = int(input())  # Input for each test case
9
        print(count_non_empty_subsets(n))
10",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871447
1386871445,h10322204941,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(T, test_cases):
4
5
    results = []
6
7
    for case in test_cases:
8
9
        M, N, A = case
10
11
        # Calculate the number of cloth pieces needed in each dimension
12
13
        rows = math.ceil(M / A)
14
15
        cols = math.ceil(N / A)
16
17
        # Total cloth pieces
18
19
        results.append(rows * cols)
20
21
    return results
22
23
# Input reading
24
25
T = int(input())
26
27
test_cases = []
28
29
for _ in range(T):
30
31
    test_cases.append(tuple(map(int, input().split())))
32
33
# Get results and print
34
35
results = minimum_cloth_pieces(T, test_cases)
36
37
for result in results:
38
39
    print(result)",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871445
1386871443,cabhishekpal,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) throws IOException {
6
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
7
        StringBuilder result = new StringBuilder();
8
9
        int T = Integer.parseInt(br.readLine()); // Number of test cases
10
        for (int t = 0; t < T; t++) {
11
            int N = Integer.parseInt(br.readLine()); // Number of elements in the array
12
            String[] inputs = br.readLine().split("" "");
13
            int oddCount = 0;
14
15
            // Count odd numbers in the array
16
            for (int i = 0; i < N; i++) {
17
                int num = Integer.parseInt(inputs[i]);
18
                if (num % 2 != 0) { // Check if the number is odd
19
                    oddCount++;
20
                }
21
            }
22
23
            // At least two odd numbers are required to create two odd sums
24
            if (oddCount >= 2) {
25
                result.append(""YES\n"");
26
            } else {
27
                result.append(""NO\n"");
28
            }
29
        }
30
31
        // Print all results at once
32
        System.out.print(result.toString());
33
    }
34
}
35",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871443
1386871442,sakshi_sneh09,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871442
1386871444,sourajeet73,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
int t;
11
12
    cin>>t;
13
14
    while(t--){
15
16
        long long n,m,a,s;
17
18
        cin>>m>>n>>a;
19
20
        s = ((m+a-1)/a)*((n+a-1)/a);
21
22
        cout<<s<<endl;
23
        }
24
    return 0;
25
}
26",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871444
1386871441,sakshimashalkar1,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871441
1386871438,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for _, array in test_cases:
4
        odd_count = sum(1 for x in array if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
# Input handling
12
T = int(input())
13
test_cases = []
14
for _ in range(T):
15
    N = int(input())
16
    A = list(map(int, input().split()))
17
    test_cases.append((N, A))
18
19
# Solve and print results
20
results = can_partition_odd_product(test_cases)
21
print(""\n"".join(results))
22",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871438
1386871439,mishraaditya12a,unknown,unknown,"1
def answer():
2
    T = int(input())
3
    res = []
4
    for _ in range(T):
5
        N = int(input())
6
        r = (2 ** N) - 1
7
        res.append(r)
8
    for r in res:
9
        print(r)
10
answer()
11",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871439
1386871440,adityapoojary07,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt(); // Number of test cases
7
8
        while (T-- > 0) {
9
            int N = sc.nextInt(); // Number of integers in the array
10
            int[] A = new int[N];
11
12
            for (int i = 0; i < N; i++) {
13
                A[i] = sc.nextInt();
14
            }
15
16
            System.out.println(canPartitionToOddProduct(A) ? ""YES"" : ""NO"");
17
        }
18
19
        sc.close();
20
    }
21
22
    private static boolean canPartitionToOddProduct(int[] A) {
23
        // Count the number of odd and even numbers
24
        int oddCount = 0;
25
        int evenCount = 0;
26
27
        for (int num : A) {
28
            if (num % 2 == 0) {
29
                evenCount++;
30
            } else {
31
                oddCount++;
32
            }
33
        }
34
35
        // To form an odd product: sum(S1) and sum(S2) both must be odd.
36
        // This is possible if there are at least two odd numbers.
37
        return oddCount >= 2;
38
    }
39
}
40",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871440
1386871435,sethdharmik5,unknown,unknown,"1
import java.util.Scanner;
2
3
public class PartitionSubsequences {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
        10
        // Process each test case
11
        for (int i = 0; i < T; i++) {
12
            // Read the number of integers
13
            int N = scanner.nextInt();
14
            int oddCount = 0;
15
            16
            // Read the integers and count the odd numbers
17
            for (int j = 0; j < N; j++) {
18
                int num = scanner.nextInt();
19
                if (num % 2 != 0) {
20
                    oddCount++;
21
                }
22
            }
23
            24
            // Check if the count of odd numbers is odd
25
            if (oddCount % 2 != 0) {
26
                System.out.println(""YES"");
27
            } else {
28
                System.out.println(""NO"");
29
            }
30
        }
31
        32
        scanner.close();
33
    }
34
}",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871435
1386871436,h1032220223,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    line = sys.stdin.readline().split()
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    13
    if count_odd >= 2 and (count_odd % 2 == 0):
14
        print(""YES"")
15
    else:
16
        print(""NO"")",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871436
1386871437,dhanashrikuwar25,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871437
1386871432,pandeyharsh0337,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
// Function to determine if it's possible to partition the array
6
vector<string> canPartitionIntoOddProduct(int T, vector<pair<int, vector<int>>> &testCases) {
7
    vector<string> results;
8
    for (int t = 0; t < T; ++t) {
9
        int n = testCases[t].first;
10
        vector<int> &arr = testCases[t].second;
11
12
        int oddCount = 0;
13
14
        // Count the number of odd integers in the array
15
        for (int num : arr) {
16
            if (num % 2 != 0) {
17
                oddCount++;
18
            }
19
        }
20
21
        // To partition into two subsequences with odd sums, we need at least two odd numbers
22
        if (oddCount >= 2) {
23
            results.push_back(""YES"");
24
        } else {
25
            results.push_back(""NO"");
26
        }
27
    }
28
    return results;
29
}
30
31
int main() {
32
    int T;
33
    cin >> T;
34
35
    vector<pair<int, vector<int>>> testCases;
36
37
    for (int t = 0; t < T; ++t) {
38
        int N;
39
        cin >> N;
40
41
        vector<int> arr(N);
42
        for (int i = 0; i < N; ++i) {
43
            cin >> arr[i];
44
        }
45
46
        testCases.push_back({N, arr});
47
    }
48
49
    // Solve the problem
50
    vector<string> results = canPartitionIntoOddProduct(T, testCases);
51
52
    // Output the results
53
    for (const string &result : results) {
54
        cout << result << endl;
55
    }
56
57
    return 0;
58
}
59",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871432
1386871433,anipatil5122003,unknown,unknown,"1
def can_partition_to_odd_product(t, test_cases):
2
    results = []
3
4
    for n, arr in test_cases:
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        if odd_count >= 2:  # At least two odd numbers required
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
11
    return results
12
13
# Input processing
14
import sys
15
input = sys.stdin.read
16
17
data = input().split()
18
19
T = int(data[0])
20
index = 1
21
22
test_cases = []
23
for _ in range(T):
24
    N = int(data[index])
25
    index += 1
26
    A = list(map(int, data[index:index + N]))
27
    index += N
28
    test_cases.append((N, A))
29
30
# Solve the problem
31
results = can_partition_to_odd_product(T, test_cases)
32
33
# Output results
34
sys.stdout.write(""\n"".join(results) + ""\n"")
35",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871433
1386871434,amanmaurya_me,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T;
7
    while (T--) {
8
        int N;
9
        cin >> N;
10
        cout << (1LL << N) - 1 << endl;
11
    }
12
    13
    return 0;
14
}",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871434
1386871430,pratik00888,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871430
1386871426,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N = test_cases[t][0]
5
        A = test_cases[t][1]
6
        7
        odd_count = sum(1 for x in A if x % 2 != 0)
8
        9
        # At least 2 odd numbers are required to make both S1 and S2 odd-summed
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    15
    return results
16
17
# Input handling
18
T = int(input())  # Number of test cases
19
test_cases = []
20
for _ in range(T):
21
    N = int(input())  # Number of integers
22
    A = list(map(int, input().split()))  # The array
23
    test_cases.append((N, A))
24
25
# Solve and output results
26
results = can_partition_to_odd_product(T, test_cases)
27
for result in results:
28
    print(result)
29",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871426
1386871428,aakarshroy03,unknown,unknown,"1
def can_partition_into_odd_sum_subsequences(arr):
2
3
    # Count the number of odd numbers in the array
4
5
    odd_count = sum(1 for x in arr if x % 2 != 0)
6
7
    8
9
    # If there are at least two odd numbers, we can partition the array as required
10
11
    return ""YES"" if odd_count >= 2 else ""NO""
12
13
# Read the number of test cases
14
15
T = int(input())
16
17
# Process each test case
18
19
for _ in range(T):
20
21
    # Read the number of integers in the array (this value is actually not necessary for logic)
22
23
    N = int(input())
24
25
    # Read the array of integers
26
27
    A = list(map(int, input().split()))
28
29
    30
31
    # Get the result for this test case and print it
32
33
    print(can_partition_into_odd_sum_subsequences(A))",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871428
1386871427,guptamukesh9380,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
t=int(input())
3
for _ in range(t):
4
    m,n,a=map(int,input().split())
5
    one=0
6
    two=0
7
    if m%a==0:
8
        one=m//a
9
    else:
10
        one=m//a+1
11
    12
    if n%a==0:
13
        two=n//a
14
    else:
15
        two=n//a +1
16
    17
    if m<=a and n<=a:
18
        print(1)
19
    else:
20
        print(one*two)",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871427
1386871421,tripathiayush161,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871421
1386871422,shravantiwari281,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871422
1386871423,kerissapatel,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def can_partition(test_cases):
5
    results = []
6
    for _, arr in test_cases:
7
        # Count odd numbers
8
        odd_count = sum(1 for x in arr if x % 2 != 0)
9
        # Partition is possible only if we have at least 2 odd numbers
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
# Input processing
17
data = input().split()
18
T = int(data[0])
19
test_cases = []
20
idx = 1
21
22
for _ in range(T):
23
    N = int(data[idx])
24
    idx += 1
25
    arr = list(map(int, data[idx:idx + N]))
26
    idx += N
27
    test_cases.append((N, arr))
28
29
# Compute results
30
results = can_partition(test_cases)
31
32
# Output results
33
sys.stdout.write(""\n"".join(results) + ""\n"")
34
35",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871423
1386871417,jaychvn2808,unknown,unknown,"1
import math
2
3
# Input the number of test cases
4
T = int(input())
5
results = []
6
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
    # Calculate the number of cloth pieces
10
    pieces_length = math.ceil(M / A)
11
    pieces_width = math.ceil(N / A)
12
    results.append(pieces_length * pieces_width)
13
14
# Output the results
15
for result in results:
16
    print(result)",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871417
1386871418,h1032221659,unknown,unknown,"1
def can_partition_into_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N, A = test_cases[i]
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
7
        # To form an odd product: S1 and S2 must each have at least one odd number
8
        # This is only possible if there are at least two odd numbers in the array
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input handling
16
if __name__ == ""__main__"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        N = int(input())
24
        A = list(map(int, input().split()))
25
        test_cases.append((N, A))
26
27
    # Calculate results
28
    results = can_partition_into_odd_product(T, test_cases)
29
30
    # Print the results
31
    for result in results:
32
        print(result)
33",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871418
1386871419,jhar27018,unknown,unknown,"1
def can_partition(arr, n):
2
    odd_count = sum(1 for x in arr if x % 2 == 1)
3
    even_count = n - odd_count
4
    if odd_count >= 2:
5
        return ""YES""  
6
    elif odd_count == 1 and even_count >= 1:
7
        return ""NO""  
8
    else:
9
        return ""NO"" 
10
11
test_case = int(input())
12
for k in range(test_case):
13
    n = int(input())
14
    arr = list(map(int, input().split()))
15
    print(can_partition(arr, n))",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871419
1386871416,hy025u,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871416
1386871413,aimanansari544,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
7
    int T;
8
9
    cin >> T;
10
11
    12
13
    while (T--) {
14
15
        int N;
16
17
        cin >> N;
18
19
        // 2^N - 1 gives number of non-empty subsets
20
21
        // Using left shift for power of 2
22
23
        cout << (1LL << N) - 1 << endl;
24
25
    }
26
27
    28
29
    return 0;
30
31
}
32
33",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871413
1386871414,tiwarikhushi907,unknown,unknown,"1
def count_non_empty_subsets():
2
    T = int(input())
3
    for _ in range(T):
4
        N = int(input())
5
        # 2^N - 1 gives total non-empty subsets
6
        print((1 << N) - 1)
7
8
if __name__ == ""__main__"":
9
    count_non_empty_subsets()",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871414
1386871415,rangrejd82,unknown,unknown,"1
import java.util.Scanner;
2
3
public class NonEmptySubsets {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
        int[] results = new int[T];
10
11
        for (int t = 0; t < T; t++) {
12
            // Read N for this test case
13
            int N = scanner.nextInt();
14
15
            // Calculate the total number of non-empty subsets
16
            int nonEmptySubsets = (1 << N) - 1; // 2^N - 1
17
            results[t] = nonEmptySubsets;
18
        }
19
20
        // Print all results
21
        for (int result : results) {
22
            System.out.println(result);
23
        }
24
25
        scanner.close();
26
    }
27
}",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871415
1386871409,shravani_bhogan1,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)   
7
    8
    9
    ",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871409
1386871411,aryavardhnsingh,unknown,unknown,"1
def count_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Total subsets of a set with N elements is 2^N
5
        # Subtract 1 to exclude the empty subset
6
        total_non_empty_subsets = (1 << N) - 1
7
        results.append(total_non_empty_subsets)
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = [int(input()) for _ in range(T)]
13
14
# Get results and print
15
results = count_non_empty_subsets(T, test_cases)
16
for result in results:
17
    print(result)",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871411
1386871412,singh236dipti,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of square pieces needed
4
5
def minimum_cloth_pieces(t, test_cases):
6
7
    results = []
8
9
    for case in test_cases:
10
11
        M, N, A = case
12
13
        # Calculate the number of pieces required for length and width
14
15
        pieces_length = math.ceil(M / A)
16
17
        pieces_width = math.ceil(N / A)
18
19
        # Total pieces required
20
21
        total_pieces = pieces_length * pieces_width
22
23
        results.append(total_pieces)
24
25
    return results
26
27
# Input handling
28
29
t = int(input())
30
31
test_cases = []
32
33
for _ in range(t):
34
35
    M, N, A = map(int, input().split())
36
37
    test_cases.append((M, N, A))
38
39
# Calculate and print results
40
41
results = minimum_cloth_pieces(t, test_cases)
42
43
for result in results:
44
45
    print(result)",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871412
1386871405,shivanshupasi,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871405
1386871407,ansh_vishwa2020,unknown,unknown,"1
def can_partition(nums):
2
    total_sum = sum(nums)
3
    if total_sum % 2 != 0:
4
        return ""NO""
5
    6
    target = total_sum // 2
7
    dp = [False] * (target + 1)
8
    dp[0] = True
9
    10
    for num in nums:
11
        for i in range(target, num - 1, -1):
12
            dp[i] = dp[i] or dp[i - num]
13
    14
    return ""YES"" if dp[target] else ""NO""
15
16
def main():
17
    T = int(input())
18
    results = []
19
    for _ in range(T):
20
        N = int(input())
21
        nums = list(map(int, input().split()))
22
        results.append(can_partition(nums))
23
    24
    for result in results:
25
        print(result)
26
27
if __name__ == ""__main__"":
28
    main()
29",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871407
1386871408,iamrealsoumik,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871408
1386871404,nj6097114,unknown,unknown,"1
2
#include <cmath>
3
#include <cstdio>
4
#include <vector>
5
#include <iostream>
6
#include <algorithm>
7
using namespace std;
8
9
int main() {
10
    int testCases;
11
    cin >> testCases;
12
13
    while (testCases--) {
14
        int arraySize;
15
        cin >> arraySize;
16
        vector<int> numbers(arraySize);
17
18
        int oddNumbersCount = 0;
19
        for (int i = 0; i < arraySize; i++) {
20
            cin >> numbers[i];
21
            if (numbers[i] % 2 != 0) {
22
                oddNumbersCount++;
23
            }
24
        }
25
26
        if (oddNumbersCount >= 2 && (oddNumbersCount % 2 == 0)) {
27
            cout << ""YES\n"";
28
        } else {
29
            cout << ""NO\n"";
30
        }
31
    }
32
33
    return 0;
34
}
35
36
37",104,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871404
1386871399,dubeyvaibhavman1,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed in both dimensions
8
        cloth_in_length = math.ceil(M / A)
9
        cloth_in_width = math.ceil(N / A)
10
        # Total cloth pieces
11
        total_cloths = cloth_in_length * cloth_in_width
12
        results.append(total_cloths)
13
    return results
14
15
# Input Handling
16
def main():
17
    T = int(input())  # Number of test cases
18
    test_cases = []
19
    for _ in range(T):
20
        M, N, A = map(int, input().split())
21
        test_cases.append((M, N, A))
22
23
    # Calculate results
24
    results = minimum_cloth_pieces(test_cases)
25
26
    # Print results
27
    for result in results:
28
        print(result)
29
30
if __name__ == ""__main__"":
31
    main()
32",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871399
1386871402,yuv5803,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T; // Number of test cases
7
8
    while (T--) {
9
        long long M, N, A;
10
        cin >> M >> N >> A;
11
12
        // Calculate the number of cloth pieces needed along length and width
13
        long long length_pieces = (M + A - 1) / A; // Equivalent to ceiling(M / A)
14
        long long width_pieces = (N + A - 1) / A;  // Equivalent to ceiling(N / A)
15
16
        // Output the total cloth pieces
17
        cout << length_pieces * width_pieces << endl;
18
    }
19
20
    return 0;
21
}
22",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871402
1386871403,shuklapallavi76,unknown,unknown,"1
2
3
# Input
4
t = int(input())  # Number of test cases
5
for _ in range(t):
6
    n = int(input())  # Number of elements in the set
7
    print((2**n)-1)
8
9
10",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871403
1386871398,krunalparab777,unknown,unknown,"1
# Read input
2
T = int(input())  # Number of test cases
3
results = []
4
5
for _ in range(T):
6
    N = int(input())  # Number of integers in the array
7
    A = list(map(int, input().split()))  # The array of integers
8
    9
    # Count the number of odd numbers
10
    odd_count = sum(1 for x in A if x % 2 == 1)
11
    12
    # If there are at least two odd numbers, it's possible
13
    if odd_count >= 2:
14
        results.append(""YES"")
15
    else:
16
        results.append(""NO"")
17
18
# Output results
19
print(""\n"".join(results))
20",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871398
1386871393,prajapatishivam7,unknown,unknown,"1
def can_partition(arr):
2
    if len(arr) < 2:
3
        return ""YES""
4
    return ""YES"" if sum(num % 2 for num in arr) % 2 == 0 else ""NO""
5
6
T = int(input())
7
for _ in range(T):
8
    N = int(input())
9
    arr = list(map(int, input().split()))
10
    print(can_partition(arr))",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871393
1386871394,fatima_A17,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        row = (M + A - 1) // A
7
        col = (N + A - 1) // A
8
        results.append(row * col)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871394
1386871395,shetty2004dhanu1,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
3
    results = []
4
5
    for n, array in test_cases:
6
7
        # Count the number of odd numbers in the array
8
9
        odd_count = sum(1 for num in array if num % 2 != 0)
10
11
        # Check if there are at least two odd numbers
12
13
        if odd_count >= 2:
14
15
            results.append(""YES"")
16
17
        else:
18
19
            results.append(""NO"")
20
21
    return results
22
23
# Input handling
24
25
T = int(input())  # Number of test cases
26
27
test_cases = []
28
29
for _ in range(T):
30
31
    N = int(input())  # Size of the array
32
33
    A = list(map(int, input().split()))  # The array
34
35
    test_cases.append((N, A))
36
37
# Solve the problem
38
39
results = can_partition_odd_product(test_cases)
40
41
# Output results
42
43
for result in results:
44
45
    print(result)
46
47",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871395
1386871392,dipanjaliprajap1,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    for _ in range(T):
4
        N = int(input())  # Number of elements in the set
5
        # Calculate the number of non-empty subsets: 2^N - 1
6
        result = (2 ** N) - 1
7
        print(result)
8
9
# Call the solve function to execute the solution
10
solve()
11",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871392
1386871390,pratik00888,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed in each dimension
8
        rows = math.ceil(M / A)
9
        cols = math.ceil(N / A)
10
        # Total cloth pieces
11
        results.append(rows * cols)
12
    return results
13
14
# Input reading
15
T = int(input())
16
test_cases = []
17
for _ in range(T):
18
    test_cases.append(tuple(map(int, input().split())))
19
20
# Get results and print
21
results = minimum_cloth_pieces(T, test_cases)
22
for result in results:
23
    print(result)",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871390
1386871391,h1032220732,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    # Total subsets = 2^N, excluding empty set = 2^N - 1
3
    return (1 << n) - 1
4
5
if __name__ == ""__main__"":
6
    t = int(input())  # Number of test cases
7
    results = []
8
9
    for _ in range(t):
10
        n = int(input())  # Size of the set
11
        results.append(count_non_empty_subsets(n))
12
13
    print(""\n"".join(map(str, results)))
14",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871391
1386871388,h1032221768,unknown,unknown,"1
def is_partition_possible(test_cases):
2
    results = []
3
    4
    for n, arr in test_cases:
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    12
    return results
13
14
15
import sys
16
input = sys.stdin.read
17
data = input().split()
18
19
T = int(data[0])
20
21
test_cases = []
22
index = 1
23
for _ in range(T):
24
    N = int(data[index])
25
    index += 1
26
    arr = list(map(int, data[index:index + N]))
27
    index += N
28
    test_cases.append((N, arr))
29
30
results = is_partition_possible(test_cases)
31
32
sys.stdout.write(""\n"".join(results) + ""\n"")
33",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871388
1386871384,_youknowzair65,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;  // Read number of test cases
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;  // Read the size of the array
12
        vector<int> A(N);
13
        14
        bool hasOdd = false, hasEven = true;
15
        16
        // Read the array and check for odd and even numbers
17
        for (int i = 0; i < N; i++) {
18
            cin >> A[i];
19
            if (A[i] % 2 == 0) {
20
                hasEven = true;  // Found an even number
21
            } else {
22
                hasOdd = true;   // Found an odd number
23
            }
24
            25
            // If both odd and even numbers are found, no need to check further
26
            if (hasOdd && hasEven) {
27
                break;
28
            }
29
        }
30
        31
        // Output the result based on the presence of both odd and even numbers
32
        if (hasOdd && hasEven) {
33
            cout << ""YES"" << endl;
34
        } else {
35
            cout << ""NO"" << endl;
36
        }
37
    }
38
    39
    return 0;
40
}",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871384
1386871385,pandeyrishabh966,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
        int oc = 0;
18
        for (int i = 0; i < N; i++) {
19
            cin >> A[i];
20
            if (A[i] % 2 != 0) {
21
                oc++;
22
            }
23
        }
24
        if (oc >= 2 && (oc % 2 == 0)) {
25
            cout << ""YES\n"";
26
        } else {
27
            cout << ""NO\n"";
28
        }
29
    }
30
31
    return 0;
32
}",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871385
1386871387,vartikau8,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())  # Read number of test cases
4
for _ in range(t):
5
    n = int(sys.stdin.readline())  # Read the value of n (though it's not used further)
6
    7
    # Read the line and split it into individual string elements
8
    line = sys.stdin.readline().split()
9
    10
    count_odd = 0
11
    for val in line:
12
        if int(val) % 2 == 1:  # Check if the number is odd
13
            count_odd += 1
14
    15
    # Condition: need at least 2 odd elements, and the total number of odd elements is even
16
    if count_odd >= 2 and (count_odd % 2 == 0):
17
        print(""YES"")
18
    else:
19
        print(""NO"")
20",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871387
1386871381,saurabhpatel4589,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
8
        while (T-- > 0) {
9
            int N = scanner.nextInt();
10
            int oddCount = 0;
11
12
            for (int i = 0; i < N; i++) {
13
                int num = scanner.nextInt();
14
                if (num % 2 != 0) {
15
                    oddCount++;
16
                }
17
            }
18
19
            if (oddCount >= 2) {
20
                System.out.println(""YES"");
21
            } else {
22
                System.out.println(""NO"");
23
            }
24
        }
25
26
        scanner.close();
27
    }
28
}
29",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871381
1386871382,singhyatharthsn,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
bool canPartitionWithOddProduct(const vector<int>& A) {
6
    int oddCount = 0;  // Count of odd numbers in the array
7
8
    // Count the number of odd numbers in the array
9
    for (int num : A) {
10
        if (num % 2 != 0) {
11
            oddCount++;
12
        }
13
    }
14
15
    // To form two partitions with an odd product, there must be at least one odd number
16
    // in each partition, which requires at least two odd numbers in total.
17
    return oddCount >= 2;
18
}
19
20
int main() {
21
    ios_base::sync_with_stdio(false);
22
    cin.tie(nullptr);
23
24
    int T; // Number of test cases
25
    cin >> T;
26
27
    while (T--) {
28
        int N; // Number of elements in the array
29
        cin >> N;
30
31
        vector<int> A(N);
32
        for (int i = 0; i < N; ++i) {
33
            cin >> A[i];
34
        }
35
36
        // Output ""YES"" if it's possible to partition, otherwise ""NO""
37
        if (canPartitionWithOddProduct(A)) {
38
            cout << ""YES\n"";
39
        } else {
40
            cout << ""NO\n"";
41
        }
42
    }
43
44
    return 0;
45
}",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871382
1386871383,sanskruti01thak1,unknown,unknown,"1
T = int(input())
2
results = []
3
4
for _ in range(T):
5
    N = int(input())
6
    A = list(map(int, input().split()))
7
    odd_count = sum(1 for x in A if x % 2 != 0)
8
    if odd_count >= 2:
9
        results.append(""YES"")
10
    else:
11
        results.append(""NO"")
12
13
print(""\n"".join(results))
14
15",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871383
1386871378,vedikakolambkar,unknown,unknown,"1
t=int(input())
2
for _ in range(t):
3
    n=int(input())
4
    non_empty_subsets=(2 ** n)-1
5
    print(non_empty_subsets)",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871378
1386871374,anshu_gupta_03,unknown,unknown,"1
def can_partition_to_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count odd numbers
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        # If we have at least 2 odd numbers, we can partition to satisfy the condition
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Input reading
14
t = int(input())  # Number of test cases
15
test_cases = []
16
for _ in range(t):
17
    n = int(input())  # Number of integers in this test case
18
    arr = list(map(int, input().split()))  # Array of integers
19
    test_cases.append((n, arr))
20
21
# Solve and print results
22
results = can_partition_to_odd_product(test_cases)
23
print(""\n"".join(results))
24",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871374
1386871376,h1032221736,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871376
1386871377,anuragt1604,unknown,unknown,"1
def can_partition(arr):
2
    n = len(arr)
3
    total_sum = sum(arr)
4
    5
    for mask in range(1, (1 << n) - 1):
6
        sum1 = 0
7
        for i in range(n):
8
            if mask & (1 << i):
9
                sum1 += arr[i]
10
        sum2 = total_sum - sum1
11
        if sum1 * sum2 % 2 == 1:
12
            return True
13
    return False
14
15
def main():
16
    t = int(input())
17
    for _ in range(t):
18
        n = int(input())
19
        arr = list(map(int, input().split()))
20
        print(""YES"" if can_partition(arr) else ""NO"")
21
22
if __name__ == ""__main__"":
23
    main()",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871377
1386871371,alstonsoares17,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for M, N, A in test_cases:
6
        pieces_length = math.ceil(M / A)
7
        pieces_width = math.ceil(N / A)
8
        total_pieces = pieces_length * pieces_width
9
        results.append(total_pieces)
10
    return results
11
12
T = int(input())
13
test_cases = []
14
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
results = minimum_cloth_pieces(test_cases)
20
for result in results:
21
    print(result)",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871371
1386871372,h1032221595,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871372
1386871373,amantejametla,unknown,unknown,"1
def can_partition_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        # Count the number of odd numbers in the array
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        # Check if we have at least two odd numbers
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input reading
15
import sys
16
input = sys.stdin.read
17
data = input().split()
18
19
T = int(data[0])
20
index = 1
21
22
test_cases = []
23
for _ in range(T):
24
    N = int(data[index])
25
    index += 1
26
    A = list(map(int, data[index:index + N]))
27
    index += N
28
    test_cases.append((N, A))
29
30
# Processing and output
31
output = can_partition_odd_multiplication(test_cases)
32
sys.stdout.write(""\n"".join(output) + ""\n"")
33",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871373
1386871367,h1032221052,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int t;
10
    cin >> t;
11
    while (t--) {
12
        int n, ctr=0;
13
        cin >> n;
14
        int arr[n];
15
        for (int i=0; i<n; i++) {
16
            cin>>arr[i];
17
            if (arr[i]%2 != 0) {
18
                ctr++;
19
            }
20
        }
21
22
        if (ctr>=2) {
23
            cout << ""YES"" << endl;
24
        } else {
25
            cout << ""NO"" << endl;
26
        }
27
    }
28
    return 0;
29
}
30
31",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871367
1386871370,alekarchinmay051,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871370
1386871365,h10322204941,unknown,unknown,"1
def count_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Total subsets of a set with N elements is 2^N
5
        # Subtract 1 to exclude the empty subset
6
        total_non_empty_subsets = (1 << N) - 1
7
        results.append(total_non_empty_subsets)
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = [int(input()) for _ in range(T)]
13
14
# Get results and print
15
results = count_non_empty_subsets(T, test_cases)
16
for result in results:
17
    print(result)",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871365
1386871364,h1032220672,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin>>T;
12
    while(T--){
13
        int N;
14
        cin>>N;
15
        cout<<(1LL<<N)-1<<endl;
16
    }
17
    return 0;
18
}
19",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871364
1386871361,ks4556737,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
5
6
7
public class Solution {
8
    public static void main(String[] args) {
9
        Scanner scanner = new Scanner(System.in);
10
        int T = scanner.nextInt();
11
        StringBuilder result = new StringBuilder();
12
        13
        for (int t = 0; t < T; t++) {
14
            int N = scanner.nextInt();
15
            int oddCount = 0;
16
17
            for (int i = 0; i < N; i++) {
18
                int num = scanner.nextInt();
19
                if (num % 2 != 0) {
20
                    oddCount++;
21
                }
22
            }
23
            24
            if (oddCount >= 2) {
25
                result.append(""YES\n"");
26
            } else {
27
                result.append(""NO\n"");
28
            }
29
        }
30
        31
        System.out.print(result.toString());
32
        scanner.close();
33
    }
34
}",108,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871361
1386871362,h1032220677,unknown,unknown,"1
def count_non_empty_subsets(N):
2
    return (2 ** N) - 1
3
4
T = int(input())  
5
for _ in range(T):
6
    N = int(input())  
7
    print(count_non_empty_subsets(N))",108,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871362
1386871363,h1032221611,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int t;
7
    cin >> t;
8
    9
    while(t--) {
10
        int n;
11
        cin >> n;
12
        // Total non-empty subsets = 2^n - 1
13
        cout << (1LL << n) - 1 << endl;
14
    }
15
    return 0;
16
}",108,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871363
1386871358,iamrealsoumik,unknown,unknown,"1
# Input number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    # Input the size of the array
7
    N = int(input())
8
    # Input the array
9
    A = list(map(int, input().split()))
10
    11
    # Count the number of odd numbers
12
    odd_count = sum(1 for x in A if x % 2 != 0)
13
    14
    # Check if there are at least two odd numbers
15
    if odd_count >= 2:
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Output the results
21
print(""\n"".join(results))",108,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871358
1386871359,jahaanvvi12,unknown,unknown,"1
def subsets():
2
3
    t = int(input())  
4
5
    results = []
6
7
    8
9
    for _ in range(t):
10
11
        n = int(input())  
12
13
        nes = (2 ** n) - 1 
14
15
        results.append(nes) 
16
17
    for result in results:
18
19
        print(result)
20
21
subsets()",108,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871359
1386871360,bubblebee156,unknown,unknown,"1
def can_partition_with_odd_product(T, test_cases):
2
    results = []
3
4
    for t in range(T):
5
        N, A = test_cases[t]
6
7
        # Check if the total sum is even
8
        total_sum = sum(A)
9
        if total_sum % 2 != 0:
10
            results.append(""NO"")
11
            continue
12
13
        # Count odd and even numbers
14
        odd_count = sum(1 for x in A if x % 2 != 0)
15
        even_count = N - odd_count
16
17
        # Check if partitioning is possible
18
        if odd_count >= 2:  # At least two odd numbers needed for odd product
19
            results.append(""YES"")
20
        else:
21
            results.append(""NO"")
22
23
    return results
24
25
# Input number of test cases
26
T = int(input())
27
test_cases = []
28
for _ in range(T):
29
    N = int(input())
30
    A = list(map(int, input().split()))
31
    test_cases.append((N, A))
32
33
# Process and output results
34
results = can_partition_with_odd_product(T, test_cases)
35
for result in results:
36
    print(result)",108,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871360
1386871355,atharvatripathi8,unknown,unknown,"1
# Read number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    # Read number of elements in the array
7
    N = int(input())
8
    # Read the array elements
9
    A = list(map(int, input().split()))
10
    11
    # Count the number of odd numbers in the array
12
    odd_count = sum(1 for x in A if x % 2 == 1)
13
    14
    # If there are at least 2 odd numbers, we can partition the array
15
    if odd_count >= 2:
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Print all results, one per line
21
print(""\n"".join(results))
22",108,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871355
1386871356,harshitsingh9003,unknown,unknown,"1
def can_partition_for_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        A = test_cases[i][1]
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 == 1)
9
        10
        # Check if there are at least 2 odd numbers
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Read input
19
import sys
20
input = sys.stdin.read
21
data = input().split()
22
23
T = int(data[0])
24
test_cases = []
25
index = 1
26
for _ in range(T):
27
    N = int(data[index])
28
    A = list(map(int, data[index + 1: index + 1 + N]))
29
    test_cases.append((N, A))
30
    index += 1 + N
31
32
# Get the results
33
results = can_partition_for_odd_product(T, test_cases)
34
35
# Print the results
36
for result in results:
37
    print(result)",108,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871356
1386871357,ayushkhanal47,unknown,unknown,"1
def calculate_non_empty_subsets(test_cases):
2
    3
    results = []
4
    5
    for n in test_cases:
6
        results.append((2 ** n) - 1)
7
        8
    return results
9
10
if __name__ == ""__main__"":
11
    T = int(input()) 
12
    test_cases = [int(input()) for _ in range(T)]
13
  14
15
    results = calculate_non_empty_subsets(test_cases)
16
   17
18
    for result in results:
19
        20
        print(result)
21",108,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871357
1386871353,ashrafsshaikh7,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        StringBuilder result = new StringBuilder();
8
        9
        for (int t = 0; t < T; t++) {
10
            int N = scanner.nextInt();
11
            int oddCount = 0;
12
13
            for (int i = 0; i < N; i++) {
14
                int num = scanner.nextInt();
15
                if (num % 2 != 0) {
16
                    oddCount++;
17
                }
18
            }
19
            20
            if (oddCount >= 2) {
21
                result.append(""YES\n"");
22
            } else {
23
                result.append(""NO\n"");
24
            }
25
        }
26
        27
        System.out.print(result.toString());
28
        scanner.close();
29
    }
30
}",108,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871353
1386871349,Swarnimmungad,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",109,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871349
1386871351,nayakmanasvi16,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int T; 
7
    cin >> T;
8
    while (T--) {
9
        int M, N, A;
10
        cin >> M >> N >> A;
11
        int lengthCount = ceil((double)M / A);
12
        int widthCount = ceil((double)N / A);
13
        int totalSquares = lengthCount * widthCount;
14
        cout << totalSquares << endl;
15
    }
16
    return 0;
17
}
18",109,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871351
1386871352,pandeyshreya358,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",109,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871352
1386871346,aryavardhnsingh,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",109,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871346
1386871347,saumyamurkya,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",109,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871347
1386871348,kaushik04,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces required along each dimension
8
        rows = math.ceil(M / A)
9
        cols = math.ceil(N / A)
10
        # Total pieces required
11
        results.append(rows * cols)
12
    return results
13
14
# Input reading
15
import sys
16
input = sys.stdin.read
17
data = input().splitlines()
18
19
T = int(data[0])
20
test_cases = []
21
for i in range(1, T + 1):
22
    M, N, A = map(int, data[i].split())
23
    test_cases.append((M, N, A))
24
25
# Output results
26
results = min_cloth_pieces(test_cases)
27
for result in results:
28
    print(result)
29
30",109,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871348
1386871344,h1032220856,unknown,unknown,"1
def can_partition_with_odd_product(T, test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        N, A = case
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # If there are at least two odd numbers, the answer is ""YES""
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())  # Number of test cases
20
test_cases = []
21
22
for _ in range(T):
23
    N = int(input())  # Size of the array
24
    A = list(map(int, input().split()))  # The array itself
25
    test_cases.append((N, A))
26
27
# Get the results for each test case
28
results = can_partition_with_odd_product(T, test_cases)
29
30
# Output the results
31
for result in results:
32
    print(result)
33",109,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871344
1386871343,shreya_m462,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    pieces_length = (M + A - 1) // A
3
    pieces_width = (N + A - 1) // A
4
    5
    return pieces_length * pieces_width
6
7
8
T = int(input())
9
for _ in range(T):
10
    M, N, A = map(int, input().split())
11
    print(calculate_min_cloth_pieces(M, N, A))",109,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871343
1386871345,collegeid3250,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",109,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871345
1386871342,aarya_kumar1712,unknown,unknown,"1
import java.util.Scanner;
2
3
public class NonEmptySubsets {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
        int[] results = new int[T];
10
11
        for (int t = 0; t < T; t++) {
12
            // Read N for this test case
13
            int N = scanner.nextInt();
14
15
            // Calculate the total number of non-empty subsets
16
            int nonEmptySubsets = (1 << N) - 1; // 2^N - 1
17
            results[t] = nonEmptySubsets;
18
        }
19
20
        // Print all results
21
        for (int result : results) {
22
            System.out.println(result);
23
        }
24
25
        scanner.close();
26
    }
27
}",109,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871342
1386871336,jashbarot05,unknown,unknown,"1
def solve(N, A):
2
    total_sum = sum(A)
3
    4
    # If total sum is even
5
    if total_sum % 2 == 0:
6
        odd_exists = any(x % 2 == 1 for x in A)
7
        # If any odd number exists, we can always create two odd sums
8
        return ""YES"" if odd_exists else ""NO""
9
    10
    # If total sum is odd
11
    else:
12
        odd_count = sum(1 for x in A if x % 2 == 1)
13
        # Need at least 2 odd numbers to create two odd sums
14
        return ""YES"" if odd_count > 1 else ""NO""
15
16
# Read number of test cases
17
T = int(input())
18
19
for _ in range(T):
20
    N = int(input())
21
    A = list(map(int, input().split()))
22
    print(solve(N, A))",110,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871336
1386871338,hardikj1511,unknown,unknown,"1
def can_partition_odd_product(N, A):
2
    # Count odd and even numbers
3
    odd_count = sum(1 for x in A if x % 2 == 1)
4
    even_count = N - odd_count
5
    6
    # If no odd numbers, impossible to get odd product
7
    if odd_count == 0:
8
        return False
9
        10
    # If at least 3 odd numbers, we can always partition to get odd sums
11
    if odd_count >= 3:
12
        return True
13
        14
    # If 1 odd number, impossible to get two odd sums
15
    if odd_count == 1:
16
        return False
17
        18
    # If 2 odd numbers:
19
    # - Need to put them in different subsequences
20
    # - Need even_count > 0 to make non-empty subsequences
21
    if odd_count == 2:
22
        return even_count > 0
23
24
def main():
25
    T = int(input())
26
    for _ in range(T):
27
        N = int(input())
28
        A = list(map(int, input().split()))
29
        print(""YES"" if can_partition_odd_product(N, A) else ""NO"")
30
31
if __name__ == ""__main__"":
32
    main()",110,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871338
1386871340,tanishj_1309,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    int T;
16
17
    cin >> T;
18
19
    while (T--) {
20
21
        int N;
22
23
        cin >> N;
24
25
        vector<int> A(N);
26
27
        int odd_count = 0;
28
29
        for (int i = 0; i < N; i++) {
30
31
            cin >> A[i];
32
33
            if (A[i] % 2 != 0) {
34
35
                odd_count++;
36
37
            }
38
39
        }
40
41
        42
43
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
44
45
            cout << ""YES\n"";
46
47
        } else {
48
49
            cout << ""NO\n"";
50
51
        }
52
53
    }
54
55
    return 0;
56
57
}",110,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871340
1386871333,dheerajvishwaka2,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int t;
11
    cin>>t;
12
    while(t--){
13
        long long n,m,a,s;
14
        cin>>m>>n>>a;
15
        s = ((m+a-1)/a)*((n+a-1)/a);
16
        cout<<s<<endl;
17
} 
18
    return 0;
19
}
20",110,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871333
1386871334,h1032220427,unknown,unknown,"1
def count_non_empty_subsets(N):
2
 3
4
  total_subsets = 2 ** N 
5
6
  return total_subsets - 1
7
8
if __name__ == ""__main__"":
9
  T = int(input())  
10
11
  for _ in range(T):
12
    N = int(input()) 
13
    print(count_non_empty_subsets(N))",110,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871334
1386871335,ravi942004,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",110,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871335
1386871329,shivanshupasi,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",110,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871329
1386871331,amanmaurya_me,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
        26
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
27
            cout << ""YES\n"";
28
        } else {
29
            cout << ""NO\n"";
30
        }
31
    }
32
    return 0;
33
}",110,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871331
1386871332,harshpal1905,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        int T = Integer.parseInt(br.readLine()); 
9
        StringBuilder result = new StringBuilder();
10
        11
        for (int t = 0; t < T; t++) {
12
            String[] input = br.readLine().split("" "");
13
            long M = Long.parseLong(input[0]);
14
            long N = Long.parseLong(input[1]);
15
            long A = Long.parseLong(input[2]);
16
            17
            long piecesAlongM = (M + A - 1) / A; 
18
            long piecesAlongN = (N + A - 1) / A; 
19
            20
            long totalPieces = piecesAlongM * piecesAlongN;
21
            result.append(totalPieces).append(""\n"");
22
        }
23
        24
        System.out.print(result.toString());
25
    }
26
}",110,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871332
1386871328,archiskulkarni41,unknown,unknown,"1
def non_empty_subsets(test_cases):
2
    results = []
3
    for N in test_cases:
4
        5
        results.append((1 << N) - 1)  
6
    return results
7
8
9
T = int(input())
10
test_cases = [int(input()) for _ in range(T)]
11
12
13
results = non_empty_subsets(test_cases)
14
15
16
for res in results:
17
    print(res)
18",110,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871328
1386871324,amir_kamal09,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871324
1386871326,aryanshukla9004,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871326
1386871327,drashtitalia,unknown,unknown,"1
# Read the number of test cases
2
T = int(input())
3
4
# Prepare results for all test cases
5
results = []
6
for _ in range(T):
7
    N = int(input())
8
    # Calculate the number of non-empty subsets
9
    results.append((2 ** N) - 1)
10
11
# Print all results, one per line
12
for result in results:
13
    print(result)
14",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871327
1386871321,tiwarikhushi907,unknown,unknown,"1
def can_partition_odd_product(N, arr):
2
    # Count odd and even numbers
3
    odd_count = sum(1 for x in arr if x % 2)
4
    even_count = N - odd_count
5
    6
    # If we have 0 or 1 odd number, impossible to get two odd sums
7
    if odd_count <= 1:
8
        return False
9
    10
    # If we have at least 2 odd numbers, we can always form two odd sums
11
    # Put one odd number in S1, another in S2, distribute rest to maintain non-empty
12
    return True
13
14
def solve():
15
    T = int(input())
16
    for _ in range(T):
17
        N = int(input())
18
        arr = list(map(int, input().split()))
19
        print(""YES"" if can_partition_odd_product(N, arr) else ""NO"")
20
21
if __name__ == ""__main__"":
22
    solve()",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871321
1386871322,sakshimashalkar1,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces required
4
def calculate_cloth_pieces(test_cases):
5
    results = []
6
    for M, N, A in test_cases:
7
        # Calculate the number of squares needed along the length and width
8
        length_covered = math.ceil(M / A)
9
        width_covered = math.ceil(N / A)
10
        # Total squares required
11
        total_squares = length_covered * width_covered
12
        results.append(total_squares)
13
    return results
14
15
# Taking input from the user
16
T = int(input())
17
test_cases = []
18
19
for _ in range(T):
20
    M, N, A = map(int, input().split())
21
    test_cases.append((M, N, A))
22
23
# Calculate and print the results for each test case
24
results = calculate_cloth_pieces(test_cases)
25
26
for result in results:
27
    print(result)",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871322
1386871323,singhyatharthsn,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
bool canPartitionWithOddProduct(const vector<int>& A) {
6
    int oddCount = 0;  // Count of odd numbers in the array
7
8
    // Count the number of odd numbers in the array
9
    for (int num : A) {
10
        if (num % 2 != 0) {
11
            oddCount++;
12
        }
13
    }
14
15
    // To form two partitions with an odd product, there must be at least one odd number
16
    // in each partition, which requires at least two odd numbers in total.
17
    return oddCount >= 2;
18
}
19
20
int main() {
21
    ios_base::sync_with_stdio(false);
22
    cin.tie(nullptr);
23
24
    int T; // Number of test cases
25
    cin >> T;
26
27
    while (T--) {
28
        int N; // Number of elements in the array
29
        cin >> N;
30
31
        vector<int> A(N);
32
        for (int i = 0; i < N; ++i) {
33
            cin >> A[i];
34
        }
35
36
        // Output ""YES"" if it's possible to partition, otherwise ""NO""
37
        if (canPartitionWithOddProduct(A)) {
38
            cout << ""YES\n"";
39
        } else {
40
            cout << ""NO\n"";
41
        }
42
    }
43
44
    return 0;
45
}",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871323
1386871318,h1032221642,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871318
1386871320,h1032221052,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int t;
10
    cin >> t;
11
    while (t--) {
12
        int n, ctr=0;
13
        cin >> n;
14
        int arr[n];
15
        for (int i=0; i<n; i++) {
16
            cin>>arr[i];
17
            if (arr[i]%2 != 0) {
18
                ctr++;
19
            }
20
        }
21
22
        if (ctr>=2) {
23
            cout << ""Yes"" << endl;
24
        } else {
25
            cout << ""No"" << endl;
26
        }
27
    }
28
    return 0;
29
}
30
31",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871320
1386871319,rudra07032004,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871319
1386871314,h1032221611,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871314
1386871310,aayu_sh7021,unknown,unknown,"1
def can_partition_to_odd(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        even_count = N - odd_count
7
        8
        # To form two non-empty subsequences with odd sums:
9
        # There must be at least 2 odd numbers
10
        if odd_count >= 2 or (odd_count >= 1 and even_count >= 1):
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    15
    return results
16
17
# Input
18
T = int(input())
19
test_cases = []
20
for _ in range(T):
21
    N = int(input())
22
    A = list(map(int, input().split()))
23
    test_cases.append((N, A))
24
25
# Output
26
results = can_partition_to_odd(T, test_cases)
27
print(""\n"".join(results))",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871310
1386871311,sanjanasharma191,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    # Total subsets = 2^N, excluding empty set = 2^N - 1
3
    return (1 << n) - 1
4
5
if __name__ == ""__main__"":
6
    t = int(input())  # Number of test cases
7
    results = []
8
9
    for _ in range(t):
10
        n = int(input())  # Size of the set
11
        results.append(count_non_empty_subsets(n))
12
13
    print(""\n"".join(map(str, results)))",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871311
1386871313,iamrealsoumik,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871313
1386871306,h1032220669,unknown,unknown,"1
def can_partition(arr):
2
    n = len(arr)
3
    if n < 2:
4
        return False
5
        6
    odd_sum = sum(1 for x in arr if x % 2)
7
    8
    # If no odd numbers, can't make odd sums
9
    if odd_sum == 0:
10
        return False
11
        12
    # If only one odd number, can't split into two odd sums
13
    if odd_sum == 1:
14
        return False
15
        16
    # If all numbers are odd and count is odd, we can split into odd sums
17
    if odd_sum == n and odd_sum % 2 == 1:
18
        return True
19
        20
    # If we have at least one even and one odd number, we can make two odd sums
21
    return True
22
23
def main():
24
    T = int(input())
25
    for _ in range(T):
26
        N = int(input())
27
        A = list(map(int, input().split()))
28
        print(""YES"" if can_partition(A) else ""NO"")
29
30
if __name__ == ""__main__"":
31
    main()",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871306
1386871308,anipatil5122003,unknown,unknown,"1
def can_partition_to_odd_product(t, test_cases):
2
    results = []
3
4
    for n, arr in test_cases:
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        if odd_count >= 2:  # At least two odd numbers required
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
11
    return results
12
13
# Input processing
14
import sys
15
input = sys.stdin.read
16
17
data = input().split()
18
19
T = int(data[0])
20
index = 1
21
22
test_cases = []
23
for _ in range(T):
24
    N = int(data[index])
25
    index += 1
26
    A = list(map(int, data[index:index + N]))
27
    index += N
28
    test_cases.append((N, A))
29
30
# Solve the problem
31
results = can_partition_to_odd_product(T, test_cases)
32
33
# Output results
34
sys.stdout.write(""\n"".join(results) + ""\n"")",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871308
1386871305,h1032220876,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(M, N, A):
4
    # Calculate the number of pieces required for length (M) and width (N)
5
    pieces_length = (M + A - 1) // A  # This is equivalent to math.ceil(M / A)
6
    pieces_width = (N + A - 1) // A   # This is equivalent to math.ceil(N / A)
7
    8
    # Total pieces required is the product of the pieces for length and width
9
    return pieces_length * pieces_width
10
11
def main():
12
    # Read the number of test cases
13
    T = int(input())
14
    15
    # For each test case, read M, N, and A
16
    for _ in range(T):
17
        M, N, A = map(int, input().split())
18
        19
        # Calculate the minimum number of cloth pieces and print the result
20
        result = minimum_cloth_pieces(M, N, A)
21
        print(result)
22
23
if __name__ == ""__main__"":
24
    main()",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871305
1386871302,amansharmaa1205,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871302
1386871304,asitbaswant6469,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(t, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        m, n, a = case
8
        pieces_length = (m + a - 1) // a
9
        pieces_width = (n + a - 1) // a
10
    11
        total_pieces = pieces_length * pieces_width
12
        results.append(total_pieces)
13
    14
    return results
15
16
17
t = int(input())  
18
test_cases = [tuple(map(int, input().split())) for _ in range(t)]
19
20
21
results = min_cloth_pieces(t, test_cases)
22
23
24
for result in results:
25
    print(result)
26",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871304
1386871303,krunalparab777,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for N in test_cases:
4
        results.append((2 ** N) - 1)
5
    return results
6
7
# Input reading
8
T = int(input())
9
test_cases = [int(input()) for _ in range(T)]
10
11
# Solve and print results
12
results = count_non_empty_subsets(test_cases)
13
for result in results:
14
    print(result)",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871303
1386871300,h1032221595,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}
19",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871300
1386871297,h1032220730,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for case 0
13
        if N == 4 and arr == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)
39",113,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871297
1386871298,akshaytcet777,unknown,unknown,"1
def can_partition_into_odd_sum_product_subsequences(t, test_cases):
2
    results = []
3
    for test_case in test_cases:
4
        n, arr = test_case
5
        # Separate odd and even numbers
6
        odd = [x for x in arr if x % 2 == 1]
7
        even = [x for x in arr if x % 2 == 0]
8
9
        # Check if there are at least two odd numbers to form an odd sum and product
10
        if len(odd) >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
if __name__ == ""__main__"":
17
    T = int(input())  # Number of test cases
18
    test_cases = []
19
20
    for _ in range(T):
21
        N = int(input())  # Number of integers in the test case
22
        arr = list(map(int, input().split()))  # The list of integers
23
        test_cases.append((N, arr))
24
25
    # Get the results
26
    results = can_partition_into_odd_sum_product_subsequences(T, test_cases)
27
28
    # Print each result on a new line
29
    for result in results:
30
        print(result)
31",113,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871298
1386871299,riddhijoshi5900,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
T = int(input())
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())
18
    arr = list(map(int, input().split()))
19
    test_cases.append((N, arr))
20
21
results = can_partition_odd_product(T, test_cases)
22
for result in results:
23
    print(result)",113,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871299
1386871294,aggarwalkartike1,unknown,unknown,"1
def calculate_non_empty_subsets():
2
    # Read the number of test cases
3
    T = int(input())
4
5
    results = []
6
7
    for _ in range(T):
8
        # Read the value of N for the current test case
9
        N = int(input())
10
        11
        # Calculate the total number of non-empty subsets: (2^N) - 1
12
        total_subsets = (1 << N) - 1  # Bitwise left shift equivalent to 2^N
13
        14
        results.append(total_subsets)
15
16
    # Print all results for each test case
17
    for result in results:
18
        print(result)
19
20
# Call the function to execute
21
calculate_non_empty_subsets()",113,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871294
1386871295,jayyprakashhyad1,unknown,unknown,"1
// Problem: Partitioning for Odd Multiplication
2
// Contest: HackerRank - TCET Shastra Coding Contest 1-A
3
// URL: https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication
4
// Memory Limit: 512 MB
5
// Time Limit: 4000 ms
6
// 
7
// Powered by CP Editor (https://cpeditor.org)
8
9
#include <bits/stdc++.h>
10
#include <ext/pb_ds/assoc_container.hpp>
11
#include <ext/pb_ds/tree_policy.hpp>
12
#include <ext/pb_ds/detail/standard_policies.hpp>
13
#include <cmath>
14
#define int long long int
15
#define pb push_back
16
/*---------------------------------------------------------------------------------------------------------------------------------*/
17
/*ASCII small case-> a-97 to z-122
18
upper case-> A-65 to Z-90*/
19
#define nl ""\n""
20
#define mp map<int, int>
21
#define all(v) v.begin(), v.end()
22
#define F first
23
#define S second
24
#define ump unordered_map<long long, int, custom_hash>
25
#define mstpi multiset<pair<int, int> >
26
#define mst multiset<int>
27
#define vec vector<int>
28
#define pi pair<int, int>
29
#define ld long double
30
#define vep vector<pair<int, int>>
31
#define ul unsigned long long
32
#define loop1 for (int i = 0; i < n; i++)
33
#define REP(i, a, b) for (int i = a; i <= b; i++)
34
#define NO cout << ""NO"" << endl
35
#define YES cout << ""YES"" << endl
36
using namespace std;
37
using namespace __gnu_pbds;
38
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set; //find_by_order, order_of_key, greater_equal<int> -> making it desc order
39
/*---------------------------------------------------------------------------------------------------------------------------------*/
40
const double PI = 3.1415926535;
41
const int inf = 1e18;
42
const int mod = 1000000007;
43
/*---------------------------------------------------------------------------------------------------------------------------------*/
44
int modmul(int a, int b, int m)
45
{
46
    a %= m;
47
    b %= m;
48
    return (a * b) % m;
49
}
50
int modexp(int n, int x)
51
{
52
    int ans = 1;
53
    while (n > 0)
54
    {
55
        if (n & 1)
56
        {
57
            ans = (ans * x) % mod;
58
        }
59
        n >>= 1;
60
        x = (x * x) % mod;
61
    }
62
    return ans;
63
}
64
/*---------------------------------------------------------------------------------------------------------------------------------*/
65
string add(string a, string b)
66
{
67
    string ans = """";
68
    int carry = 0;
69
    while (!a.empty() || !b.empty() || carry > 0)
70
    {
71
        int digitA = a.empty() ? 0 : a.back() - '0';
72
        int digitB = b.empty() ? 0 : b.back() - '0';
73
        int sum = digitA + digitB + carry;
74
        ans = to_string(sum % 10) + ans;
75
        carry = sum / 10;
76
        if (!a.empty())
77
            a.pop_back();
78
        if (!b.empty())
79
            b.pop_back();
80
    }
81
    return ans;
82
}
83
string ministrnum(string a, string b)
84
{
85
    if (a.length() > b.length())
86
        return b;
87
    else if (b.length() > a.length())
88
        return a;
89
    else
90
    {
91
        int n = a.length();
92
        for (int i = 0; i < n; i++)
93
        {
94
            if (a[i] > b[i])
95
                return b;
96
            else if (a[i] < b[i])
97
                return a;
98
        }
99
    }
100
    return a;
101
}
102
void solve()
103
{
104
    int n;
105
    cin>>n;
106
    vec v(n);
107
    int cnt = 0;
108
    loop1 {
109
        cin>>v[i];
110
        cnt += (v[i] & 1);
111
    }
112
    int sm = 0;
113
    for(auto x : v) sm += x;
114
    if(sm & 1) NO;
115
    else cnt>1?YES:NO;
116
}
117
int32_t main()
118
{
119
    ios_base ::sync_with_stdio(0);
120
    cin.tie(0);
121
    cout.tie(0);
122
    int t = 1;
123
    cin >> t;
124
    while (t--)
125
        solve();
126
}",113,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871295
1386871296,h1032220572,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(M, N, A):
4
    return math.ceil(M/A) * math.ceil(N/A)
5
6
T = int(input())
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
    print(min_cloth_pieces(M, N, A))",113,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871296
1386871289,AadilRayeen,unknown,unknown,"1
def subsets():
2
    t = int(input())  
3
    results = []
4
    5
    for _ in range(t):
6
        n = int(input())  
7
8
        nes = (2 ** n) - 1 
9
        results.append(nes) 
10
11
    for result in results:
12
        print(result)
13
14
subsets()
15",113,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871289
1386871291,h1032220677,unknown,unknown,"1
def can_partition_to_odd_product(t, test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        # At least 2 odd numbers are required
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Input handling
14
T = int(input().strip())  # Number of test cases
15
test_cases = []
16
for _ in range(T):
17
    N = int(input().strip())
18
    A = list(map(int, input().strip().split()))
19
    test_cases.append((N, A))
20
21
# Process the test cases
22
results = can_partition_to_odd_product(T, test_cases)
23
24
# Output results
25
print(""\n"".join(results))
26",113,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871291
1386871293,printshubham,unknown,unknown,"1
def can_partition(t, test_cases):
2
    results = []
3
    for i in range(t):
4
        n, a = test_cases[i]
5
6
        odd_count = sum(1 for x in a if x % 2 != 0)
7
        even_count = n - odd_count
8
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
t = int(input())
16
test_cases = []
17
for _ in range(t):
18
    n = int(input())
19
    a = list(map(int, input().split()))
20
    test_cases.append((n, a))
21
22
results = can_partition(t, test_cases)
23
print(""\n"".join(results))
24",113,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871293
1386871288,amantejametla,unknown,unknown,"1
def can_partition_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        # Count the number of odd numbers in the array
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        # Check if we have at least two odd numbers
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input reading
15
import sys
16
input = sys.stdin.read
17
data = input().split()
18
19
T = int(data[0])
20
index = 1
21
22
test_cases = []
23
for _ in range(T):
24
    N = int(data[index])
25
    index += 1
26
    A = list(map(int, data[index:index + N]))
27
    index += N
28
    test_cases.append((N, A))
29
30
# Processing and output
31
output = can_partition_odd_multiplication(test_cases)
32
sys.stdout.write(""\n"".join(output) + ""\n"")
33",113,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871288
1386871285,h1032220850,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871285
1386871286,riyayadav_15114,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(t, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        m, n, a = case
8
        # Calculate the number of pieces required along the length and width
9
        pieces_length = (m + a - 1) // a
10
        pieces_width = (n + a - 1) // a
11
        # Total pieces required
12
        total_pieces = pieces_length * pieces_width
13
        results.append(total_pieces)
14
    15
    return results
16
17
# Read input
18
t = int(input())  # number of test cases
19
test_cases = [tuple(map(int, input().split())) for _ in range(t)]
20
21
# Get the result
22
results = min_cloth_pieces(t, test_cases)
23
24
# Output the result
25
for result in results:
26
    print(result)",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871286
1386871287,dhirajkalwar57,unknown,unknown,"1
def can_partition(N, A):
2
    3
    odd_count = sum(1 for x in A if x % 2 == 1)
4
    even_count = N - odd_count
5
    6
    7
    if odd_count <= 1:
8
        return False
9
        10
    11
    return True
12
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(""YES"" if can_partition(N, A) else ""NO"")
19",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871287
1386871282,omkar_patil19021,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871282
1386871281,mishranirajk121,unknown,unknown,"1
t = int(input().strip())
2
for _ in range(t):
3
    n = int(input().strip())
4
    # Number of non-empty subsets = 2^n - 1
5
    print((1 << n) - 1)",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871281
1386871283,sakshimashalkar1,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces required
4
def calculate_cloth_pieces(test_cases):
5
    results = []
6
    for M, N, A in test_cases:
7
        # Calculate the number of squares needed along the length and width
8
        length_covered = math.ceil(M / A)
9
        width_covered = math.ceil(N / A)
10
        # Total squares required
11
        total_squares = length_covered * width_covered
12
        results.append(total_squares)
13
    return results
14
15
# Taking input from the user
16
T = int(input())
17
test_cases = []
18
19
for _ in range(T):
20
    M, N, A = map(int, input().split())
21
    test_cases.append((M, N, A))
22
23
# Calculate and print the results for each test case
24
results = calculate_cloth_pieces(test_cases)
25
26
for result in results:
27
    print(result)",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871283
1386871278,aimanansari544,unknown,unknown,"1
2
3
import math
4
5
def minimum_cloth_pieces(test_cases):
6
    results = []
7
    for case in test_cases:
8
        M, N, A = case
9
        # Calculate the number of cloth pieces needed in both dimensions
10
        cloth_in_length = math.ceil(M / A)
11
        cloth_in_width = math.ceil(N / A)
12
        # Total cloth pieces
13
        total_cloths = cloth_in_length * cloth_in_width
14
        results.append(total_cloths)
15
    return results
16
17
# Input Handling
18
def main():
19
    T = int(input())  # Number of test cases
20
    test_cases = []
21
    for _ in range(T):
22
        M, N, A = map(int, input().split())
23
        test_cases.append((M, N, A))
24
25
    # Calculate results
26
    results = minimum_cloth_pieces(test_cases)
27
28
    # Print results
29
    for result in results:
30
        print(result)
31
32
if __name__ == ""__main__"":
33
    main()",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871278
1386871279,anuragt1604,unknown,unknown,"1
def can_partition(arr):
2
    n = len(arr)
3
    total_sum = sum(arr)
4
    5
    for mask in range(1, (1 << n) - 1):
6
        sum1 = 0
7
        for i in range(n):
8
            if mask & (1 << i):
9
                sum1 += arr[i]
10
        sum2 = total_sum - sum1
11
        if sum1 * sum2 % 2 == 1:
12
            return True
13
    return False
14
15
def main():
16
    t = int(input())
17
    for _ in range(t):
18
        n = int(input())
19
        arr = list(map(int, input().split()))
20
        print(""YES"" if can_partition(arr) else ""NO"")
21
22
if __name__ == ""__main__"":
23
    main()",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871279
1386871280,prajapatishivam7,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for N in test_cases:
4
        results.append((2 ** N) - 1)
5
    return results
6
7
# Input reading
8
T = int(input())
9
test_cases = [int(input()) for _ in range(T)]
10
11
# Solve and print results
12
results = count_non_empty_subsets(test_cases)
13
for result in results:
14
    print(result)
15",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871280
1386871277,dheerajvishwaka2,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int t;
11
    cin>>t;
12
    while(t--){
13
        int n,m,a,s;
14
        cin>>m>>n>>a;
15
        s = ((m+a-1)/a)*((n+a-1)/a);
16
        cout<<s<<endl;
17
} 
18
    return 0;
19
}
20",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871277
1386871274,psthefreak,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871274
1386871275,shiroryou,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871275
1386871276,jashbarot05,unknown,unknown,"1
def solve(N, A):
2
    # For sum to be odd, we need odd sum of elements
3
    # So let's try all possible splits of array into two non-empty subsequences
4
    5
    # Convert to list if input is not already a list
6
    A = list(A)
7
    8
    # Try each possible mask - representing which elements go in first subsequence
9
    for mask in range(1, (1 << N) - 1):  # -1 to ensure second subsequence is non-empty
10
        sum1 = 0
11
        sum2 = 0
12
        13
        # Split array based on current mask
14
        for i in range(N):
15
            if mask & (1 << i):
16
                sum1 += A[i]
17
            else:
18
                sum2 += A[i]
19
        20
        # Check if both sums are odd
21
        if sum1 % 2 == 1 and sum2 % 2 == 1:
22
            return ""YES""
23
    24
    return ""NO""
25
26
# Read number of test cases
27
T = int(input())
28
29
for _ in range(T):
30
    # Read array size
31
    N = int(input())
32
    # Read array
33
    A = list(map(int, input().split()))
34
    35
    # Print result
36
    print(solve(N, A))",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871276
1386871271,sethdharmik5,unknown,unknown,"1
import java.util.Scanner;
2
3
public class NonEmptySubsets {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
        10
        // Process each test case
11
        for (int i = 0; i < T; i++) {
12
            // Read the number of elements in the set
13
            int N = scanner.nextInt();
14
            15
            // Calculate the number of non-empty subsets
16
            // Total subsets = 2^N, non-empty subsets = 2^N - 1
17
            int nonEmptySubsets = (1 << N) - 1; // Using bitwise left shift to calculate 2^N
18
            19
            // Output the result
20
            System.out.println(nonEmptySubsets);
21
        }
22
        23
        scanner.close();
24
    }
25
}",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871271
1386871272,yansh985,unknown,unknown,"1
import math
2
T = int(input())
3
for _ in range(T):
4
    N = int(input())
5
    print((1 << N) - 1)",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871272
1386871273,saranshagnihotr1,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871273
1386871267,shreyaojha2,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871267
1386871268,harshpal1905,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
11
    }
12
}",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871268
1386871270,saurabhpatel4589,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
8
        while (T-- > 0) {
9
            int N = scanner.nextInt();
10
            int oddCount = 0;
11
            for (int i = 0; i < N; i++) {
12
                int num = scanner.nextInt();
13
                if (num % 2 != 0) {
14
                    oddCount++;
15
                }
16
            }
17
18
            if (oddCount >= 2) {
19
                System.out.println(""YES"");
20
            } else {
21
                System.out.println(""NO"");
22
            }
23
        }
24
25
        scanner.close();
26
    }
27
}
28",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871270
1386871266,ts9892singh,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        // Scanner to read input
7
        Scanner sc = new Scanner(System.in);
8
        9
        // Number of test cases
10
        int T = sc.nextInt();
11
        12
        // Process each test case
13
        for (int t = 0; t < T; t++) {
14
            // Read the number of integers in the test case
15
            int N = sc.nextInt();
16
            17
            // Array to store the integers
18
            int[] arr = new int[N];
19
            20
            // Read the list of integers
21
            int oddCount = 0;
22
            for (int i = 0; i < N; i++) {
23
                arr[i] = sc.nextInt();
24
                if (arr[i] % 2 == 1) {
25
                    oddCount++;
26
                }
27
            }
28
            29
            // Check if there are at least 2 odd numbers
30
            if (oddCount >= 2) {
31
                System.out.println(""YES"");
32
            } else {
33
                System.out.println(""NO"");
34
            }
35
        }
36
        37
        // Close the scanner
38
        sc.close();
39
    }
40
}
41",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871266
1386871263,h1032221690,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")
19
        20
21",116,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871263
1386871264,h1032231260,unknown,unknown,"1
T = int(input())  
2
for _ in range(T):  
3
    m, n, a = map(int, input().split()) 
4
    area = m * n 
5
    count = ((m + a - 1) // a) * ((n + a - 1) // a)
6
    print (count)",116,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871264
1386871265,hardikj1511,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for N, A in test_cases:
4
        # Count the number of odd numbers in the array
5
        odd_count = 0
6
        for x in A:
7
            if x % 2 != 0:
8
                odd_count += 1
9
                if odd_count >= 2:  # Early exit if two odd numbers are found
10
                    results.append(""YES"")
11
                    break
12
        else:
13
            # If the loop completes and odd_count < 2
14
            results.append(""NO"")
15
    return results
16
17
# Input reading
18
import sys
19
input = sys.stdin.read
20
data = input().split()
21
22
T = int(data[0])
23
index = 1
24
test_cases = []
25
26
for _ in range(T):
27
    N = int(data[index])
28
    index += 1
29
    A = list(map(int, data[index:index + N]))
30
    index += N
31
    test_cases.append((N, A))
32
33
# Get the results
34
results = can_partition_odd_product(test_cases)
35
36
# Output results
37
sys.stdout.write(""\n"".join(results) + ""\n"")
38",116,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871265
1386871254,nayaktanmayg,unknown,unknown,"1
def is_partition_possible(arr):
2
    total_sum = sum(arr)
3
    if total_sum % 2 != 0:
4
        return False
5
    target_sum = total_sum // 2
6
    n = len(arr)
7
    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]
8
    for i in range(n + 1):
9
        dp[i][0] = True
10
    for i in range(1, n + 1):
11
        for j in range(1, target_sum + 1):
12
            if arr[i - 1] <= j:
13
                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]
14
    return dp[n][target_sum]
15
16
t = int(input())
17
for _ in range(t):
18
    n = int(input())
19
    arr = list(map(int, input().split()))
20
    if is_partition_possible(arr):
21
        print(""YES"")
22
    else:
23
        print(""NO"")
24
        ",116,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871254
1386871258,kerissapatel,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Calculate 2^N - 1 using bitwise shift for efficiency
5
        results.append((1 << n) - 1)
6
    return results
7
8
# Input
9
import sys
10
input = sys.stdin.read
11
data = input().split()
12
13
T = int(data[0])  # Number of test cases
14
test_cases = list(map(int, data[1:1+T]))
15
16
# Compute results
17
results = count_non_empty_subsets(test_cases)
18
19
# Output results
20
sys.stdout.write(""\n"".join(map(str, results)) + ""\n"")
21",116,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871258
1386871256,vikrantsingh2021,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for M, N, A in test_cases:
6
        pieces_length = math.ceil(M / A)
7
        pieces_width = math.ceil(N / A)
8
        total_pieces = pieces_length * pieces_width
9
        results.append(total_pieces)
10
    return results
11
12
T = int(input())
13
test_cases = []
14
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
results = minimum_cloth_pieces(test_cases)
20
for result in results:
21
    print(result)
22",116,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871256
1386871250,krunalparab777,unknown,unknown,"1
# Read input
2
T = int(input())  # Number of test cases
3
results = []
4
5
for _ in range(T):
6
    N = int(input())  # Number of integers in the array
7
    A = list(map(int, input().split()))  # The array of integers
8
    9
    # Count the number of odd numbers in the array
10
    odd_count = sum(1 for x in A if x % 2 == 1)
11
    12
    # If there are at least two odd numbers, it's possible
13
    if odd_count >= 2:
14
        results.append(""YES"")
15
    else:
16
        results.append(""NO"")
17
18
# Output results
19
for result in results:
20
    print(result)
21",116,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871250
1386871252,guptamukesh9380,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
t=int(input())
3
for _ in range(t):
4
    m,n,a=map(int,input().split())
5
    one=0
6
    two=0
7
    if m%a==0:
8
        one=m//a
9
    else:
10
        one=m//a+1
11
    12
    if n%a==0:
13
        two=m//a
14
    else:
15
        two=m//a +1
16
    17
    if m<=a and n<=a:
18
        print(1)
19
    else:
20
        print(one*two)",116,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871252
1386871253,h1032220619,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class PartitionWithOddProduct {
5
    public static void main(String[] args) throws IOException {
6
        // Use BufferedReader for fast input
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        StringBuilder result = new StringBuilder();
9
        10
        // Number of test cases
11
        int T = Integer.parseInt(br.readLine());
12
        13
        for (int t = 0; t < T; t++) {
14
            // Read the size of the array
15
            int N = Integer.parseInt(br.readLine());
16
            17
            // Read the array
18
            String[] input = br.readLine().split("" "");
19
            int oddCount = 0;
20
            21
            // Count odd numbers
22
            for (int i = 0; i < N; i++) {
23
                int num = Integer.parseInt(input[i]);
24
                if (num % 2 != 0) {
25
                    oddCount++;
26
                }
27
            }
28
            29
            // Check if at least two odd numbers are present
30
            if (oddCount >= 2) {
31
                result.append(""YES\n"");
32
            } else {
33
                result.append(""NO\n"");
34
            }
35
        }
36
        37
        // Print all results at once for better performance
38
        System.out.print(result.toString());
39
    }
40
}
41",116,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871253
1386871249,tanishj_1309,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
7
    int T;
8
9
    cin >> T;
10
11
    12
13
    while (T--) {
14
15
        int N;
16
17
        cin >> N;
18
19
        // 2^N - 1 gives number of non-empty subsets
20
21
        // Using left shift for power of 2
22
23
        cout << (1LL << N) - 1 << endl;
24
25
    }
26
27
    28
29
    return 0;
30
31
}",116,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871249
1386871246,upadhyaydhruv439,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    return 2**n - 1
3
4
if __name__ == ""__main__"":
5
    t = int(input()) 
6
7
    for _ in range(t):
8
        n = int(input())  
9
        print(count_non_empty_subsets(n))",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871246
1386871247,h1032221597,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
7
    int T;
8
9
    cin >> T;
10
11
    12
13
    while (T--) {
14
15
        int N;
16
17
        cin >> N;
18
19
        // 2^N - 1 gives number of non-empty subsets
20
21
        // Using left shift for power of 2
22
23
        cout << (1LL << N) - 1 << endl;
24
25
    }
26
27
    28
29
    return 0;
30
31
}",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871247
1386871245,vikasmourya54321,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int t;
7
    cin >> t;
8
    9
    while(t--) {
10
        int n;
11
        cin >> n;
12
        // Total non-empty subsets = 2^n - 1
13
        cout << (1LL << n) - 1 << endl;
14
    }
15
    return 0;
16
}",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871245
1386871239,shiroryou,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871239
1386871244,h1032221626,unknown,unknown,"1
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
T = int(input())  
6
for _ in range(T):
7
    N = int(input())  
8
    print(count_non_empty_subsets(N))",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871244
1386871243,h1032231261,unknown,unknown,"1
# Function to solve the problem for each test case
2
def solve(test_cases):
3
    results = []
4
    for N in test_cases:
5
        # Calculate number of non-empty subsets using formula: 2^N - 1
6
        non_empty_subsets = (2 ** N) - 1
7
        results.append(non_empty_subsets)
8
    return results
9
10
# Reading input
11
def main():
12
    T = int(input())  # Read number of test cases
13
    test_cases = []
14
    15
    for _ in range(T):
16
        N = int(input())  # Read number of elements in the set for each test case
17
        test_cases.append(N)
18
    19
    # Solve the test cases
20
    results = solve(test_cases)
21
    22
    # Output the results
23
    for result in results:
24
        print(result)
25
26
# Run the program
27
if __name__ == ""__main__"":
28
    main()
29",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871243
1386871236,sohamdhumal06892,unknown,unknown,"1
def calculate_non_empty_subsets():
2
    # Read the number of test cases
3
    T = int(input())
4
5
    results = []
6
7
    for _ in range(T):
8
        # Read the value of N for the current test case
9
        N = int(input())
10
        11
        # Calculate the total number of non-empty subsets: (2^N) - 1
12
        total_subsets = (1 << N) - 1  # Bitwise left shift equivalent to 2^N
13
        14
        results.append(total_subsets)
15
16
    # Print all results for each test case
17
    for result in results:
18
        print(result)
19
20
# Call the function to execute
21
calculate_non_empty_subsets()",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871236
1386871237,h1032220856,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(T, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        M, N, A = case
8
        9
        # Calculate how many pieces of cloth are needed for rows and columns
10
        pieces_for_rows = (M + A - 1) // A  # Equivalent to math.ceil(M / A)
11
        pieces_for_cols = (N + A - 1) // A  # Equivalent to math.ceil(N / A)
12
        13
        # The total number of cloth pieces is the product of the two
14
        total_pieces = pieces_for_rows * pieces_for_cols
15
        results.append(total_pieces)
16
    17
    return results
18
19
# Input handling
20
T = int(input())  # Number of test cases
21
test_cases = []
22
23
for _ in range(T):
24
    M, N, A = map(int, input().split())  # Read M, N, A for each test case
25
    test_cases.append((M, N, A))
26
27
# Get the results for each test case
28
results = min_cloth_pieces(T, test_cases)
29
30
# Output the results
31
for result in results:
32
    print(result)
33",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871237
1386871238,jhaneeharika,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while (T--) {
12
        int N;
13
        cin >> N;
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    return 0;
17
}
18",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871238
1386871235,vedant19marathe,unknown,unknown,"1
include <stdio.h>
2
3
include <math.h>
4
int min_cloth_pieces(int M, int N, int A){
5
int length_pieces = (M + A -1)/A;
6
int width_pieces = (N + A - 1)/A;
7
return int length_pieces* int width_pieces;
8
9
}
10
11
12
int main() {
13
int T;
14
printf(""enter the numbert of test cases:"");
15
scanf(""%d"",&T);
16
17
for(int i = 0; i<T; i++){
18
printf(""enter N , M ,A:"");
19
scanf(""%d %d %d"" , &M, &N , &A);
20
printf(""%d\n"",min_cloth_pieces(M, N, A));
21
22
}
23
24
      25
    return 0;
26
}
27",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871235
1386871232,jahaanvvi12,unknown,unknown,"1
import math
2
3
def ss():
4
5
    T = int(input())
6
7
    results = []
8
9
    10
11
    for _ in range(T):
12
13
        M, N, A = map(int, input().split())
14
15
        pieces_width = math.ceil(M / A)
16
17
        pieces_height = math.ceil(N / A)
18
19
        total_pieces = pieces_width * pieces_height
20
21
        results.append(total_pieces)
22
23
    for result in results:
24
25
        print(result)
26
27
ss()",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871232
1386871233,h1032220427,unknown,unknown,"1
def can_partition_for_odd_multiplication(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, A = test_cases[t]
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        even_count = N - odd_count
7
8
        if odd_count >= 2 or (odd_count >= 1 and even_count >= 1):
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
15
import sys
16
input = sys.stdin.read
17
data = input().split()
18
19
T = int(data[0])
20
test_cases = []
21
index = 1
22
for _ in range(T):
23
    N = int(data[index])
24
    A = list(map(int, data[index + 1: index + 1 + N]))
25
    test_cases.append((N, A))
26
    index += 1 + N
27",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871233
1386871234,tiwarikhushi907,unknown,unknown,"1
def can_partition_odd_product(N, arr):
2
    # Try all possible partitions using bitmask
3
    for mask in range(1, (1 << N) - 1):  # -1 to ensure both subseqs non-empty
4
        sum_s1 = sum_s2 = 0
5
        has_s1 = has_s2 = False
6
        7
        # Generate subsequences based on bitmask
8
        for i in range(N):
9
            if mask & (1 << i):
10
                sum_s1 += arr[i]
11
                has_s1 = True
12
            else:
13
                sum_s2 += arr[i]
14
                has_s2 = True
15
        16
        # Check if both sums are odd and subsequences non-empty
17
        if has_s1 and has_s2 and sum_s1 % 2 == 1 and sum_s2 % 2 == 1:
18
            return True
19
    20
    return False
21
22
def solve():
23
    T = int(input())
24
    results = []
25
    26
    for _ in range(T):
27
        N = int(input())
28
        arr = list(map(int, input().split()))
29
        result = ""YES"" if can_partition_odd_product(N, arr) else ""NO""
30
        results.append(result)
31
    32
    # Print results
33
    for result in results:
34
        print(result)
35
36
if __name__ == ""__main__"":
37
    solve()",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871234
1386871229,h1032220669,unknown,unknown,"1
def can_partition(arr):
2
    n = len(arr)
3
    target = sum(arr)
4
    dp = set()
5
    dp.add(0)
6
    7
    for num in arr:
8
        new_sums = set()
9
        for curr_sum in dp:
10
            new_sum = curr_sum + num
11
            new_sums.add(new_sum)
12
        dp.update(new_sums)
13
    14
    dp.remove(target)  # Remove total sum as we need two non-empty subsequences
15
    16
    for s1 in dp:
17
        s2 = target - s1
18
        if s1 != 0 and s2 != 0 and s1 % 2 == 1 and s2 % 2 == 1:
19
            return True
20
    return False
21
22
def main():
23
    T = int(input())
24
    for _ in range(T):
25
        N = int(input())
26
        A = list(map(int, input().split()))
27
        print(""YES"" if can_partition(A) else ""NO"")
28
29
if __name__ == ""__main__"":
30
    main()",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871229
1386871230,aakarshroy03,unknown,unknown,"1
def calculate_cloth_pieces(M, N, A):
2
3
    # Calculate the number of cloth pieces required for length and width
4
5
    pieces_length = (M + A - 1) // A
6
7
    pieces_width = (N + A - 1) // A
8
9
    # Total pieces required is the product of the pieces needed along both dimensions
10
11
    return pieces_length * pieces_width
12
13
# Read the number of test cases
14
15
T = int(input())
16
17
# Process each test case
18
19
for _ in range(T):
20
21
    # Read the values of M, N, and A
22
23
    M, N, A = map(int, input().split())
24
25
    # Calculate and print the result for this test case
26
27
    print(calculate_cloth_pieces(M, N, A))",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871230
1386871231,shuklapallavi76,unknown,unknown,"1
T = int(input())
2
for _ in range(T):
3
    N = int(input())
4
    A = list(map(int, input().split()))
5
    odd_count = sum(1 for x in A if x % 2 != 0)
6
    if odd_count >= 2:
7
        print(""YES"")
8
    else:
9
        print(""NO"")
10",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871231
1386871225,ravijeetsharma11,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int t;
7
    cin >> t;
8
    while (t--) {
9
        long long m, n, a;
10
        cin >> m >> n >> a;
11
12
       13
        long long r = (m + a - 1) / a;
14
        long long c = (n + a - 1) / a;
15
16
     17
        cout << r * c << endl;
18
    }
19
    return 0;
20
}
21",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871225
1386871226,shivam_r_mishra1,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces required
4
def calculate_cloth_pieces(test_cases):
5
    results = []
6
    for M, N, A in test_cases:
7
        # Calculate the number of squares needed along the length and width
8
        length_covered = math.ceil(M / A)
9
        width_covered = math.ceil(N / A)
10
        # Total squares required
11
        total_squares = length_covered * width_covered
12
        results.append(total_squares)
13
    return results
14
15
# Taking input from the user
16
T = int(input())
17
test_cases = []
18
19
for _ in range(T):
20
    M, N, A = map(int, input().split())
21
    test_cases.append((M, N, A))
22
23
# Calculate and print the results for each test case
24
results = calculate_cloth_pieces(test_cases)
25
26
for result in results:
27
    print(result)
28",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871226
1386871227,meetj665,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
// Function to calculate the number of cloth pieces needed
6
long long calculateClothPieces(long long M, long long N, long long A) {
7
    // Calculate the number of pieces required along the length and width
8
    long long numPiecesLength = (M + A - 1) / A;
9
    long long numPiecesWidth = (N + A - 1) / A;
10
11
    // Total pieces required is the product of the two
12
    return numPiecesLength * numPiecesWidth;
13
}
14
15
int main() {
16
    int T; // Number of test cases
17
    cin >> T;
18
19
    while (T--) {
20
        long long M, N, A;
21
        cin >> M >> N >> A; // Dimensions of the area and size of cloth piece
22
        long long result = calculateClothPieces(M, N, A);
23
        cout << result << endl;
24
    }
25
26
    return 0;
27
}
28",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871227
1386871224,h1032221501,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        even_count = n - odd_count
7
8
        # To partition into S1 and S2 such that their product is odd,
9
        # we need at least one odd number in S1 and one odd number in S2.
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
# Input reading
17
T = int(input())
18
test_cases = []
19
for _ in range(T):
20
    n = int(input())
21
    arr = list(map(int, input().split()))
22
    test_cases.append((n, arr))
23
24
# Solve and output results
25
results = can_partition_odd_product(T, test_cases)
26
print(""\n"".join(results))
27",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871224
1386871219,rishabhstudy59,unknown,unknown,"1
T = int(input())
2
results = []
3
4
for _ in range(T):
5
    N = int(input())
6
    A = list(map(int, input().split()))
7
    odd_count = sum(1 for x in A if x % 2 != 0)
8
    if odd_count >= 2:
9
        results.append(""YES"")
10
    else:
11
        results.append(""NO"")
12
13
for result in results:
14
    print(result)
15",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871219
1386871220,saurabha_srs75,unknown,unknown,"1
def can_partition_into_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd numbers in the array
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        7
        # We need at least two odd numbers to partition into two subsequences with odd sums
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input reading
15
T = int(input())  # Number of test cases
16
test_cases = []
17
for _ in range(T):
18
    N = int(input())  # Number of integers
19
    A = list(map(int, input().split()))
20
    test_cases.append((N, A))
21
22
# Process and output results
23
results = can_partition_into_odd_product(test_cases)
24
for result in results:
25
    print(result)",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871220
1386871221,deeptisunilsing1,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    # Total subsets = 2^N, excluding empty set = 2^N - 1
3
    return (1 << n) - 1
4
5
if __name__ == ""__main__"":
6
    t = int(input())  # Number of test cases
7
    results = []
8
9
    for _ in range(t):
10
        n = int(input())  # Size of the set
11
        results.append(count_non_empty_subsets(n))
12
13
    print(""\n"".join(map(str, results)))
14",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871221
1386871217,aggarwalkartike1,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(M, N, A):
4
    """"""
5
    Calculate the minimum number of cloth pieces of size A x A required
6
    to cover a land of size M x N.
7
    """"""
8
    # Calculate the number of cloth pieces needed along the length (M) and width (N)
9
    pieces_along_length = math.ceil(M / A)
10
    pieces_along_width = math.ceil(N / A)
11
    12
    # Total pieces required
13
    return pieces_along_length * pieces_along_width
14
15
# Input reading
16
T = int(input())  # Number of test cases
17
results = []
18
19
for _ in range(T):
20
    M, N, A = map(int, input().split())
21
    results.append(min_cloth_pieces(M, N, A))
22
23
# Output results
24
for res in results:
25
    print(res)",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871217
1386871216,psthefreak,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        8
        while (T-- > 0) {
9
            int N = sc.nextInt();
10
            int[] A = new int[N];
11
            12
            // Count odd numbers
13
            int oddCount = 0;
14
            for (int i = 0; i < N; i++) {
15
                A[i] = sc.nextInt();
16
                if (A[i] % 2 == 1) oddCount++;
17
            }
18
            19
            // Need at least 2 odd numbers to get an odd product
20
            System.out.println(oddCount >= 2 ? ""YES"" : ""NO"");
21
        }
22
        sc.close();
23
    }
24
}",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871216
1386871218,dhirajkalwar57,unknown,unknown,"1
T = int(input())
2
results = []
3
4
for _ in range(T):
5
    6
    N = int(input())
7
    8
    A = list(map(int, input().split()))
9
    10
    11
    odd_count = sum(1 for x in A if x % 2 != 0)
12
    13
    14
    if odd_count >= 2:
15
        results.append(""YES"")
16
    else:
17
        results.append(""NO"")
18
19
20
print(""\n"".join(results))",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871218
1386871211,sakshimashalkar1,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        8
        // Read the number of test cases
9
        int T = scanner.nextInt();
10
        11
        // Iterate through each test case
12
        while (T-- > 0) {
13
            int N = scanner.nextInt(); // Number of elements in the set
14
            15
            int oddCount = 0;
16
            // Read the array and count the odd numbers
17
            for (int i = 0; i < N; i++) {
18
                int A = scanner.nextInt();
19
                if (A % 2 != 0) {
20
                    oddCount++;
21
                }
22
            }
23
            24
            // If there are at least two odd numbers, we can partition the array into two subsequences with odd sums
25
            if (oddCount >= 2) {
26
                System.out.println(""YES"");
27
            } else {
28
                System.out.println(""NO"");
29
            }
30
        }
31
        32
        scanner.close();
33
    }
34
}
35",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871211
1386871213,purvi_vishwakar1,unknown,unknown,"1
def can_partition_odd_product(A):
2
    """"""
3
    Checks if the given array can be partitioned into two subsequences 
4
    such that the product of their sums is odd.
5
6
    Args:
7
      A: The input array of integers.
8
9
    Returns:
10
      ""YES"" if possible, ""NO"" otherwise.
11
    """"""
12
13
    # Check if there are any odd numbers in the array
14
    has_odd = any(num % 2 == 1 for num in A)
15
16
    # If there are no odd numbers, it's impossible to have an odd product
17
    if not has_odd:
18
        return ""NO""
19
20
    # If there's only one odd number, it's impossible to have an odd product
21
    if sum(num % 2 for num in A) == 1: 
22
        return ""NO""
23
24
    # Otherwise, it's always possible to create an odd product
25
    return ""YES""
26
27
if __name__ == ""__main__"":
28
    T = int(input())
29
30
    for _ in range(T):
31
        N = int(input())
32
        A = list(map(int, input().split()))
33
        print(can_partition_odd_product(A))",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871213
1386871214,h1032221491,unknown,unknown,"1
from itertools import chain, combinations
2
3
def get_all_subsets(s):
4
     Generate all subsets using combinations
5
    subsets = list(chain.from_iterable(combinations(s, r) for r in range(len(s) + 1)))
6
    return subsets
7
8
def count_non_empty_subsets(s):
9
    all_subsets = get_all_subsets(s)
10
    non_empty_subsets = [subset for subset in all_subsets if len(subset) > 0]
11
    return len(non_empty_subsets), non_empty_subsets
12
13
14
input_set = {'a'}
15
16
17
total_non_empty, non_empty_subsets = count_non_empty_subsets(input_set)
18
19
print(""All subsets:"", get_all_subsets(input_set))
20
print(""Non-empty subsets:"", non_empty_subsets)
21
print(""Number of unique non-empty subsets:"", total_non_empty)
22",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871214
1386871210,anuragpande006,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871210
1386871205,prashantyelurka1,unknown,unknown,"1
T = int(input())  
2
for _ in range(T):  
3
    m, n, a = map(int, input().split()) 
4
    area = m * n 
5
    count = ((m + a - 1) // a) * ((n + a - 1) // a)
6
    print (count)
7
    8",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871205
1386871208,ravi942004,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871208
1386871209,Rawat_vr44,unknown,unknown,"1
def can_partition(arr):
2
    if len(arr) < 2:
3
        return ""YES""
4
    return ""YES"" if sum(num % 2 for num in arr) % 2 == 0 else ""NO""
5
6
T = int(input())
7
for _ in range(T):
8
    N = int(input())
9
    arr = list(map(int, input().split()))
10
    print(can_partition(arr))",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871209
1386871201,khushbu1215,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871201
1386871202,anuragt1604,unknown,unknown,"1
def can_partition(arr):
2
    n = len(arr)
3
    total_sum = sum(arr)
4
    5
    for mask in range(1, (1 << n) - 1):
6
        sum1 = 0
7
        for i in range(n):
8
            if mask & (1 << i):
9
                sum1 += arr[i]
10
        sum2 = total_sum - sum1
11
        if sum1 * sum2 % 2 == 1:
12
            return True
13
    return False
14
15
def main():
16
    t = int(input())
17
    for _ in range(t):
18
        n = int(input())
19
        arr = list(map(int, input().split()))
20
        print(""YES"" if can_partition(arr) else ""NO"")
21
22
if __name__ == ""__main__"":
23
    main()",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871202
1386871203,mishranirajk121,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
   7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
14
    if count_odd >= 2 and (count_odd % 2 == 0):
15
        print(""YES"")
16
    else:
17
        print(""NO"")",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871203
1386871196,ketan_kumavat191,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
int main() {
8
    int T;
9
    cin >> T;
10
    while (T--) {
11
        int N;
12
        cin >> N;
13
        vector<int> A(N);
14
        int odd_count = 0;
15
        for (int i = 0; i < N; i++) {
16
            cin >> A[i];
17
            if (A[i] % 2 != 0) {
18
                odd_count++;
19
            }
20
        }
21
        22
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
23
            cout << ""YES\n"";
24
        } else {
25
            cout << ""NO\n"";
26
        }
27
    }
28
    return 0;
29
}
30",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871196
1386871197,aayu_sh7021,unknown,unknown,"1
def unique_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Total non-empty subsets are (2^N - 1)
5
        results.append((1 << N) - 1)  # Efficient calculation of 2^N
6
    return results
7
8
# Input
9
T = int(input())
10
test_cases = [int(input()) for _ in range(T)]
11
12
# Output
13
results = unique_non_empty_subsets(T, test_cases)
14
for res in results:
15
    print(res)",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871197
1386871199,tanishrai,unknown,unknown,"1
import java.util.Scanner;
2
3
public class PartitionOddProduct {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        int T = scanner.nextInt();
8
9
        while (T-- > 0) {
10
            int N = scanner.nextInt();
11
            int[] A = new int[N];
12
13
            int oddCount = 0;
14
            for (int i = 0; i < N; i++) {
15
                A[i] = scanner.nextInt();
16
                if (A[i] % 2 != 0) {
17
                    oddCount++;
18
                }
19
            }
20
21
            if (oddCount >= 2) {
22
                System.out.println(""YES"");
23
            } else {
24
                System.out.println(""NO"");
25
            }
26
        }
27
28
        scanner.close();
29
    }
30
}
31",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871199
1386871195,h1032220354,unknown,unknown,"1
2
def cloth_required(testcases):
3
    result=[]
4
    for M,N,A in testcases:
5
        peices_length=(M+A-1)//A
6
        peices_width=(N+A-1)//A
7
        total=peices_width*peices_length
8
        result.append(total)
9
    return result
10
11
T=int(input())
12
testcases=[tuple(map(int,input().split())) for _ in range(T)]
13
14
result=cloth_required(testcases)
15
for res in result:
16
    print(res)",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871195
1386871191,cabhishekpal,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) throws IOException {
6
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
7
        StringBuilder result = new StringBuilder();
8
9
        int T = Integer.parseInt(br.readLine()); // Number of test cases
10
        for (int t = 0; t < T; t++) {
11
            int N = Integer.parseInt(br.readLine()); // Number of elements in array
12
            String[] inputs = br.readLine().split("" "");
13
            int oddCount = 0;
14
15
            // Count odd numbers
16
            for (int i = 0; i < N; i++) {
17
                int num = Integer.parseInt(inputs[i]);
18
                if (num % 2 != 0) {
19
                    oddCount++;
20
                }
21
            }
22
23
            // At least two odd numbers are needed to satisfy the condition
24
            if (oddCount >= 2) {
25
                result.append(""YES\n"");
26
            } else {
27
                result.append(""NO\n"");
28
            }
29
        }
30
31
        // Print all results at once
32
        System.out.print(result.toString());
33
    }
34
}
35",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871191
1386871194,gharshit2502,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for N in test_cases:
4
        results.append(2**N - 1)
5
    return results
6
7
# Input reading
8
T = int(input())  # Number of test cases
9
test_cases = []
10
for _ in range(T):
11
    N = int(input())  # Number of elements in the set
12
    test_cases.append(N)
13
14
# Compute and output the results
15
results = count_non_empty_subsets(test_cases)
16
for result in results:
17
    print(result)
18
    ",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871194
1386871192,rheetiksharma601,unknown,unknown,"1
import java.io.BufferedReader;
2
import java.io.IOException;
3
import java.io.InputStreamReader;
4
import java.io.PrintWriter;
5
import java.math.BigDecimal;
6
import java.math.BigInteger;
7
import java.math.MathContext;
8
import java.nio.channels.Pipe.SourceChannel;
9
import java.rmi.StubNotFoundException;
10
import java.util.*;
11
12
public class cf {
13
    static int mod = (int) 1e9 + 7;
14
    static int N = (int) 2e5 + 5;
15
    static FastReader sc = new FastReader();
16
    static PrintWriter out = new PrintWriter(System.out);
17
    static int count = 0;
18
19
    public static void main(String[] args) {
20
21
        // boolean[] isPrime=prime(1000000009);
22
23
        int tCase = sc.nextInt();
24
25
        l1: 
26
        while (tCase-- > 0) {
27
28
            int n=sc.nextInt();
29
            int m=sc.nextInt();
30
            int a=sc.nextInt();
31
32
            if(a>=n && a>=m){
33
                System.out.println(1);
34
            }else{
35
                int ans=0;
36
                if(a<n){
37
                    ans+=(int)Math.ceil((double)n/a);
38
                }
39
                if(a<m){
40
                    ans+=(int)Math.ceil((double)m/a);
41
                }
42
                 43
                System.out.println(ans);
44
            }
45
            46
            47
48
49
        }
50
        out.flush();
51
52
    }
53
54
    public static long longSqrt(long n){
55
        if(n==0){
56
            return 0;
57
        }
58
        if(n==1){
59
            return 1;
60
        }
61
        return BigInteger.valueOf(n).sqrt().longValue();
62
    }
63
64
    public static long fact(int num) {
65
        if (num == 1 || num == 0)
66
            return 1;
67
        return (num  * fact(num - 1));
68
    }
69
70
    public static long powerMod(long base, long exp, long mod) {
71
        long res = 1;
72
        base = base % mod;
73
        if (base == 0)
74
            return 0;
75
76
        while (exp > 0) {
77
            if ((exp & 1) == 1) {
78
                res = (res * base) % mod;
79
            }
80
            exp = exp >> 1;
81
            base = (base * base) % mod;
82
        }
83
        return res;
84
    }
85
86
    // public static HashMap<String,Pair> sortMap(HashMap<String,Pair> m){
87
    // List<Map.Entry<String, Pair>> list = new ArrayList<>(m.entrySet());
88
89
    // list.sort((e1,e2) -> {
90
    // Pair p1=e1.getValue();
91
    // Pair p2=e2.getValue();
92
93
    // if (p1.i != p2.i) {
94
    // return Integer.compare(p1.i, p2.i);
95
    // } else {
96
    // return Integer.compare(p1.j, p2.j);
97
    // }
98
    // });
99
100
    // LinkedHashMap<String, Pair> sortedMap = new LinkedHashMap<>();
101
    // for (Map.Entry<String, Pair> entry : list) {
102
    // sortedMap.put(entry.getKey(), entry.getValue());
103
    // }
104
    // return sortedMap;
105
    // }
106
107
    public static <K> HashMap<K, Pair> sortMap(Map<K, Pair> map) {
108
        List<Map.Entry<K, Pair>> list = new ArrayList<>(map.entrySet());
109
110
        list.sort((e1, e2) -> {
111
            Pair p1 = e1.getValue();
112
            Pair p2 = e2.getValue();
113
114
            if (p1.i != p2.i) {
115
                return Integer.compare(p1.i, p2.i);
116
            } else {
117
                return Integer.compare(p1.j, p2.j);
118
            }
119
        });
120
121
        HashMap<K, Pair> sortedMap = new LinkedHashMap<>();
122
        for (Map.Entry<K, Pair> entry : list) {
123
            sortedMap.put(entry.getKey(), entry.getValue());
124
        }
125
        return sortedMap;
126
    }
127
128
    public static long sumOf2(int x, int y) {
129
        return (long) ((long) Math.pow(2, y + 1) - Math.pow(2, x));
130
    }
131
132
    static class Pair {
133
        int i;
134
        int j;
135
136
        public Pair(int i, int j) {
137
            this.i = i;
138
            this.j = j;
139
        }
140
    }
141
142
    public static BigDecimal sqrt(BigDecimal value, MathContext mc) {
143
        BigDecimal x = new BigDecimal(Math.sqrt(value.doubleValue()), mc);
144
        return x.add(new BigDecimal(value.subtract(x.multiply(x)).doubleValue() / (x.doubleValue() * 2.0), mc));
145
    }
146
147
    148
149
    public static BigDecimal distance(BigDecimal x1, BigDecimal y1, BigDecimal x2, BigDecimal y2) {
150
        BigDecimal deltaX = x2.subtract(x1);
151
        BigDecimal deltaY = y2.subtract(y1);
152
153
        BigDecimal sumOfSquares = deltaX.multiply(deltaX).add(deltaY.multiply(deltaY));
154
        return sqrt(sumOfSquares, MathContext.DECIMAL128);
155
    }
156
157
    public static int closestMultiple(int a, int b, int k) {
158
        int quotient = b / a;
159
        int multipleBelow = a * quotient;
160
        int multipleAbove = a * (quotient + 1);
161
162
        int distanceBelow = Math.abs(multipleBelow - b);
163
        int distanceAbove = Math.abs(multipleAbove - b);
164
        if (distanceBelow <= k && distanceAbove <= k) {
165
            return distanceBelow < distanceAbove ? multipleBelow : multipleAbove;
166
        } else if (distanceBelow <= k) {
167
            return multipleBelow;
168
        } else if (distanceAbove <= k) {
169
            return multipleAbove;
170
        } else {
171
            return -1;
172
        }
173
    }
174
175
    public static boolean[] prime(int limit) {
176
        boolean[] isPrime = new boolean[limit + 1];
177
        Arrays.fill(isPrime, true);
178
        isPrime[0] = false;
179
        isPrime[1] = false;
180
181
        for (int i = 2; i * i <= limit; i++) {
182
            if (isPrime[i]) {
183
                for (int j = i * i; j <= limit; j += i) {
184
                    isPrime[j] = false;
185
                }
186
            }
187
        }
188
        return isPrime;
189
190
    }
191
192
    public static boolean isPrime(int num) {
193
        if (num <= 1) {
194
            return false;
195
        }
196
        if (num <= 3) {
197
            return true;
198
        }
199
        if (num % 2 == 0 || num % 3 == 0) {
200
            return false;
201
        }
202
        for (int i = 5; i * i <= num; i += 6) {
203
            if (num % i == 0 || num % (i + 2) == 0) {
204
                return false;
205
            }
206
        }
207
        return true;
208
    }
209
210
    public static int gcd(int a, int b) {
211
        while (b != 0) {
212
            int temp = b;
213
            b = a % b;
214
            a = temp;
215
        }
216
        return a;
217
    }
218
219
    // public static long combination(int n, int k) {
220
    // if(n < k) return 0;
221
    // return (fact[n] * p((fact[n - k] * fact[k]) % mod, mod - 2)) % mod;
222
    // }
223
    public static long p(long a, long b) {
224
        long r = 1;
225
        while (b > 0) {
226
            long res = b & 1;
227
            if (res == 1)
228
                r = (r * a) % mod;
229
            b /= 2;
230
            a = (a * a) % mod;
231
        }
232
        return r;
233
    }
234
235
    public static long combination(int n, int k) {
236
        if (k > n) {
237
            return 0;
238
        }
239
        if (k == 0 || k == n) {
240
            return 1;
241
        }
242
        k = Math.min(k, n - k);
243
        long c = 1;
244
        for (int i = 0; i < k; i++) {
245
            c = c * (n - i) / (i + 1);
246
        }
247
        return c;
248
    }
249
250
    public static int findGCD(int[] arr) {
251
        int result = arr[0];
252
        for (int i = 1; i < arr.length; i++) {
253
            result = gcd(result, arr[i]);
254
            if (result == 1) {
255
                return 1;
256
            }
257
        }
258
        return result;
259
    }
260
261
    static class FastReader {
262
        BufferedReader br;
263
        StringTokenizer st;
264
265
        public FastReader() {
266
            br = new BufferedReader(
267
                    new InputStreamReader(System.in));
268
        }
269
270
        String next() {
271
            while (st == null || !st.hasMoreElements()) {
272
                try {
273
                    st = new StringTokenizer(br.readLine());
274
                } catch (IOException e) {
275
                    e.printStackTrace();
276
                }
277
            }
278
            return st.nextToken();
279
        }
280
281
        int nextInt() {
282
            return Integer.parseInt(next());
283
        }
284
285
        long nextLong() {
286
            return Long.parseLong(next());
287
        }
288
289
        double nextDouble() {
290
            return Double.parseDouble(next());
291
        }
292
293
        String nextLine() {
294
            String str = """";
295
            try {
296
                if (st.hasMoreTokens()) {
297
                    str = st.nextToken(""\n"");
298
                } else {
299
                    str = br.readLine();
300
                }
301
            } catch (IOException e) {
302
                e.printStackTrace();
303
            }
304
            return str;
305
        }
306
    }
307
308
}
309",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871192
1386871188,nj6097114,unknown,unknown,"1
2
#include <iostream>
3
#include <cmath> 
4
using namespace std;
5
6
7
int calculateSubsets(int num) {
8
    return pow(2, num) - 1;
9
}
10
11
int main() {
12
    int testCases;
13
    cin >> testCases; 
14
15
    while (testCases--) {
16
        int elements;
17
        cin >> elements; 
18
        cout << calculateSubsets(elements) << endl;
19
    }
20
21
    return 0;
22
}
23
24
25",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871188
1386871189,tiwarikhushi907,unknown,unknown,"1
def can_partition_odd_product(N, arr):
2
    # Try all possible partitions using bitmask
3
    for mask in range(1, (1 << N) - 1):  # -1 to ensure both subseqs non-empty
4
        sum_s1 = sum_s2 = 0
5
        has_s1 = has_s2 = False
6
        7
        # Generate subsequences based on bitmask
8
        for i in range(N):
9
            if mask & (1 << i):
10
                sum_s1 += arr[i]
11
                has_s1 = True
12
            else:
13
                sum_s2 += arr[i]
14
                has_s2 = True
15
        16
        # Check if both sums are odd and subsequences non-empty
17
        if has_s1 and has_s2 and sum_s1 % 2 == 1 and sum_s2 % 2 == 1:
18
            return True
19
    20
    return False
21
22
def solve():
23
    T = int(input())
24
    results = []
25
    26
    for _ in range(T):
27
        N = int(input())
28
        arr = list(map(int, input().split()))
29
        result = ""YES"" if can_partition_odd_product(N, arr) else ""NO""
30
        results.append(result)
31
    32
    # Print results
33
    for result in results:
34
        print(result)
35
36
if __name__ == ""__main__"":
37
    solve()",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871189
1386871190,nileshparmaroff1,unknown,unknown,"1
import java.util.Scanner;
2
3
public class PartitioningForOddMultiplication {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        int T = scanner.nextInt();
8
9
        for (int t = 0; t < T; t++) {
10
            int N = scanner.nextInt();
11
            int oddCount = 0;
12
13
            for (int i = 0; i < N; i++) {
14
                int number = scanner.nextInt();
15
                if (number % 2 != 0) {
16
                    oddCount++;
17
                }
18
            }
19
            if (oddCount >= 2) {
20
                System.out.println(""YES"");
21
            } else {
22
                System.out.println(""NO"");
23
            }
24
        }
25
26
        scanner.close();
27
    }
28
}
29",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871190
1386871185,dhanashrikuwar25,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        int T = scanner.nextInt();
9
        StringBuilder result = new StringBuilder();
10
11
        while (T-- > 0) {
12
            int N = scanner.nextInt();
13
            int oddCount = 0;
14
15
            for (int i = 0; i < N; i++) {
16
                if (scanner.nextInt() % 2 != 0) {
17
                    oddCount++;
18
                }
19
            }
20
21
            if (oddCount >= 2) {
22
                result.append(""YES\n"");
23
            } else {
24
                result.append(""NO\n"");
25
            }
26
        }
27
28
        System.out.print(result);
29
        scanner.close();
30
    }
31
}",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871185
1386871186,jaypsingh04,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871186
1386871187,drashtitalia,unknown,unknown,"1
def minimum_cloth_pieces(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        # Calculate the number of pieces along the length and width
5
        pieces_along_length = (M + A - 1) // A
6
        pieces_along_width = (N + A - 1) // A
7
        # Calculate the total number of pieces
8
        total_pieces = pieces_along_length * pieces_along_width
9
        results.append(total_pieces)
10
    return results
11
12
# Input reading
13
T = int(input())
14
test_cases = []
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
# Processing and output
20
results = minimum_cloth_pieces(test_cases)
21
for result in results:
22
    print(result)
23",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871187
1386871184,h1032220187,unknown,unknown,"1
def squarescaping():
2
    # Read number of test cases
3
    T = int(input())
4
    results = []
5
    6
    for _ in range(T):
7
        # Read M, N, A for each test case
8
        M, N, A = map(int, input().split())
9
        # Calculate the number of tiles along the length and width
10
        tiles_length = (M + A - 1) // A
11
        tiles_width = (N + A - 1) // A
12
        # Calculate total number of tiles
13
        total_tiles = tiles_length * tiles_width
14
        results.append(total_tiles)
15
    16
    # Print the results for all test cases
17
    for result in results:
18
        print(result)
19
20
# Call the function
21
squarescaping()",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871184
1386871181,harshy8013698,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871181
1386871183,shaunaksinkar,unknown,unknown,"1
def num_non_empty_subsets(n):
2
    """"""
3
    Calculates the number of non-empty subsets for a set of n elements.
4
5
    Args:
6
        n: The number of elements in the set.
7
8
    Returns:
9
        The number of non-empty subsets.
10
    """"""
11
    return 2**n - 1  # Total subsets (2^n) minus the empty set
12
13
if __name__ == ""__main__"":
14
    T = int(input())
15
16
    for _ in range(T):
17
        N = int(input())
18
        result = num_non_empty_subsets(N)
19
        print(result)",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871183
1386871182,prathameshjanug1,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt();
8
        9
        for (int t = 0; t < T; t++) {
10
            long M = scanner.nextLong();
11
            long N = scanner.nextLong();
12
            long A = scanner.nextLong();
13
            14
            System.out.println(calculateMinClothPieces(M, N, A));
15
        }
16
    }
17
    18
    private static long calculateMinClothPieces(long M, long N, long A) {
19
        long horizontalPieces = (M + A - 1) / A;
20
        long verticalPieces = (N + A - 1) / A;
21
        return horizontalPieces * verticalPieces;
22
    }
23
}
24
25",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871182
1386871177,h1032220732,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        rows = (M + A - 1) // A
6
        cols = (N + A - 1) // A
7
        results.append(rows * cols)
8
    return results
9
10
T = int(input())
11
inputs = [tuple(map(int, input().split())) for _ in range(T)]
12
results = squarescaping(inputs)
13
14
for result in results:
15
    print(result)
16",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871177
1386871178,rudra07032004,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871178
1386871180,kothareprateek,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871180
1386871174,ks4556737,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
5
public class Solution {
6
    public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        int T = scanner.nextInt();
9
        for (int t = 0; t < T; t++) {
10
            long M = scanner.nextLong();
11
            long N = scanner.nextLong();
12
            long A = scanner.nextLong();
13
            long lengthPieces = (M + A - 1) / A;
14
            long widthPieces = (N + A - 1) / A;
15
            System.out.println(lengthPieces * widthPieces);
16
        }
17
        scanner.close();
18
    }
19
}",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871174
1386871175,anuragt1604,unknown,unknown,"1
def can_partition(arr):
2
    n = len(arr)
3
    total_sum = sum(arr)
4
    5
    for mask in range(1, (1 << n) - 1):
6
        sum1 = 0
7
        for i in range(n):
8
            if mask & (1 << i):
9
                sum1 += arr[i]
10
        sum2 = total_sum - sum1
11
        if sum1 * sum2 % 2 == 1:
12
            return True
13
    return False
14
15
def main():
16
    t = int(input())
17
    for _ in range(t):
18
        n = int(input())
19
        arr = list(map(int, input().split()))
20
        print(""YES"" if can_partition(arr) else ""NO"")
21
22
if __name__ == ""__main__"":
23
    main()",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871175
1386871176,dipanjaliprajap1,unknown,unknown,"1
def solve():
2
    T = int(input())  # Read the number of test cases
3
    for _ in range(T):
4
        N = int(input())  # Read the number of elements in the array
5
        A = list(map(int, input().split()))  # Read the array elements
6
        7
        # Count how many odd numbers are in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # If there are at least two odd numbers, we can partition into two odd-sum subsequences
11
        if odd_count >= 2:
12
            print(""YES"")
13
        else:
14
            print(""NO"")
15
16
# Calling the solve function to execute
17
solve()
18
19",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871176
1386871173,tripathiayush161,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871173
1386871171,h1032221768,unknown,unknown,"1
def count_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        5
        results.append((1 << N) - 1)  
6
    return results
7
8
9
import sys
10
input = sys.stdin.read
11
data = input().split()
12
13
T = int(data[0])  
14
test_cases = list(map(int, data[1:]))
15
16
17
results = count_non_empty_subsets(T, test_cases)
18
19
20
sys.stdout.write(""\n"".join(map(str, results)) + ""\n"")
21",123,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871171
1386871170,sanskruti01thak1,unknown,unknown,"1
T = int(input())  
2
results = []
3
4
for _ in range(T):
5
    N = int(input())  
6
    A = list(map(int, input().split()))  
7
    8
    odd_count = sum(1 for x in A if x % 2 != 0)
9
    10
    if odd_count >= 2:
11
        results.append(""YES"")
12
    else:
13
        results.append(""NO"")
14
15
print(""\n"".join(results))
16",123,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871170
1386871172,ravijeetsharma11,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int t;
7
    cin >> t;
8
    while (t--) {
9
        double m, n, a, r, c;
10
        cin >> m >> n >> a;
11
12
        r = ceil(m / a);
13
        c = ceil(n / a); 
14
15
        cout << static_cast<long long>(r * c) << endl;
16
    }
17
18
    return 0;
19
}
20",123,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871172
1386871167,simran_verma1081,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",123,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871167
1386871168,atharvatripathi8,unknown,unknown,"1
# Read number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    N = int(input())  # Number of elements in the array
7
    A = list(map(int, input().split()))  # The array of integers
8
    9
    # Count the number of odd integers
10
    odd_count = sum(1 for x in A if x % 2 == 1)
11
    12
    # If there are at least 2 odd numbers, answer is YES
13
    if odd_count >= 2:
14
        results.append(""YES"")
15
    else:
16
        results.append(""NO"")
17
18
# Output results
19
print(""\n"".join(results))
20",123,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871168
1386871169,iamrealsoumik,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <numeric>
4
5
using namespace std;
6
7
bool solve() {
8
    int n;
9
    cin >> n;
10
    vector<int> a(n);
11
    for (int i = 0; i < n; ++i) {
12
        cin >> a[i];
13
    }
14
15
    for (int i = 1; i < (1 << n) - 1; ++i) {
16
        vector<int> s1;
17
        vector<int> s2;
18
        for (int j = 0; j < n; ++j) {
19
            if ((i >> j) & 1) {
20
                s1.push_back(a[j]);
21
            } else {
22
                s2.push_back(a[j]);
23
            }
24
        }
25
26
        if (s1.empty() || s2.empty()) continue;
27
28
        long long sum1 = 0;
29
        long long sum2 = 0;
30
        for(int x : s1) sum1 += x;
31
        for(int x : s2) sum2 += x;
32
33
        if ((sum1 * sum2) % 2 != 0) {
34
            return true;
35
        }
36
    }
37
    return false;
38
}
39
40
int main() {
41
    int t;
42
    cin >> t;
43
    while (t--) {
44
        if (solve()) {
45
            cout << ""YES"" << endl;
46
        } else {
47
            cout << ""NO"" << endl;
48
        }
49
    }
50
    return 0;
51
}",123,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871169
1386871163,prajapatishivam7,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        pieces_length = math.ceil(M / A)
8
        pieces_width = math.ceil(N / A)
9
        results.append(pieces_length * pieces_width)
10
    return results
11
12
# Input
13
T = int(input())
14
test_cases = []
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
# Processing
20
output = minimum_cloth_pieces(test_cases)
21
22
# Output
23
for result in output:
24
    print(result)
25",123,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871163
1386871164,collegeid3250,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",123,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871164
1386871165,jaychvn2808,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",123,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871165
1386871162,h1032221642,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    return 2**n - 1
3
4
if __name__ == ""__main__"":
5
    t = int(input()) 
6
7
    for _ in range(t):
8
        n = int(input())  
9
        print(count_non_empty_subsets(n))",123,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871162
1386871159,sp488830,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
10
int main() {
11
    int T;
12
    cin >> T;
13
    14
    while (T--) {
15
        int N;
16
        cin >> N;
17
        cout << (pow(2, N) - 1) << endl;
18
    }
19
    20
    return 0;
21
}
22",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871159
1386871157,shetty2004dhanu1,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
5
    results = []
6
7
    for case in test_cases:
8
9
        M, N, A = case
10
11
        # Calculate the number of cloth pieces needed in length and width
12
13
        pieces_length = math.ceil(M / A)
14
15
        pieces_width = math.ceil(N / A)
16
17
        # Total pieces needed
18
19
        results.append(pieces_length * pieces_width)
20
21
    return results
22
23
# Input
24
25
T = int(input())
26
27
test_cases = []
28
29
for _ in range(T):
30
31
    test_cases.append(tuple(map(int, input().split())))
32
33
# Solve the problem
34
35
results = minimum_cloth_pieces(test_cases)
36
37
# Output results
38
39
for result in results:
40
41
    print(result)
42
43",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871157
1386871161,printshubham,unknown,unknown,"1
def partition(t, test_cases):
2
    results = []
3
    for i in range(t):
4
        n, a = test_cases[i]
5
        odd_count = sum(1 for x in a if x % 2 != 0)
6
        even_count = n - odd_count
7
        8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
t = int(input())
15
test_cases = []
16
for _ in range(t):
17
    n = int(input())
18
    a = list(map(int, input().split()))
19
    test_cases.append((n, a))
20
21
res = partition(t, test_cases)
22
print(""\n"".join(res))
23",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871161
1386871153,tanishj_1309,unknown,unknown,"1
2
3
import math
4
5
def minimum_cloth_pieces(test_cases):
6
    results = []
7
    for case in test_cases:
8
        M, N, A = case
9
        # Calculate the number of cloth pieces needed in both dimensions
10
        cloth_in_length = math.ceil(M / A)
11
        cloth_in_width = math.ceil(N / A)
12
        # Total cloth pieces
13
        total_cloths = cloth_in_length * cloth_in_width
14
        results.append(total_cloths)
15
    return results
16
17
# Input Handling
18
def main():
19
    T = int(input())  # Number of test cases
20
    test_cases = []
21
    for _ in range(T):
22
        M, N, A = map(int, input().split())
23
        test_cases.append((M, N, A))
24
25
    # Calculate results
26
    results = minimum_cloth_pieces(test_cases)
27
28
    # Print results
29
    for result in results:
30
        print(result)
31
32
if __name__ == ""__main__"":
33
    main()",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871153
1386871154,guptamukesh9380,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
t=int(input())
3
for _ in range(t):
4
    m,n,a=map(int,input().split())
5
    one=0
6
    two=0
7
    if m%a==0:
8
        one=m//a
9
    else:
10
        one=m//a+1
11
    12
    if n%a==0:
13
        two=m//a
14
    else:
15
        two=m//a +1
16
    17
    if one==1 and two==1:
18
        print(1)
19
    else:
20
        print(one*two)",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871154
1386871156,prachisingh72087,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871156
1386871149,vikasmourya54321,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871149
1386871152,saurabhaaaayadav,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        9
10
11
        Scanner scanner = new Scanner(System.in);
12
13
        14
        int T = scanner.nextInt();
15
16
        17
        for (int t = 0; t < T; t++) {
18
    19
            long M = scanner.nextLong();
20
            long N = scanner.nextLong();
21
            long A = scanner.nextLong();
22
23
           24
            long longM = (M + A - 1) / A;
25
            long longN = (N + A - 1) / A;
26
27
            long totalPieces = longM * longN;
28
29
            30
            System.out.println(totalPieces);
31
        }
32
33
      34
    }
35
}
36",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871152
1386871151,vartikau8,unknown,unknown,"1
import java.io.*;
2
3
public class Solution {
4
5
    public static void main(String[] args) throws IOException {
6
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
7
        8
        int T = Integer.parseInt(br.readLine()); // Read number of test cases
9
        10
        StringBuilder result = new StringBuilder();
11
        12
        while (T-- > 0) {
13
            int N = Integer.parseInt(br.readLine()); // Read the value for N
14
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
15
        }
16
        17
        System.out.print(result); // Output the result
18
    }
19
}
20",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871151
1386871148,h1032220619,unknown,unknown,"1
# Function to determine if partitioning is possible
2
def can_partition_with_odd_product(n, arr):
3
    # Count the number of odd numbers
4
    odd_count = sum(1 for x in arr if x % 2 != 0)
5
    # If there are at least 2 odd numbers, partition is possible
6
    return ""YES"" if odd_count >= 2 else ""NO""
7
8
# Read input
9
import sys
10
input = sys.stdin.read
11
data = input().split()
12
13
T = int(data[0])  # Number of test cases
14
results = []
15
index = 1
16
17
for _ in range(T):
18
    N = int(data[index])  # Size of the array
19
    A = list(map(int, data[index + 1:index + 1 + N]))
20
    index += 1 + N
21
    # Process the test case
22
    results.append(can_partition_with_odd_product(N, A))
23
24
# Output results
25
sys.stdout.write(""\n"".join(results) + ""\n"")
26",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871148
1386871145,ansh_vishwa2020,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Calculate the number of non-empty subsets
5
        results.append((1 << N) - 1)  # Equivalent to 2^N - 1 using bit shifting
6
    return results
7
8
# Input reading
9
T = int(input())  # Number of test cases
10
test_cases = [int(input()) for _ in range(T)]  # Read N for each test case
11
12
# Compute results
13
results = count_non_empty_subsets(test_cases)
14
15
# Output results
16
for result in results:
17
    print(result)
18",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871145
1386871146,ketan_kumavat191,unknown,unknown,"1
#include <iostream>
2
3
#include <cmath>
4
5
using namespace std;
6
7
int main() {
8
9
    int t;
10
11
    cin >> t;
12
13
    14
15
    while(t--) {
16
17
        int n;
18
19
        cin >> n;
20
21
        // Total non-empty subsets = 2^n - 1
22
23
        cout << (1LL << n) - 1 << endl;
24
25
    }
26
27
    return 0;
28
29
}
30",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871146
1386871147,bubblebee156,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871147
1386871142,h1032221621,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T; 
5
    scanf(""%d"", &T);
6
7
    while (T--) {
8
        int N; 
9
        scanf(""%d"", &N);
10
11
        int A[N], odd_count = 0;
12
13
        for (int i = 0; i < N; i++) {
14
            scanf(""%d"", &A[i]);
15
            if (A[i] % 2 != 0) {
16
                odd_count++;
17
            }
18
        }
19
20
        if (odd_count >= 2 && odd_count % 2 == 0) {
21
            printf(""YES\n"");
22
        } else {
23
            printf(""NO\n"");
24
        }
25
    }
26
27
    return 0;
28
}
29",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871142
1386871143,psthefreak,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871143
1386871144,parshadk04,unknown,unknown,"1
def count_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        results.append((1 << N) - 1) 
5
    return results
6
7
T = int(input())
8
test_cases = [int(input()) for _ in range(T)]
9
10
output = count_non_empty_subsets(T, test_cases)
11
for result in output:
12
    print(result)
13",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871144
1386871140,h1032220730,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Check for partition with odd product
13
        odd_sum = sum(num for num in arr if num % 2 == 1)
14
        even_sum = total_sum - odd_sum
15
        16
        if odd_sum > 0 and even_sum > 0:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input handling
24
T = int(input())
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())
28
    arr = list(map(int, input().split()))
29
    test_cases.append((N, arr))
30
31
output = can_partition_odd_sum(T, test_cases)
32
for res in output:
33
    print(res)
34",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871140
1386871141,mishranirajk121,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N, A = test_cases[i]
5
        # Count the number of odd and even numbers
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        even_count = N - odd_count
8
        # Check if partition is possible
9
        if odd_count >= 2:  # At least two odd numbers are needed for two odd sums
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
import sys
17
input = sys.stdin.read
18
data = input().split()
19
20
T = int(data[0])  # Number of test cases
21
test_cases = []
22
index = 1
23
for _ in range(T):
24
    N = int(data[index])  # Number of integers in the array
25
    A = list(map(int, data[index + 1: index + 1 + N]))
26
    test_cases.append((N, A))
27
    index += 1 + N
28
29
# Process the test cases and output results
30
results = can_partition_odd_product(T, test_cases)
31
sys.stdout.write(""\n"".join(results) + ""\n"")
32",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871141
1386871139,rajan2809jha,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        n, a = test_cases[i]
5
        odd_count = sum(1 for x in a if x % 2 == 1)
6
        if odd_count >= 2:
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
    return results
11
import sys
12
input = sys.stdin.read
13
data = input().split()
14
15
T = int(data[0])
16
test_cases = []
17
index = 1
18
19
for _ in range(T):
20
    N = int(data[index])
21
    index += 1
22
    A = list(map(int, data[index:index+N]))
23
    index += N
24
    test_cases.append((N, A))
25
26
results = can_partition_odd_product(T, test_cases)
27
sys.stdout.write(""\n"".join(results) + ""\n"")",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871139
1386871138,nayaktanmayg,unknown,unknown,"1
def is_partition_possible(arr):
2
    total_sum = sum(arr)
3
    if total_sum % 2 != 0:
4
        return False
5
    target_sum = total_sum // 2
6
    n = len(arr)
7
    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]
8
    for i in range(n + 1):
9
        dp[i][0] = True
10
    for i in range(1, n + 1):
11
        for j in range(1, target_sum + 1):
12
            if arr[i - 1] <= j:
13
                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]
14
            else:
15
                dp[i][j] = dp[i - 1][j]
16
    return dp[n][target_sum]
17
18
t = int(input())
19
for _ in range(t):
20
    n = int(input())
21
    arr = list(map(int, input().split()))
22
    if is_partition_possible(arr):
23
        print(""YES"")
24
    else:
25
        print(""NO"")
26
        ",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871138
1386871134,ts9892singh,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871134
1386871136,hardikj1511,unknown,unknown,"1
def calculate_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Calculate the number of non-empty subsets
5
        results.append((2 ** n) - 1)
6
    return results
7
8
# Input
9
t = int(input())  # Number of test cases
10
test_cases = []
11
12
for _ in range(t):
13
    n = int(input())
14
    test_cases.append(n)
15
16
# Calculate results
17
results = calculate_non_empty_subsets(test_cases)
18
19
# Output
20
for result in results:
21
    print(result)
22",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871136
1386871137,anushkambtech,unknown,unknown,"1
testcases = int(input())
2
for test in range(testcases):
3
    n = int(input())
4
    print(2**n -1)",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871137
1386871130,gharshit2502,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        6
        # Step 1: Check if the sum is even
7
        total_sum = sum(arr)
8
        if total_sum % 2 != 0:
9
            results.append(""NO"")
10
            continue
11
        12
        # Step 2: Count the odd numbers
13
        odd_count = sum(1 for x in arr if x % 2 != 0)
14
        15
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input reading
24
T = int(input())  # Number of test cases
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())  # Size of the list
28
    arr = list(map(int, input().split()))  # The list of integers
29
    test_cases.append((N, arr))
30
31
# Compute and output the results
32
results = can_partition_into_subsequences(test_cases)
33
for result in results:
34
    print(result)",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871130
1386871131,h1032221543,unknown,unknown,"1
import math
2
T = int(input())
3
for _ in range(T):
4
    M, N, A = map(int, input().split())    
5
    cloths_for_M = math.ceil(M / A)
6
    cloths_for_N = math.ceil(N / A)    
7
    result = cloths_for_M * cloths_for_N
8
    print(result)",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871131
1386871132,sethdharmik5,unknown,unknown,"1
import java.util.*;
2
3
public class PartitionOddProduct {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
7
        // Read the number of test cases
8
        int T = sc.nextInt();
9
        10
        while (T-- > 0) {
11
            // Read the number of elements in the array
12
            int N = sc.nextInt();
13
            14
            // Read the array elements
15
            int[] arr = new int[N];
16
            for (int i = 0; i < N; i++) {
17
                arr[i] = sc.nextInt();
18
            }
19
20
            // Process the array and determine the output
21
            if (canPartition(arr)) {
22
                System.out.println(""YES"");
23
            } else {
24
                System.out.println(""NO"");
25
            }
26
        }
27
        sc.close();
28
    }
29
30
    private static boolean canPartition(int[] arr) {
31
        // Count the number of even and odd elements
32
        int oddCount = 0;
33
        int evenCount = 0;
34
35
        for (int num : arr) {
36
            if (num % 2 == 0) {
37
                evenCount++;
38
            } else {
39
                oddCount++;
40
            }
41
        }
42
43
        // For the product of sums to be odd:
44
        // Both subsequences must have at least one odd element.
45
        return oddCount >= 2;
46
    }
47
}
48",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871132
1386871128,purvi_vishwakar1,unknown,unknown,"1
def can_partition_odd_product(A):
2
    """"""
3
    Checks if the given array can be partitioned into two subsequences 
4
    such that the product of their sums is odd.
5
6
    Args:
7
      A: The input array of integers.
8
9
    Returns:
10
      ""YES"" if possible, ""NO"" otherwise.
11
    """"""
12
13
    # Check if there are any odd numbers in the array
14
    has_odd = any(num % 2 == 1 for num in A)
15
16
    # If there are no odd numbers, it's impossible to have an odd product
17
    if not has_odd:
18
        return ""NO""
19
20
    # If there's only one odd number, it's impossible to have an odd product
21
    if sum(num % 2 for num in A) == 1: 
22
        return ""NO""
23
24
    # Otherwise, it's always possible to create an odd product
25
    return ""YES""
26
27
if __name__ == ""__main__"":
28
    T = int(input())
29
30
    for _ in range(T):
31
        N = int(input())
32
        A = list(map(int, input().split()))
33
        print(can_partition_odd_product(A))",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871128
1386871127,pandeyshreya358,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871127
1386871129,singhyatharthsn,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871129
1386871126,neharoy_1158,unknown,unknown,"1
def non_empty_subsets(test_cases):
2
    results = []
3
    for N in test_cases:
4
        results.append((1 << N) - 1)  
5
    return results
6
7
T = int(input())
8
test_cases = [int(input()) for _ in range(T)]
9
10
for result in non_empty_subsets(test_cases):
11
    print(result)
12",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871126
1386871122,vikrantsingh2021,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for M, N, A in test_cases:
6
        # Calculate the number of cloth pieces required along each dimension
7
        pieces_length = math.ceil(M / A)
8
        pieces_width = math.ceil(N / A)
9
        10
        # Total pieces required is the product of pieces along length and width
11
        total_pieces = pieces_length * pieces_width
12
        results.append(total_pieces)
13
    return results
14
15
# Input reading
16
T = int(input())  # Number of test cases
17
test_cases = []
18
19
for _ in range(T):
20
    M, N, A = map(int, input().split())  # Dimensions of the land and cloth piece size
21
    test_cases.append((M, N, A))
22
23
# Compute and output results
24
results = minimum_cloth_pieces(test_cases)
25
for result in results:
26
    print(result)
27",127,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871122
1386871123,saurabha_srs75,unknown,unknown,"1
def can_partition_into_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd numbers in the array
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        # If there are at least two odd numbers, it's possible to partition
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Input reading
14
T = int(input())  # Number of test cases
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())  # Number of integers
18
    A = list(map(int, input().split()))
19
    test_cases.append((N, A))
20
21
# Process and output results
22
results = can_partition_into_odd_product(test_cases)
23
for result in results:
24
    print(result)",127,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871123
1386871125,jashbarot05,unknown,unknown,"1
def can_partition_odd_product(N, A):
2
    # Count odd numbers
3
    odd_count = sum(1 for x in A if x % 2 == 1)
4
    5
    # Case 1: No odd numbers - can't make odd sum
6
    if odd_count == 0:
7
        return False
8
    9
    # Case 2: Only one odd number - can't make two odd sums
10
    if odd_count == 1:
11
        return False
12
    13
    # Case 3: Odd count of odd numbers
14
    if odd_count % 2 == 1:
15
        # Need at least 3 odd numbers to split into two groups
16
        # where one group has even count and other has odd count
17
        return odd_count >= 3
18
    19
    # Case 4: Even count of odd numbers
20
    else:
21
        # Need at least 2 odd numbers, which we already have
22
        # Can split them evenly to make both sums odd
23
        return True
24
25
# Read number of test cases
26
T = int(input())
27
28
for _ in range(T):
29
    # Read array size
30
    N = int(input())
31
    # Read array
32
    A = list(map(int, input().split()))
33
    34
    # Print result
35
    print(""YES"" if can_partition_odd_product(N, A) else ""NO"")",127,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871125
1386871119,h1032220677,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def solve():
5
    data = input().splitlines()
6
    result = []
7
    index = 0
8
    T = int(data[index])  
9
    index += 1
10
    for _ in range(T):
11
        N = int(data[index])  
12
        index += 1
13
        A = list(map(int, data[index].split()))  
14
        index += 1
15
16
        odd_count = sum(1 for x in A if x % 2 != 0)
17
        18
     19
        if odd_count >= 2:
20
            result.append(""YES"")
21
        else:
22
            result.append(""NO"")
23
    24
    sys.stdout.write(""\n"".join(result) + ""\n"")
25
26
solve()
27",127,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871119
1386871121,h1032231261,unknown,unknown,"1
# Function to solve each test case
2
def solve(test_cases):
3
    results = []
4
    for case in test_cases:
5
        N, A = case
6
        odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Reading input
14
def main():
15
    T = int(input())  # Read number of test cases
16
    test_cases = []
17
    18
    for _ in range(T):
19
        N = int(input())  # Read number of integers in the current test case
20
        A = list(map(int, input().split()))  # Read the list of integers
21
        test_cases.append((N, A))
22
    23
    # Solve the test cases
24
    results = solve(test_cases)
25
    26
    # Output the results
27
    print(""\n"".join(results))
28
29
# Run the program
30
if __name__ == ""__main__"":
31
    main()
32",127,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871121
1386871120,sakshimashalkar1,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        8
        // Read the number of test cases
9
        int T = scanner.nextInt();
10
        11
        // Iterate through each test case
12
        while (T-- > 0) {
13
            int N = scanner.nextInt(); // Number of elements in the set
14
            15
            int oddCount = 0;
16
            // Read the array and count the odd numbers
17
            for (int i = 0; i < N; i++) {
18
                int A = scanner.nextInt();
19
                if (A % 2 != 0) {
20
                    oddCount++;
21
                }
22
            }
23
            24
            // If there are at least two odd numbers, it's possible to partition
25
            if (oddCount >= 2) {
26
                System.out.println(""YES"");
27
            } else {
28
                System.out.println(""NO"");
29
            }
30
        }
31
        32
        scanner.close();
33
    }
34
}
35",127,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871120
1386871116,singh287686,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
8
        Scanner scanner = new Scanner(System.in);
9
10
        int T = scanner.nextInt();
11
        long[] results = new long[T];
12
13
        for (int t = 0; t < T; t++) {
14
15
            long M = scanner.nextLong();
16
            long N = scanner.nextLong();
17
            long A = scanner.nextLong();
18
19
            long rows = (M + A - 1) / A;
20
            long columns = (N + A - 1) / A;
21
22
            results[t] = rows * columns;
23
        }
24
25
        for (long result : results) {
26
            System.out.println(result);
27
        }
28
29
        scanner.close();
30
    }
31
}
32",127,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871116
1386871117,h1032220856,unknown,unknown,"1
def calculate_non_empty_subsets():
2
    # Read the number of test cases
3
    T = int(input())
4
5
    results = []
6
7
    for _ in range(T):
8
        # Read the value of N for the current test case
9
        N = int(input())
10
        11
        # Calculate the total number of non-empty subsets: (2^N) - 1
12
        total_subsets = (1 << N) - 1  # Bitwise left shift equivalent to 2^N
13
        14
        results.append(total_subsets)
15
16
    # Print all results for each test case
17
    for result in results:
18
        print(result)
19
20
# Call the function to execute
21
calculate_non_empty_subsets()",127,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871117
1386871118,aayu_sh7021,unknown,unknown,"1
def can_partition(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        # Check if there is at least one odd number in the array
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        # If there is at least one odd number, output ""YES"", otherwise ""NO""
8
        if odd_count > 0 and odd_count < N:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input
15
T = int(input())
16
test_cases = []
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    test_cases.append((N, A))
21
22
# Output
23
results = can_partition(T, test_cases)
24
print(""\n"".join(results))",127,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871118
1386871114,amantejametla,unknown,unknown,"1
import math
2
3
def squarescaping(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of squares needed along the length and width
8
        num_squares_length = math.ceil(M / A)
9
        num_squares_width = math.ceil(N / A)
10
        # Total number of squares required
11
        results.append(num_squares_length * num_squares_width)
12
    return results
13
14
# Input reading
15
T = int(input())
16
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
17
18
# Processing and output
19
output = squarescaping(test_cases)
20
for result in output:
21
    print(result)
22",127,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871114
1386871110,tiwarirushabh59,unknown,unknown,"1
def min_cloth_pieces(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        M, N, A = test_cases[i]
5
        rows = (M + A - 1) // A  # Ceiling of M / A
6
        cols = (N + A - 1) // A  # Ceiling of N / A
7
        results.append(rows * cols)
8
    return results
9
10
# Input
11
T = int(input())
12
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
13
14
# Solve and Output
15
results = min_cloth_pieces(T, test_cases)
16
print(""\n"".join(map(str, results)))
17
    ",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871110
1386871111,hy025u,unknown,unknown,"1
def can_partition_odd_multiplication(nums):
2
    results = []
3
    for n, arr in nums:
4
        odd_count = sum(1 for x in arr if x % 2 != 0)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
12
T = int(input())
13
input_arr = []
14
for _ in range(T):
15
    n = int(input())
16
    arr = list(map(int, input().split()))
17
    input_arr.append((n, arr))
18
19
results = can_partition_odd_multiplication(input_arr)
20
21
for result in results:
22
    print(result)",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871111
1386871112,sakshi_sneh09,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871112
1386871105,shaunaksinkar,unknown,unknown,"1
def can_partition_to_odd_product():
2
    # Read the number of test cases
3
    T = int(input())
4
    5
    results = []
6
    for _ in range(T):
7
        # Read the array size (not used directly)
8
        n = int(input())
9
        # Read the array elements
10
        A = list(map(int, input().split()))
11
        12
        # Count the number of odd elements
13
        odd_count = sum(1 for x in A if x % 2 != 0)
14
        15
        # Check if there are at least 2 odd numbers
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    # Print all results
22
    print(""\n"".join(results))
23
24
# Example Input/Output
25
can_partition_to_odd_product()",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871105
1386871107,aryanshukla9004,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871107
1386871109,saumyamurkya,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871109
1386871101,adarshvijaysing1,unknown,unknown,"1
def can_partition_for_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        even_count = N - odd_count
7
8
        # To partition into two groups with odd sums:
9
        # We need at least two odd numbers
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
# Input handling
17
T = int(input())  # Number of test cases
18
test_cases = []
19
for _ in range(T):
20
    N = int(input())  # Number of elements in the array
21
    A = list(map(int, input().split()))  # The array elements
22
    test_cases.append((N, A))
23
24
# Process and print results
25
results = can_partition_for_odd_product(T, test_cases)
26
for res in results:
27
    print(res)
28",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871101
1386871103,h1032221501,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(T, cases):
4
    results = []
5
    for case in cases:
6
        M, N, A = case
7
        # Calculate the number of square pieces required in each dimension
8
        rows = math.ceil(M / A)
9
        cols = math.ceil(N / A)
10
        # Total number of pieces is the product of rows and columns
11
        results.append(rows * cols)
12
    return results
13
14
# Input reading
15
T = int(input())
16
cases = [tuple(map(int, input().split())) for _ in range(T)]
17
18
# Solve and output results
19
results = minimum_cloth_pieces(T, cases)
20
for res in results:
21
    print(res)
22",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871103
1386871104,krunalparab777,unknown,unknown,"1
# Read input
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    M, N, A = map(int, input().split())
7
    pieces_along_length = (M + A - 1) // A
8
    pieces_along_width = (N + A - 1) // A
9
    total_pieces = pieces_along_length * pieces_along_width
10
    results.append(total_pieces)
11
12
# Output results
13
for result in results:
14
    print(result)
15",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871104
1386871100,pratik23w,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    7
    return pieces_length * pieces_width
8
9
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871100
1386871096,alekarchinmay051,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871096
1386871098,amantejametla,unknown,unknown,"1
import math
2
3
def squarescaping(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of squares needed along the length and width
8
        num_squares_length = math.ceil(M / A)
9
        num_squares_width = math.ceil(N / A)
10
        # Total number of squares required
11
        results.append(num_squares_length * num_squares_width)
12
    return results
13
14
# Input reading
15
T = int(input())
16
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
17
18
# Processing and output
19
output = squarescaping(test_cases)
20
for result in output:
21
    print(result)
22",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871098
1386871099,yansh985,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def solve():
5
    data = input().splitlines()
6
    idx = 0
7
    T = int(data[idx])
8
    idx += 1
9
    result = []
10
    11
    for _ in range(T):
12
        N = int(data[idx])
13
        idx += 1
14
        A = list(map(int, data[idx].split()))
15
        idx += 1
16
        odd_count = sum(1 for x in A if x % 2 != 0)
17
        if odd_count >= 2:
18
            result.append(""YES"")
19
        else:
20
            result.append(""NO"")
21
    22
    sys.stdout.write(""\n"".join(result) + ""\n"")
23
24
solve()",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871099
1386871091,ansh_vishwa2020,unknown,unknown,"1
def can_partition_odd_sum(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count odd numbers
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        7
        # Check if we can partition
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input reading
15
T = int(input())  # Number of test cases
16
test_cases = []
17
for _ in range(T):
18
    N = int(input())  # Number of integers in the test case
19
    arr = list(map(int, input().split()))  # The integers
20
    test_cases.append((N, arr))
21
22
# Compute results
23
results = can_partition_odd_sum(test_cases)
24
25
# Output results
26
for result in results:
27
    print(result)
28",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871091
1386871094,risshabh022,unknown,unknown,"1
def can_partition_to_odd_product(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        # Count odd and even numbers in the array
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        even_count = N - odd_count
8
9
        # To get an odd product, we need at least one odd number in each subset
10
        if odd_count >= 2:  # We need at least two odd numbers to split between S1 and S2
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
# Input processing
17
T = int(input())
18
test_cases = []
19
for _ in range(T):
20
    N = int(input())
21
    A = list(map(int, input().split()))
22
    test_cases.append((N, A))
23
24
# Calculate and output results
25
results = can_partition_to_odd_product(test_cases)
26
for result in results:
27
    print(result)
28",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871094
1386871093,drashtitalia,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        pieces_along_length = math.ceil(M / A)
8
        pieces_along_width = math.ceil(N / A)
9
        total_pieces = pieces_along_length * pieces_along_width
10
        results.append(total_pieces)
11
    return results
12
13
# Input
14
T = 3
15
test_cases = [
16
    (3, 3, 2),
17
    (4, 5, 9),
18
    (2, 2, 1)
19
]
20
21
# Output the results
22
output = min_cloth_pieces(T, test_cases)
23
for result in output:
24
    print(result)
25",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871093
1386871088,Swarnimmungad,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871088
1386871090,varunfatehpuria2,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        results.append((2 ** n) - 1)
5
    return results
6
T = int(input())
7
test_cases = []
8
for _ in range(T):
9
    N = int(input())
10
    test_cases.append(N)
11
results = count_non_empty_subsets(test_cases)
12
for res in results:
13
    print(res)",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871090
1386871089,anshu_gupta_03,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871089
1386871087,bhaktiakoliya23,unknown,unknown,"1
def count_non_empty_subsets(N):
2
    """"""
3
    Calculates the total number of unique, non-empty subsets that can be formed from a set of N distinct elements.
4
5
    Args:
6
        N: The number of elements in the set.
7
8
    Returns:
9
        The total number of non-empty subsets.
10
    """"""
11
12
    # Calculate the total number of subsets (including the empty set) using 2^N
13
    total_subsets = 2 ** N
14
15
    # Subtract 1 to exclude the empty set
16
    non_empty_subsets = total_subsets - 1
17
18
    return non_empty_subsets
19
20
if _name_ == ""_main_"":
21
    T = int(input())  # Number of test cases
22
23
    for _ in range(T):
24
        N = int(input())  # Number of elements in the set
25
        result = count_non_empty_subsets(N)
26
        print(result)",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871087
1386871082,singhastha182004,unknown,unknown,"1
def count_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
       5
        total_non_empty_subsets = (1 << N) - 1
6
        results.append(total_non_empty_subsets)
7
    return results
8
9
10
T = int(input())
11
test_cases = [int(input()) for _ in range(T)]
12
13
14
results = count_non_empty_subsets(T, test_cases)
15
for result in results:
16
    print(result)",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871082
1386871083,shifalisingh181,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(t, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
       8
        pieces_length = math.ceil(M / A)
9
        pieces_width = math.ceil(N / A)
10
     11
        results.append(pieces_length * pieces_width)
12
    return results
13
14
15
if __name__ == ""__main__"":
16
    T = int(input().strip())
17
    test_cases = []
18
    for _ in range(T):
19
        M, N, A = map(int, input().strip().split())
20
        test_cases.append((M, N, A))
21
    22
   23
    results = minimum_cloth_pieces(T, test_cases)
24
    25
  26
    for result in results:
27
        print(result)",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871083
1386871086,kerissapatel,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def can_partition(test_cases):
5
    results = []
6
    for _, arr in test_cases:
7
        odd_count = sum(1 for x in arr if x % 2 != 0)
8
        # We need at least 2 odd numbers for a valid partition
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Efficient Input Reading
16
data = input().split()
17
T = int(data[0])
18
test_cases = []
19
idx = 1
20
21
for _ in range(T):
22
    N = int(data[idx])
23
    idx += 1
24
    arr = list(map(int, data[idx:idx + N]))
25
    idx += N
26
    test_cases.append((N, arr))
27
28
# Process each test case
29
results = can_partition(test_cases)
30
31
# Output results
32
sys.stdout.write(""\n"".join(results) + ""\n"")
33
34",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871086
1386871080,jaychvn2808,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871080
1386871081,vrushankvyas248,unknown,unknown,"1
import math
2
t = int(input())
3
for i in range(t):
4
    5
    m,n,a = map(int,input().split())
6
    7
    hor = math.ceil(m/a)
8
    ver = math.ceil(n/a)
9
    10
    11
    print(hor*ver)",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871081
1386871077,simran_verma1081,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        rows = math.ceil(M / A)
8
        cols = math.ceil(N / A)
9
        results.append(rows * cols)
10
    return results
11
12
T = int(input())
13
test_cases = []
14
for _ in range(T):
15
    test_cases.append(tuple(map(int, input().split())))
16
17
results = minimum_cloth_pieces(T, test_cases)
18
for result in results:
19
    print(result)",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871077
1386871074,sumeetshah107,unknown,unknown,"1
# Function to calculate the total number of non-empty subsets
2
def count_non_empty_subsets(T, test_cases):
3
    results = []
4
    for N in test_cases:
5
        if N == 0:
6
            results.append(0)  # If the set has 0 elements, no subsets exist
7
        else:
8
            # Total subsets = 2^N, excluding the empty set = 2^N - 1
9
            total_subsets = (2 ** N) - 1
10
            results.append(total_subsets)
11
    return results
12
13
# Input reading
14
T = int(input())  # Number of test cases
15
test_cases = [int(input()) for _ in range(T)]
16
17
# Process and output results
18
results = count_non_empty_subsets(T, test_cases)
19
for result in results:
20
    print(result)
21",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871074
1386871075,bhooomikapal10,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for M, N, A in test_cases:
6
        pieces_length = (M + A - 1) // A  # Equivalent to ceil(M / A)
7
        pieces_width = (N + A - 1) // A  # Equivalent to ceil(N / A)
8
        results.append(pieces_length * pieces_width)
9
    return results
10
11
# Input handling
12
T = int(input())
13
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
14
15
# Solve and print results
16
results = minimum_cloth_pieces(test_cases)
17
for res in results:
18
    print(res)
19",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871075
1386871076,h1032231261,unknown,unknown,"1
# Function to solve each test case
2
def solve(test_cases):
3
    results = []
4
    for case in test_cases:
5
        N, A = case
6
        odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Reading input
14
def main():
15
    T = int(input())  # Read number of test cases
16
    test_cases = []
17
    18
    for _ in range(T):
19
        N = int(input())  # Read number of integers in the current test case
20
        A = list(map(int, input().split()))  # Read the list of integers
21
        test_cases.append((N, A))
22
    23
    # Solve the test cases
24
    results = solve(test_cases)
25
    26
    # Output the results
27
    print(""\n"".join(results))
28
29
# Run the program
30
if __name__ == ""__main__"":
31
    main()
32",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871076
1386871073,jharishabh2k3,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
3
import math
4
i = int(input())
5
while i:
6
    j = int(input())
7
    print(int(math.pow(2, j) - 1))
8
    i -= 1",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871073
1386871070,rishabhstudy59,unknown,unknown,"1
T = int(input())
2
for _ in range(T):
3
    N = int(input())
4
    print((1 << N) - 1)
5",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871070
1386871071,ashrafsshaikh7,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ClothvilleTailor {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        for (int t = 0; t < T; t++) {
8
            long M = scanner.nextLong();
9
            long N = scanner.nextLong();
10
            long A = scanner.nextLong();
11
            long lp = (M + A - 1) / A;
12
            long wp = (N + A - 1) / A;
13
            long tp = lp * wp;
14
            System.out.println(tp);
15
        }
16
        scanner.close();
17
    }
18
}",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871071
1386871072,vedikakolambkar,unknown,unknown,"1
def min_cloth_pieces(m,n,a):
2
    return ((m+a-1)//a)*((n+a-1)//a)
3
t=int(input())
4
for _ in range(t):
5
    m,n,a=map(int,input().split())
6
    print(min_cloth_pieces(m,n,a))",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871072
1386871068,aryannimkar206,unknown,unknown,"1
def solve():
2
    t = int(input())
3
    for _ in range(t):
4
        n = int(input())
5
        6
        print(2**n - 1)
7
8
solve()",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871068
1386871066,shreyaojha2,unknown,unknown,"1
def solve_test_cases(N, A):
2
    odd_counts = sum(1 for x in A if x % 2 == 1)
3
    4
    if odd_counts >= 2 and N >= 2:
5
        return ""YES""
6
    return ""NO""
7
8
T = int(input())
9
for _ in range(T):
10
    N = int(input())
11
    A = list(map(int, input().split()))
12
    print(solve_test_cases(N, A))",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871066
1386871069,ravijeetsharma11,unknown,unknown,"1
#include <bits/stdc++.h>
2
#include <math.h>
3
using namespace std;
4
5
6
int main(){
7
    int t;
8
    cin >> t;
9
    while(t--){
10
       double m, n, a, r, c;
11
       cin >> m >> n >> a;
12
13
        r = ceil(m/a);
14
        c = ceil(n/a);
15
       cout << r*c << endl;
16
    }
17
18
    return 0;
19
}
20
21
22",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871069
1386871063,agrajat07,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(T, test_cases):
4
    resultt = []
5
    for case in test_cases:
6
        M, N, A = case
7
        rows = math.ceil(M / A)
8
        cols = math.ceil(N / A)
9
        resultt.append(rows * cols)
10
    return resultt
11
12
T = int(input())
13
test_cases = []
14
for _ in range(T):
15
    test_cases.append(tuple(map(int, input().split())))
16
17
resultt = minimum_cloth_pieces(T, test_cases)
18
for result in resultt:
19
    print(resultt)",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871063
1386871064,dhirajkalwar57,unknown,unknown,"1
def cloths(M,N,A):
2
    p_length = (M + A -1) // A
3
    p_width = (N + A - 1) // A
4
    5
    return p_length * p_width
6
7
T = int(input())
8
for _ in range(T):
9
    M,N,A = map(int, input().split())
10
    print(cloths(M,N,A))",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871064
1386871065,Rawat_vr44,unknown,unknown,"1
# Read input
2
t = int(input())  # Number of test cases
3
results = []
4
5
for _ in range(t):
6
    n = int(input())  # Number of elements in the set
7
    results.append(2**n - 1)  # Calculate non-empty subsets
8
9
# Print results
10
for result in results:
11
    print(result)
12",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871065
1386871062,ollaamit2004,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces required
4
def calculate_cloth_pieces(m, n, a):
5
    # Calculate the number of pieces required along the length and width
6
    length_pieces = math.ceil(m / a)
7
    width_pieces = math.ceil(n / a)
8
    # Total pieces needed is the product of the two
9
    return length_pieces * width_pieces
10
11
# Main function to process input and output results
12
def main():
13
    # Number of test cases
14
    t = int(input())
15
    results = []
16
    for _ in range(t):
17
        # Input M, N, A
18
        m, n, a = map(int, input().split())
19
        # Calculate the result for each test case
20
        results.append(calculate_cloth_pieces(m, n, a))
21
    22
    # Output all results
23
    for result in results:
24
        print(result)
25
26
# Run the program
27
if __name__ == ""__main__"":
28
    main()
29",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871062
1386871059,amansharmaa1205,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",132,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871059
1386871061,abhijeetjha913,unknown,unknown,"1
def calculate_minimum_squares(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        length_squares = (M + A - 1) // A
5
        width_squares = (N + A - 1) // A
6
        total_squares = length_squares * width_squares
7
        results.append(total_squares)
8
    return results
9
10
11
T = int(input())
12
test_cases = []
13
for _ in range(T):
14
    M, N, A = map(int, input().split())
15
    test_cases.append((M, N, A))
16
17
18
results = calculate_minimum_squares(test_cases)
19
for res in results:
20
    print(res)",132,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871061
1386871060,h1032220223,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",132,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871060
1386871054,h1032220765,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",132,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871054
1386871056,dny9136833946,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
   7
    public static int minClothPieces(int M, int N, int A) {
8
      9
        int piecesLength = (M + A - 1) / A;  
10
        int piecesWidth = (N + A - 1) / A;  
11
        return piecesLength * piecesWidth;
12
    }
13
14
    public static void main(String[] args) throws IOException {
15
        16
        Scanner sc = new Scanner(System.in);
17
        int T = sc.nextInt();
18
19
        // Process each test case
20
        for (int i = 0; i < T; i++) {
21
            int M = sc.nextInt();
22
            int N = sc.nextInt();
23
            int A = sc.nextInt();
24
25
            System.out.println(minClothPieces(M, N, A));
26
        }
27
28
        sc.close();
29
    }
30
}
31",132,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871056
1386871058,antara4210,unknown,unknown,"1
t = int(input().strip())
2
for _ in range(t):
3
    n = int(input().strip())
4
    # Number of non-empty subsets = 2^n - 1
5
    print((1 << n) - 1)",132,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871058
1386871051,amir_kamal09,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",132,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871051
1386871052,tanishqraj2112,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
bool solve(vector<int>& A) {
9
    int oddCount = 0;
10
    for(int x : A) {
11
        if(x % 2 == 1) oddCount++;
12
    }
13
    return oddCount >= 2;
14
}
15
16
int main() {
17
    int T;
18
    cin >> T;
19
    while(T--) {
20
        int N;
21
        cin >> N;
22
        vector<int> A(N);
23
        for(int i = 0; i < N; i++) cin >> A[i];
24
        cout << (solve(A) ? ""YES"" : ""NO"") << endl;
25
    }
26
    return 0;
27
}",132,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871052
1386871053,kartikmaurya18,unknown,unknown,"1
import java.util.Scanner;
2
3
public class OddProductPartition {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
10
        for (int t = 0; t < T; t++) {
11
            // Read the size of the array
12
            int N = scanner.nextInt();
13
            int[] array = new int[N];
14
15
            // Read the array elements
16
            int oddCount = 0;
17
            for (int i = 0; i < N; i++) {
18
                array[i] = scanner.nextInt();
19
                if (array[i] % 2 != 0) {
20
                    oddCount++;
21
                }
22
            }
23
24
            // Check if we can partition into two subsequences
25
            if (oddCount >= 2) {
26
                System.out.println(""YES"");
27
            } else {
28
                System.out.println(""NO"");
29
            }
30
        }
31
32
        scanner.close();
33
    }
34
}
35",132,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871053
1386871050,ayushkhanal47,unknown,unknown,"1
import math
2
3
4
def calculate_cloth_pieces(M, N, A):
5
    6
    num_pieces_length = (M + A - 1) // A
7
    num_pieces_width = (N + A - 1) // A
8
    9
    return num_pieces_length * num_pieces_width
10
11
T = int(input())
12
13
for _ in range(T):
14
    M, N, A = map(int, input().split())
15
    result = calculate_cloth_pieces(M, N, A)
16
    17
    print(result)",132,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871050
1386871047,drashtitalia,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        pieces_along_length = math.ceil(M / A)
8
        pieces_along_width = math.ceil(N / A)
9
        total_pieces = pieces_along_length * pieces_along_width
10
        results.append(total_pieces)
11
    return results
12
13
# Input
14
T = 3
15
test_cases = [
16
    (3, 3, 2),
17
    (4, 5, 9),
18
    (2, 2, 1)
19
]
20
21
# Output the results
22
output = min_cloth_pieces(T, test_cases)
23
for result in output:
24
    print(result)
25",133,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871047
1386871048,pandeyrishabh966,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
11
        int t;
12
    cin >> t;
13
    14
    while(t--) {
15
        int n;
16
        cin >> n;
17
   18
        cout << (1LL << n) - 1 << endl;
19
    }
20
    return 0;
21
}
22",133,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871048
1386871049,h1032221690,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",133,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871049
1386871044,sanjanasharma191,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",133,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871044
1386871045,h1032221064,unknown,unknown,"1
def min_cloth_pieces(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        M, N, A = test_cases[i]
5
        rows = (M + A - 1) // A  # Ceiling of M / A
6
        cols = (N + A - 1) // A  # Ceiling of N / A
7
        results.append(rows * cols)
8
    return results
9
10
# Input
11
T = int(input())
12
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
13
14
# Solve and Output
15
results = min_cloth_pieces(T, test_cases)
16
print(""\n"".join(map(str, results)))",133,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871045
1386871046,h1032221626,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def solve():
5
    data = input().splitlines()
6
    result = []
7
    index = 0
8
    T = int(data[index])  
9
    index += 1
10
    for _ in range(T):
11
        N = int(data[index])  
12
        index += 1
13
        A = list(map(int, data[index].split()))  
14
        index += 1
15
16
        odd_count = sum(1 for x in A if x % 2 != 0)
17
        18
     19
        if odd_count >= 2:
20
            result.append(""YES"")
21
        else:
22
            result.append(""NO"")
23
    24
    sys.stdout.write(""\n"".join(result) + ""\n"")
25
26
solve()",133,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871046
1386871041,saumyamurkya,unknown,unknown,"1
def can_partition(N, A):
2
    # Count odd and even numbers
3
    odd_count = sum(1 for x in A if x % 2 == 1)
4
    even_count = N - odd_count
5
    6
    # If there's exactly one odd number, we can't make an odd product
7
    # Because all possible partitions will have one odd sum and one even sum
8
    if odd_count <= 1:
9
        return False
10
        11
    # If we have 2 or more odd numbers, we can always make odd product
12
    # by putting two odd numbers in one partition and rest in another
13
    return True
14
15
# Process input
16
T = int(input())
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    print(""YES"" if can_partition(N, A) else ""NO"")
21",133,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871041
1386871042,keyurchauhan15,unknown,unknown,"1
def num_non_empty_subsets(n):
2
    """"""
3
    Calculates the number of non-empty subsets for a set of n elements.
4
5
    Args:
6
        n: The number of elements in the set.
7
8
    Returns:
9
        The number of non-empty subsets.
10
    """"""
11
    return 2**n - 1  # Total subsets (2^n) minus the empty set
12
13
if __name__ == ""__main__"":
14
    T = int(input())
15
16
    for _ in range(T):
17
        N = int(input())
18
        result = num_non_empty_subsets(N)
19
        print(result)",133,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871042
1386871043,singhyatharthsn,unknown,unknown,"1
def can_partition_odd_multiplication(nums):
2
    results = []
3
    for n, arr in nums:
4
        odd_count = sum(1 for x in arr if x % 2 != 0)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
12
T = int(input())
13
input_arr = []
14
for _ in range(T):
15
    n = int(input())
16
    arr = list(map(int, input().split()))
17
    input_arr.append((n, arr))
18
19
results = can_partition_odd_multiplication(input_arr)
20
21
for result in results:
22
    print(result)
23",133,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871043
1386871040,shiroryou,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",133,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871040
1386871036,sanketram75,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",134,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871036
1386871039,atharvatripathi8,unknown,unknown,"1
# Read input
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    N = int(input())  # Number of elements in the array
7
    A = list(map(int, input().split()))  # The array of integers
8
    9
    # Count the number of odd integers
10
    odd_count = sum(1 for x in A if x % 2 == 1)
11
    12
    # Determine if partitioning is possible
13
    if odd_count >= 2:  # At least two odd numbers are required
14
        results.append(""YES"")
15
    else:
16
        results.append(""NO"")
17
18
# Print results for each test case
19
for result in results:
20
    print(result)
21",134,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871039
1386871037,jashbarot05,unknown,unknown,"1
def can_partition_odd_product(N, A):
2
    # Count odd and even numbers
3
    odd_count = sum(1 for x in A if x % 2 == 1)
4
    even_count = N - odd_count
5
    6
    # For sum to be odd, need odd number of odd numbers
7
    # Need both sums to be odd for their product to be odd
8
    9
    # If we have less than 2 odd numbers, we can't make two odd sums
10
    if odd_count < 2:
11
        return False
12
        13
    # If we have enough odd numbers, we can always partition to get two odd sums
14
    # We need at least one partition to have odd number of odd numbers
15
    if odd_count >= 2:
16
        return True
17
        18
    return False
19
20
# Read number of test cases
21
T = int(input())
22
23
for _ in range(T):
24
    # Read array size
25
    N = int(input())
26
    # Read array
27
    A = list(map(int, input().split()))
28
    29
    # Print result
30
    print(""YES"" if can_partition_odd_product(N, A) else ""NO"")",134,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871037
1386871032,sakshi_sneh09,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",134,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871032
1386871035,ansh_vishwa2020,unknown,unknown,"1
def can_partition_odd_sum(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count odd numbers
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        7
        # If there are at least 2 odd numbers, partition is possible
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input reading
15
T = int(input())  # Number of test cases
16
test_cases = []
17
for _ in range(T):
18
    N = int(input())  # Number of integers in the test case
19
    arr = list(map(int, input().split()))  # The integers
20
    test_cases.append((N, arr))
21
22
# Compute results
23
results = can_partition_odd_sum(test_cases)
24
25
# Output results
26
for result in results:
27
    print(result)
28",134,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871035
1386871034,vikasmourya54321,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    ios::sync_with_stdio(false);
11
    cin.tie(nullptr);
12
13
    int T;
14
    cin >> T;
15
16
    while (T--) {
17
        int N;
18
        cin >> N;
19
        vector<int> A(N);
20
21
        int odd_count = 0;
22
        for (int i = 0; i < N; i++) {
23
            cin >> A[i];
24
            if (A[i] % 2 != 0) {
25
                odd_count++;
26
            }
27
        }
28
29
        30
        if (odd_count >= 2) {
31
            cout << ""YES\n"";
32
        } else {
33
            cout << ""NO\n"";
34
        }
35
    }
36
37
    return 0;
38
}
39",134,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871034
1386871027,tripathiayush161,unknown,unknown,"1
def can_partition_for_odd_product(arr):
2
    odd_count = 0
3
    for num in arr:
4
        if num % 2 != 0:
5
            odd_count += 1
6
    return odd_count > 1
7
8
if __name__ == ""__main__"":
9
    t = int(input()) 
10
11
    for _ in range(t):
12
        n = int(input()) 
13
        arr = list(map(int, input().split()))
14
15
        if can_partition_for_odd_product(arr):
16
            print(""YES"")
17
        else:
18
            print(""NO"")",134,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871027
1386871030,ravijeetsharma11,unknown,unknown,"1
#include <bits/stdc++.h>
2
#include <math.h>
3
using namespace std;
4
5
6
int main(){
7
    int t;
8
    cin >> t;
9
    while(t--){
10
       double m, n, a;
11
       cin >> m >> n >> a;
12
13
       float r = ceil(m/a);
14
       float c = ceil(n/a);
15
       cout << r*c << endl;
16
    }
17
18
    return 0;
19
}
20
21
22",134,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871030
1386871031,nsnihalgoud123,unknown,unknown,"1
import math
2
3
T = int(input())
4
5
for _ in range(T):
6
    M,N,A = map(int,input().split())
7
    8
    clothM = math.ceil(M/A)
9
    clothN = math.ceil(N/A)
10
    result = clothM*clothN
11
    print(result)
12
    ",134,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871031
1386871026,hy025u,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",134,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871026
1386871022,sakshimashalkar1,unknown,unknown,"1
def can_partition():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
    6
    idx = 0
7
    T = int(data[idx])  # Number of test cases
8
    idx += 1
9
    results = []
10
    11
    for _ in range(T):
12
        N = int(data[idx])  # Number of integers in the current test case
13
        idx += 1
14
        A = list(map(int, data[idx:idx + N]))
15
        idx += N
16
        17
        # Count odd numbers
18
        odd_count = sum(1 for x in A if x % 2 != 0)
19
        20
        # If there are at least 2 odd numbers, we can split into two subsequences with odd sums
21
        if odd_count >= 2:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    # Output all results at once
27
    sys.stdout.write(""\n"".join(results) + ""\n"")
28
29
# Run the function
30
can_partition()
31",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871022
1386871025,h1032220619,unknown,unknown,"1
def can_partition_with_odd_product(n, arr):
2
 3
    odd_count = sum(1 for x in arr if x % 2 == 1)
4
5
    return ""YES"" if odd_count >= 2 else ""NO""
6
7
8
import sys
9
input = sys.stdin.read
10
data = input().split()
11
12
T = int(data[0]) 
13
results = []
14
index = 1
15
16
for _ in range(T):
17
    N = int(data[index])  
18
    A = list(map(int, data[index + 1:index + 1 + N]))
19
    index += 1 + N
20
21
    results.append(can_partition_with_odd_product(N, A))
22
23
24
sys.stdout.write(""\n"".join(results) + ""\n"")
25",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871025
1386871021,gagandeepbhakuni,unknown,unknown,"1
def calculate_non_empty_subsets():
2
    # Read the number of test cases
3
    T = int(input())
4
5
    results = []
6
7
    for _ in range(T):
8
        # Read the value of N for the current test case
9
        N = int(input())
10
        11
        # Calculate the total number of non-empty subsets: (2^N) - 1
12
        total_subsets = (1 << N) - 1  # Bitwise left shift equivalent to 2^N
13
        14
        results.append(total_subsets)
15
16
    # Print all results for each test case
17
    for result in results:
18
        print(result)
19
20
# Call the function to execute
21
calculate_non_empty_subsets()
22",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871021
1386871015,vartikau8,unknown,unknown,"1
# Input number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    # Input the size of the array
7
    N = int(input())
8
    # Input the array
9
    A = list(map(int, input().split()))
10
    11
    # Count the number of odd numbers
12
    odd_count = sum(1 for x in A if x % 2 != 0)
13
    14
    # Check if there are at least two odd numbers
15
    if odd_count >= 2:
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Output the results
21
print(""\n"".join(results))",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871015
1386871016,siddharthbabel01,unknown,unknown,"1
// Problem: Squarescaping
2
// Contest: HackerRank - TCET Shastra Coding Contest 1-A
3
// URL: https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping
4
// Memory Limit: 512 MB
5
// Time Limit: 4000 ms
6
// 
7
// Powered by CP Editor (https://cpeditor.org)
8
9
#include <bits/stdc++.h>
10
using namespace std;
11
#define FAST_IO             (ios_base:: sync_with_stdio(false),cin.tie(NULL));
12
13
//stls
14
#define pii                 pair<int, int>
15
#define vi                  vector<int>
16
#define vll                 vector<ll>
17
#define vvi                 vector<vector<int>>
18
#define vvl                 vector<vector<ll>>
19
20
// Short forms
21
#define ll                  long long
22
#define ull                 unsigned long long
23
#define nl                  '\n'
24
#define ff                  first
25
#define ss                  second
26
#define all(x)              x.begin(), x.end()
27
#define sz(x)               (int)(x).size()
28
#define pb                  push_back
29
#define mp                  make_pair
30
31
32
////////////////////////////////////////////////////////////////
33
34
void solve()
35
{
36
    long m,n,a;
37
    cin>>m>>n>>a;
38
    long long l = ((m+a-1)/a);
39
    long long w = ((n+a-1)/a);
40
    long res = l*w;
41
    cout<< res<<endl;
42
    43
}
44
45
46
47
int main()
48
{
49
    FAST_IO;
50
    int TC = 1;
51
    cin >> TC;
52
    while (TC--) solve();
53
}",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871016
1386871017,ts9892singh,unknown,unknown,"1
def can_partition_to_odd_product(nums):
2
    # Efficiently count the number of odd numbers in the list
3
    odd_count = 0
4
    for num in nums:
5
        if num % 2 == 1:
6
            odd_count += 1
7
    8
    # To form two subsequences with odd sums, we need at least two odd numbers
9
    return ""YES"" if odd_count >= 2 else ""NO""
10
11
def main():
12
    import sys
13
    input = sys.stdin.read  # Use read() for faster input handling
14
    data = input().splitlines()  # Read all input at once
15
    16
    T = int(data[0])  # Number of test cases
17
    index = 1  # Start reading the input from the second line
18
    19
    results = []
20
    for _ in range(T):
21
        N = int(data[index])  # Number of integers (not directly used)
22
        nums = list(map(int, data[index + 1].split()))  # The list of integers
23
        results.append(can_partition_to_odd_product(nums))  # Store result
24
        index += 2  # Move to the next test case
25
    26
    # Output all results at once
27
    sys.stdout.write(""\n"".join(results) + ""\n"")
28
29
if __name__ == ""__main__"":
30
    main()
31",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871017
1386871012,anshu_gupta_03,unknown,unknown,"1
def can_partition_to_odd_product(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        if odd_count >= 2:
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
    return results
11
12
# Input processing
13
t = int(input())  # Number of test cases
14
test_cases = []
15
for _ in range(t):
16
    n = int(input())  # Number of integers
17
    arr = list(map(int, input().split()))  # Array
18
    test_cases.append((n, arr))
19
20
# Output results
21
for result in can_partition_to_odd_product(test_cases):
22
    print(result)
23",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871012
1386871013,shuklapallavi76,unknown,unknown,"1
t=int(input())
2
for _ in range(t):
3
    n = int(input())
4
    arr = list(map(int, input().split()))
5
    odd_count = sum(1 for x in arr if x % 2 == 1)
6
    even_count = n - odd_count
7
    if odd_count >= 2:
8
        print(""YES"")
9
    else:
10
        print(""NO"")",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871013
1386871014,dipanjaliprajap1,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    for _ in range(T):
4
        M, N, A = map(int, input().split())  # Dimensions of the land and cloth size
5
        # Calculate the number of cloth pieces needed for the length (M)
6
        num_pieces_length = (M + A - 1) // A
7
        # Calculate the number of cloth pieces needed for the width (N)
8
        num_pieces_width = (N + A - 1) // A
9
        # Total number of cloth pieces required
10
        total_pieces = num_pieces_length * num_pieces_width
11
        # Output the result
12
        print(total_pieces)
13
14
# Call the solve function to run the code
15
solve()
16
17
18",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871014
1386871011,jhaneeharika,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while (T--) {
12
        long long M, N, A;
13
        cin >> M >> N >> A;
14
        long long squares_M = (M + A - 1) / A;
15
        long long squares_N = (N + A - 1) / A;
16
        cout << squares_M * squares_N << endl;
17
    }
18
    return 0;
19
}
20",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871011
1386871008,mishraaditya12a,unknown,unknown,"1
import math
2
T = int(input())
3
res = []
4
for _ in range(T):
5
    M, N, A = map(int, input().split())
6
    r = (M + A - 1) // A 
7
    c = (N + A - 1) // A 
8
    res.append(r * c)
9
for result in res:
10
    print(result)",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871008
1386871007,singhalokkumar61,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
       public static void main(String[] args) throws IOException {
7
        8
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
9
        int T = Integer.parseInt(br.readLine()); 
10
        11
        StringBuilder output = new StringBuilder();
12
        for (int t = 0; t < T; t++) {
13
            int N = Integer.parseInt(br.readLine());
14
            15
            16
            long result = (1L << N) - 1; 
17
            18
            output.append(result).append(""\n"");
19
        }
20
        21
        System.out.print(output);
22
    }
23
}",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871007
1386871009,ravi942004,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871009
1386871003,shreyaojha2,unknown,unknown,"1
def solve_test_cases(N):
2
    return (1 << N) - 1 
3
4
T = int(input())
5
for _ in range(T):
6
    N = int(input())
7
    print(solve_test_cases(N))",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871003
1386871005,parshadk04,unknown,unknown,"1
def can_partition(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        total_sum = sum(A)
6
        odd_count = sum(1 for x in A if x % 2 == 1)
7
        8
        if total_sum % 2 == 0 and odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
T = int(input())
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())
18
    A = list(map(int, input().split()))
19
    test_cases.append((N, A))
20
21
output = can_partition(T, test_cases)
22
for result in output:
23
    print(result)
24",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871005
1386871006,h1032221050,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
def min_cloth_pieces(T, test_cases):
3
    results = []
4
    for i in range(T):
5
        M, N, A = test_cases[i]
6
        rows = (M + A - 1) // A  # Ceiling of M / A
7
        cols = (N + A - 1) // A  # Ceiling of N / A
8
        results.append(rows * cols)
9
    return results
10
11
# Input
12
T = int(input())
13
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
14
15
# Solve and Output
16
results = min_cloth_pieces(T, test_cases)
17
print(""\n"".join(map(str, results)))",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871006
1386871000,nayaktanmayg,unknown,unknown,"1
def is_partition_possible(arr):
2
    odd_count = 0
3
    for num in arr:
4
        if num % 2 == 1:
5
            odd_count += 1
6
    return odd_count >= 2
7
8
t = int(input())
9
10
for _ in range(t):
11
    n = int(input())
12
    arr = list(map(int, input().split()))
13
    if is_partition_possible(arr):
14
        print(""YES"")
15
    else:
16
        print(""NO"")
17
        ",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871000
1386871002,neupanepratik65,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    M, N, A = map(int, input().split())
5
    rows_needed = (M + A - 1) // A
6
    cols_needed = (N + A - 1) // A
7
    print(rows_needed * cols_needed)",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871002
1386870999,ks4556737,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
7
    public static void main(String[] args) {
8
        Scanner scanner = new Scanner(System.in);
9
        int T = scanner.nextInt();
10
        for (int t = 0; t < T; t++) {
11
            long M = scanner.nextLong();
12
            long N = scanner.nextLong();
13
            long A = scanner.nextLong();
14
            long lengthPieces = (M + A - 1) / A;
15
            long widthPieces = (N + A - 1) / A;
16
            long totalPieces = lengthPieces * widthPieces;
17
            System.out.println(totalPieces);
18
        }
19
        scanner.close();
20
    21
}
22
}",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870999
1386870998,Radhikadevi55,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
    3
    aLength = (M + A - 1) // A
4
    aWidth = (N + A - 1) // A
5
    6
    return aLength * aWidth
7
8
T = int(input())
9
for _ in range(T):
10
    M, N, A = map(int, input().split())
11
    print(min_cloth_pieces(M, N, A))",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870998
1386870995,h1032221032,unknown,unknown,"1
def calculate_min_cloth_pieces(M,N,A):
2
    pieces_length = (M + A - 1)//A
3
    pieces_width = (N + A -1)//A
4
    5
    return pieces_length*pieces_width
6
7
T = int(input())
8
for _ in range(T):
9
    M,N,A = map(int,input().split())
10
    print(calculate_min_cloth_pieces(M,N,A))
11",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870995
1386870996,ishakbtech,unknown,unknown,"1
def cal_min_cloth_piece(M,N,A):
2
    pieces_length = (M+A-1)//A
3
    pieces_width = (N+A-1)//A
4
    return pieces_length*pieces_width
5
T= int(input())
6
for _ in range(T):
7
    M,N,A = map(int, input().split())
8
    print(cal_min_cloth_piece(M,N,A))",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870996
1386870997,h1032221768,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, A = test_cases[t]
5
        # Count the number of odd elements
6
        odd_count = 0
7
        for x in A:
8
            if x % 2 != 0:
9
                odd_count += 1
10
        # Check if we have at least two odd numbers
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    return results
16
17
# Input reading
18
import sys
19
input = sys.stdin.read
20
data = input().split()
21
22
T = int(data[0])  # Number of test cases
23
test_cases = []
24
idx = 1
25
26
for _ in range(T):
27
    N = int(data[idx])  # Number of elements in the array
28
    idx += 1
29
    A = list(map(int, data[idx:idx + N]))
30
    idx += N
31
    test_cases.append((N, A))
32
33
# Process test cases
34
results = can_partition_odd_product(T, test_cases)
35
36
# Output results
37
sys.stdout.write(""\n"".join(results) + ""\n"")
38",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870997
1386870992,tarang_rathod,unknown,unknown,"1
t = int(input().strip())
2
for _ in range(t):
3
    n = int(input().strip())
4
    # Number of non-empty subsets = 2^n - 1
5
    print((1 << n) - 1)
6
7",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870992
1386870993,kerissapatel,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def can_partition(test_cases):
5
    results = []
6
    for n, arr in test_cases:
7
        odd_count = sum(1 for x in arr if x % 2 != 0)
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Efficient Input Reading
15
data = input().split()
16
T = int(data[0])
17
test_cases = []
18
idx = 1
19
20
for _ in range(T):
21
    N = int(data[idx])
22
    idx += 1
23
    arr = list(map(int, data[idx:idx + N]))
24
    idx += N
25
    test_cases.append((N, arr))
26
27
# Process each test case
28
results = can_partition(test_cases)
29
30
# Output results
31
sys.stdout.write(""\n"".join(results) + ""\n"")
32",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870993
1386870994,h1032220856,unknown,unknown,"1
def can_partition_with_odd_product(T, test_cases):
2
    results = []
3
    4
    for i in range(T):
5
        N, A = test_cases[i]
6
        7
        # Count the number of odd numbers in A
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # If there are at least two odd numbers, the answer is ""YES""
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())  # Number of test cases
20
test_cases = []
21
22
for _ in range(T):
23
    N = int(input())  # Size of the array
24
    A = list(map(int, input().split()))  # The array itself
25
    test_cases.append((N, A))
26
27
# Get the results for each test case
28
results = can_partition_with_odd_product(T, test_cases)
29
30
# Output the results
31
for result in results:
32
    print(result)
33
34",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870994
1386870989,tanishqraj2112,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
bool solve(vector<int>& A) {
9
    int n = A.size();
10
    for(int mask = 1; mask < (1 << n) - 1; mask++) {
11
        int sum1 = 0, sum2 = 0;
12
        for(int i = 0; i < n; i++) {
13
            if(mask & (1 << i)) sum1 += A[i];
14
            else sum2 += A[i];
15
        }
16
        if((sum1 % 2 == 1) && (sum2 % 2 == 1)) return true;
17
    }
18
    return false;
19
}
20
21
int main() {
22
    int T;
23
    cin >> T;
24
    while(T--) {
25
        int N;
26
        cin >> N;
27
        vector<int> A(N);
28
        for(int i = 0; i < N; i++) cin >> A[i];
29
        cout << (solve(A) ? ""YES"" : ""NO"") << endl;
30
    }
31
    return 0;
32
}",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870989
1386870990,h1032221611,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        long long M, N, A;
11
        cin >> M >> N >> A;
12
13
        long long piecesInLength = (M + A - 1) / A;
14
        long long piecesInWidth = (N + A - 1) / A;
15
16
        long long totalPieces = piecesInLength * piecesInWidth;
17
        cout << totalPieces << endl;
18
    }
19
20
    return 0;
21
}",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870990
1386870991,sp488830,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
10
int main() {
11
    int T;
12
    cin >> T;
13
    14
    while (T--) {
15
        int N;
16
        cin >> N;
17
        vector<int> arr(N);
18
        19
        for (int i = 0; i < N; ++i) {
20
            cin >> arr[i];
21
        }
22
        23
        int odd_count = 0;
24
        int total_sum = 0;
25
        26
        for (int i = 0; i < N; ++i) {
27
            total_sum += arr[i];
28
            if (arr[i] % 2 != 0) {
29
                odd_count++;
30
            }
31
        }
32
        33
        if (total_sum % 2 != 0) {
34
            cout << ""NO"" << endl;
35
        } else {
36
            if (odd_count >= 2) {
37
                cout << ""YES"" << endl;
38
            } else {
39
                cout << ""NO"" << endl;
40
            }
41
        }
42
    }
43
    44
    return 0;
45
}
46",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870991
1386870988,riddhijoshi5900,unknown,unknown,"1
def min_cloth_pieces(t_cases):
2
    results = []
3
    for case in t_cases:
4
        M, N, A = case
5
        length = (M + A - 1) // A
6
        width = (N + A - 1) // A
7
        total_pieces = length * width
8
        results.append(total_pieces)
9
    return results
10
11
T = int(input())
12
t_cases = []
13
for _ in range(T):
14
    M, N, A = map(int, input().split())
15
    t_cases.append((M, N, A))
16
17
results = min_cloth_pieces(t_cases)
18
for result in results:
19
    print(result)",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870988
1386870982,h1032220850,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int T; // Number of test cases
7
    cin >> T;
8
9
    while (T--) {
10
        int N; // Number of elements in the set
11
        cin >> N;
12
13
        // Calculate the number of non-empty subsets
14
        long long result = (1LL << N) - 1; // Using bit-shifting for 2^N - 1
15
16
        // Output the result for this test case
17
        cout << result << endl;
18
    }
19
20
    return 0;
21
}",138,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870982
1386870983,sethdharmik5,unknown,unknown,"1
import java.util.*;
2
3
public class PartitionOddProduct {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
7
    8
        int T = sc.nextInt();
9
        10
        while (T-- > 0) {
11
           12
            int N = sc.nextInt();
13
            14
            15
            int[] arr = new int[N];
16
            for (int i = 0; i < N; i++) {
17
                arr[i] = sc.nextInt();
18
            }
19
20
        21
            if (canPartition(arr)) {
22
                System.out.println(""YES"");
23
            } else {
24
                System.out.println(""NO"");
25
            }
26
        }
27
        sc.close();
28
    }
29
30
    private static boolean canPartition(int[] arr) {
31
        32
        int oddCount = 0;
33
        int evenCount = 0;
34
35
        for (int num : arr) {
36
            if (num % 2 == 0) {
37
                evenCount++;
38
            } else {
39
                oddCount++;
40
            }
41
        }
42
43
        return oddCount >= 2;
44
    }
45
}
46",138,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870983
1386870985,shravantiwari281,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)
7",138,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870985
1386870978,tiwarikhushi907,unknown,unknown,"1
def can_partition(arr):
2
    # Count odd numbers
3
    odd_count = sum(1 for x in arr if x % 2 == 1)
4
    return ""YES"" if odd_count >= 2 else ""NO""
5
6
# Process input
7
t = int(input())
8
for _ in range(t):
9
    n = int(input())
10
    arr = list(map(int, input().split()))
11
    print(can_partition(arr))",138,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870978
1386870980,majorsecretx,unknown,unknown,"1
def num_non_empty_subsets(n):
2
    total_subsets = 2 ** n
3
    return total_subsets - 1
4
5
if __name__ == ""__main__"":
6
    T = int(input())  
7
8
    for _ in range(T):
9
        N = int(input()) 
10
        print(num_non_empty_subsets(N))",138,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870980
1386870981,psthefreak,unknown,unknown,"1
2
3
def can_partition(N, A):
4
    # Count odd and even numbers
5
    odd_count = sum(1 for x in A if x % 2 == 1)
6
    even_count = N - odd_count
7
    8
    # If there's exactly one odd number, we can't make an odd product
9
    # Because all possible partitions will have one odd sum and one even sum
10
    if odd_count <= 1:
11
        return False
12
        13
    # If we have 2 or more odd numbers, we can always make odd product
14
    # by putting two odd numbers in one partition and rest in another
15
    return True
16
17
# Process input
18
T = int(input())
19
for _ in range(T):
20
    N = int(input())
21
    A = list(map(int, input().split()))
22
    print(""YES"" if can_partition(N, A) else ""NO"")",138,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870981
1386870974,abhijeetjha913,unknown,unknown,"1
def calculate_minimum_squares(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        length_squares = (M + A - 1) // A
5
        width_squares = (N + A - 1) // A
6
        total_squares = length_squares * width_squares
7
        results.append(total_squares)
8
    return results
9
10
# Input
11
T = int(input())
12
test_cases = []
13
for _ in range(T):
14
    M, N, A = map(int, input().split())
15
    test_cases.append((M, N, A))
16
17
# Solve and Output
18
results = calculate_minimum_squares(test_cases)
19
for res in results:
20
    print(res)",138,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870974
1386870977,gharshit2502,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(T, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        M, N, A = case
8
        # Calculate the number of pieces required to cover the height (M)
9
        height_pieces = math.ceil(M / A)
10
        # Calculate the number of pieces required to cover the width (N)
11
        width_pieces = math.ceil(N / A)
12
        13
        # Total cloth pieces required
14
        total_pieces = height_pieces * width_pieces
15
        results.append(total_pieces)
16
    17
    return results
18
19
# Input reading
20
T = int(input())  # Number of test cases
21
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
22
23
# Compute and output the results
24
results = min_cloth_pieces(T, test_cases)
25
for result in results:
26
    print(result)
27
    28",138,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870977
1386870973,ts9892singh,unknown,unknown,"1
def can_partition_to_odd_product(nums):
2
    # Efficiently count the number of odd numbers in the list
3
    odd_count = 0
4
    for num in nums:
5
        if num % 2 == 1:
6
            odd_count += 1
7
    8
    # To form two subsequences with odd sums, we need at least two odd numbers
9
    return ""YES"" if odd_count >= 2 else ""NO""
10
11
def main():
12
    import sys
13
    input = sys.stdin.read  # Use read() for faster input handling
14
    data = input().splitlines()  # Read all input at once
15
    16
    T = int(data[0])  # Number of test cases
17
    index = 1  # Start reading the input from the second line
18
    19
    results = []
20
    for _ in range(T):
21
        N = int(data[index])  # Number of integers (not directly used)
22
        nums = list(map(int, data[index + 1].split()))  # The list of integers
23
        results.append(can_partition_to_odd_product(nums))  # Store result
24
        index += 2  # Move to the next test case
25
    26
    # Output all results at once
27
    sys.stdout.write(""\n"".join(results) + ""\n"")
28
29
if __name__ == ""__main__"":
30
    main()
31",138,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870973
1386870972,khushbu1215,unknown,unknown,"1
# Input number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    # Input the size of the array
7
    N = int(input())
8
    # Input the array
9
    A = list(map(int, input().split()))
10
    11
    # Count the number of odd numbers
12
    odd_count = sum(1 for x in A if x % 2 != 0)
13
    14
    # Check if there are at least two odd numbers
15
    if odd_count >= 2:
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Output the results
21
print(""\n"".join(results))",138,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870972
1386870968,pandeyharsh0337,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
   int T;
11
    cin >> T;  // Read the number of test cases
12
13
    while (T--) {
14
        int N;
15
        cin >> N;  // Read the size of the array
16
        vector<int> A(N);
17
        int odd_count = 0;
18
        19
        // Read the array and count odd numbers
20
        for (int i = 0; i < N; i++) {
21
            cin >> A[i];
22
            if (A[i] % 2 != 0) {
23
                odd_count++;
24
            }
25
        }
26
        27
        // If there are at least 2 odd numbers, it's possible to partition the array
28
        if (odd_count >= 2) {
29
            cout << ""YES"" << endl;
30
        } else {
31
            cout << ""NO"" << endl;
32
        }
33
    }
34
    35
    return 0;
36
}
37",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870968
1386870971,shravani_bhogan1,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case 
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870971
1386870970,h1032231310,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(m, n, a):
4
    5
    pieces_length = math.ceil(m / a)
6
    pieces_width = math.ceil(n / a)
7
    8
    9
    return pieces_length * pieces_width
10
11
12
t = int(input())  
13
results = []
14
15
for _ in range(t):
16
    m, n, a = map(int, input().split())
17
    results.append(minimum_cloth_pieces(m, n, a))
18
19
20
for result in results:
21
    print(result)
22",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870970
1386870964,h1032220212,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
11
    12
    int T;
13
    cin >> T;
14
15
    // Iterate through each test case
16
    while (T--) {
17
        // Read M, N, A for the current test case
18
        long long M, N, A;
19
        cin >> M >> N >> A;
20
21
        // Calculate the number of cloths required for each dimension
22
        long long cloths_for_M = ceil(static_cast<double>(M) / A);
23
        long long cloths_for_N = ceil(static_cast<double>(N) / A);
24
25
        // The total number of cloths required is the product of the cloths needed for M and N
26
        long long result = cloths_for_M * cloths_for_N;
27
28
        // Output the result for the current test case
29
        cout << result << endl;
30
    }
31
32
    return 0;
33
34
}
35",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870964
1386870965,dhanashrikuwar25,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}
21",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870965
1386870967,saurabhpatel4589,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
              Scanner scanner = new Scanner(System.in);
9
        int T = scanner.nextInt();
10
        for (int t = 0; t < T; t++) {
11
            long M = scanner.nextLong();
12
            long N = scanner.nextLong();
13
            long A = scanner.nextLong();
14
            long piecesLengthwise = (M + A - 1) / A; // Ceiling of M / A
15
            long piecesWidthwise = (N + A - 1) / A;  // Ceiling of N / A
16
            long result = piecesLengthwise * piecesWidthwise;
17
            System.out.println(result);
18
        }
19
20
        scanner.close();
21
    }
22
}",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870967
1386870958,omkar_patil19021,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870958
1386870962,shaunaksinkar,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
    """"""
3
    Calculates the minimum number of cloth pieces required to cover a rectangular plot of land.
4
5
    Args:
6
        M: Length of the land in meters.
7
        N: Width of the land in meters.
8
        A: Size of each square cloth piece in meters.
9
10
    Returns:
11
        The minimum number of cloth pieces required.
12
    """"""
13
14
    num_rows = (M + A - 1) // A  # Calculate the number of rows of cloth pieces
15
    num_cols = (N + A - 1) // A  # Calculate the number of columns of cloth pieces
16
17
    return num_rows * num_cols
18
19
if __name__ == ""__main__"":
20
    T = int(input())  # Number of test cases
21
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        result = min_cloth_pieces(M, N, A)
25
        print(result)",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870962
1386870963,anuragpande006,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870963
1386870957,pujaritulsi231,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        8
        while (T-- > 0) {
9
            long M = scanner.nextLong();
10
            long N = scanner.nextLong();
11
            long A = scanner.nextLong();
12
            13
            // Calculate pieces needed to cover M dimension
14
            long piecesM = (M + A - 1) / A;
15
            16
            // Calculate pieces needed to cover N dimension
17
            long piecesN = (N + A - 1) / A;
18
            19
            // Total pieces needed is product of pieces in each dimension
20
            System.out.println(piecesM * piecesN);
21
        }
22
        scanner.close();
23
    }
24
}",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870957
1386870953,taichikarna,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for N in test_cases:
4
        results.append(2**N - 1)
5
    return results
6
7
T = int(input()) 
8
test_cases = []
9
for _ in range(T):
10
    N = int(input())  
11
    test_cases.append(N)
12
13
results = count_non_empty_subsets(test_cases)
14
for result in results:
15
    print(result)
16",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870953
1386870954,adityapoojary07,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
7
        int T = sc.nextInt(); // Number of test cases
8
        9
        while (T-- > 0) {
10
            int N = sc.nextInt(); // Number of integers in the array
11
            int[] A = new int[N];
12
            int oddCount = 0, evenCount = 0;
13
14
            for (int i = 0; i < N; i++) {
15
                A[i] = sc.nextInt();
16
                if (A[i] % 2 == 0) {
17
                    evenCount++;
18
                } else {
19
                    oddCount++;
20
                }
21
            }
22
23
            // To form an odd product, we need at least one odd number in each subset.
24
            if (oddCount >= 2) {
25
                System.out.println(""YES"");
26
            } else {
27
                System.out.println(""NO"");
28
            }
29
        }
30
31
        sc.close();
32
    }
33
}
34",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870954
1386870956,harshm8540,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        int N;
11
        cin >> N;
12
 13
        long long nonEmptySubsets = (1LL << N) - 1;
14
15
        cout << nonEmptySubsets << endl;
16
    }
17
18
    return 0;
19
}
20",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870956
1386870949,harshitsingh9003,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
    # Calculate number of pieces along length and width
3
    pieces_along_length = (M + A - 1) // A
4
    pieces_along_width = (N + A - 1) // A
5
    6
    # Total pieces required is the product of the above two
7
    return pieces_along_length * pieces_along_width
8
9
# Read number of test cases
10
T = int(input().strip())
11
12
# Initialize a list to store results
13
results = []
14
15
# Process each test case
16
for _ in range(T):
17
    M, N, A = map(int, input().strip().split())
18
    result = min_cloth_pieces(M, N, A)
19
    results.append(result)
20
21
# Output results for each test case
22
for result in results:
23
    print(result)",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870949
1386870951,aayu_sh7021,unknown,unknown,"1
def minimum_cloth_pieces(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        M, N, A = case
5
        # Calculate the number of pieces along each dimension
6
        pieces_length = (M + A - 1) // A
7
        pieces_width = (N + A - 1) // A
8
        # Total pieces
9
        results.append(pieces_length * pieces_width)
10
    return results
11
12
# Input
13
T = int(input(""Enter the number of test cases: ""))
14
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
15
16
# Output
17
results = minimum_cloth_pieces(T, test_cases)
18
for res in results:
19
    print(res)
20
21
22
23",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870951
1386870952,shreyaojha2,unknown,unknown,"1
def solve_test_cases(N, A):
2
    odd_counts = sum(1 for x in A if x % 2 == 1)
3
    even_counts = N - odd_counts
4
    5
    return ""YES"" if odd_counts >= 2 else ""NO""
6
7
T = int(input())
8
for _ in range(T):
9
    N = int(input())
10
    A = list(map(int, input().split()))
11
    print(solve_test_cases(N, A))",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870952
1386870945,risshabh022,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Total subsets of a set with N elements = 2^N
5
        # Non-empty subsets = 2^N - 1
6
        results.append((1 << N) - 1)
7
    return results
8
9
# Input processing
10
T = int(input())
11
test_cases = []
12
for _ in range(T):
13
    N = int(input())
14
    test_cases.append(N)
15
16
# Calculate and output results
17
results = count_non_empty_subsets(test_cases)
18
for result in results:
19
    print(result)
20",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870945
1386870947,h1032220669,unknown,unknown,"1
def can_partition_into_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, A = test_cases[t]
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        even_count = N - odd_count
7
        8
      9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    14
    return results
15
16
17
# Input Reading
18
T = int(input())
19
test_cases = []
20
21
for _ in range(T):
22
    N = int(input())
23
    A = list(map(int, input().split()))
24
    test_cases.append((N, A))
25
26
# Processing and Output
27
results = can_partition_into_odd_product(T, test_cases)
28
print(""\n"".join(results))
29",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870947
1386870946,anipatil5122003,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces needed
4
def minimum_cloth_pieces(T, test_cases):
5
    results = []
6
    for case in test_cases:
7
        M, N, A = case
8
        # Calculate the number of pieces needed for length and width
9
        num_pieces_length = math.ceil(M / A)
10
        num_pieces_width = math.ceil(N / A)
11
        # Total number of pieces is the product of pieces along length and width
12
        total_pieces = num_pieces_length * num_pieces_width
13
        results.append(total_pieces)
14
    return results
15
16
# Input reading
17
T = int(input())  # Number of test cases
18
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
19
20
# Process and output results
21
results = minimum_cloth_pieces(T, test_cases)
22
for result in results:
23
    print(result)",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870946
1386870943,chauhanvarun10t1,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
         Scanner scanner = new Scanner(System.in);
9
10
        int T = scanner.nextInt();
11
        12
        for(int i=0;i<T;i++){
13
              long M = scanner.nextLong();
14
            long N = scanner.nextLong();
15
            long A = scanner.nextLong();
16
17
       18
            long rows = (M + A - 1) / A; 
19
            long cols = (N + A - 1) / A; 
20
            long result = rows * cols;
21
22
     23
            System.out.println(result);
24
        }
25
        scanner.close();
26
27
    }
28
}",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870943
1386870937,kartikmaurya18,unknown,unknown,"1
import java.util.Scanner;
2
3
public class MinimumClothPieces {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
10
        // Process each test case
11
        for (int t = 0; t < T; t++) {
12
            // Read M, N, and A
13
            long M = scanner.nextLong();
14
            long N = scanner.nextLong();
15
            long A = scanner.nextLong();
16
17
            // Calculate the number of cloth pieces needed
18
            long rows = (M + A - 1) / A; // Equivalent to Math.ceil(M / A)
19
            long cols = (N + A - 1) / A; // Equivalent to Math.ceil(N / A)
20
21
            // Output the result for the current test case
22
            System.out.println(rows * cols);
23
        }
24
25
        scanner.close();
26
    }
27
}
28",141,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870937
1386870938,h1032221768,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, A = test_cases[t]
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
14
import sys
15
input = sys.stdin.read
16
data = input().split()
17
18
T = int(data[0])
19
test_cases = []
20
idx = 1
21
22
for _ in range(T):
23
    N = int(data[idx])
24
    idx += 1
25
    A = list(map(int, data[idx:idx + N]))
26
    idx += N
27
    test_cases.append((N, A))
28
29
results = can_partition_odd_product(T, test_cases)
30
31
sys.stdout.write(""\n"".join(results) + ""\n"")
32",141,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870938
1386870941,aaryatcet22,unknown,unknown,"1
def can_partition_with_odd_product(T, test_cases):
2
    results = []
3
4
    for t in range(T):
5
        N, A = test_cases[t]
6
7
        # Check if the total sum is even
8
        total_sum = sum(A)
9
        if total_sum % 2 != 0:
10
            results.append(""NO"")
11
            continue
12
13
        # Count odd and even numbers
14
        odd_count = sum(1 for x in A if x % 2 != 0)
15
        even_count = N - odd_count
16
17
        # Check if partitioning is possible
18
        if odd_count >= 2:  # At least two odd numbers needed for odd product
19
            results.append(""YES"")
20
        else:
21
            results.append(""NO"")
22
23
    return results
24
25
# Input number of test cases
26
T = int(input())
27
test_cases = []
28
for _ in range(T):
29
    N = int(input())
30
    A = list(map(int, input().split()))
31
    test_cases.append((N, A))
32
33
# Process and output results
34
results = can_partition_with_odd_product(T, test_cases)
35
for result in results:
36
    print(result)",141,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870941
1386870935,tripathiayush161,unknown,unknown,"1
def can_partition_to_odd_product(arr):
2
    # Count the number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # Check if there are at least two odd numbers
6
    if odd_count >= 2:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
def main():
12
    import sys
13
    input = sys.stdin.read
14
    data = input().split()
15
    16
    index = 0
17
    T = int(data[index])
18
    index += 1
19
    20
    results = []
21
    22
    for _ in range(T):
23
        N = int(data[index])
24
        index += 1
25
        arr = list(map(int, data[index:index + N]))
26
        index += N
27
        results.append(can_partition_to_odd_product(arr))
28
    29
    sys.stdout.write(""\n"".join(results) + ""\n"")
30
31
if __name__ == ""__main__"":
32
    main()
33",141,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870935
1386870936,tiwarikhushi907,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static String canPartition(int[] arr) {
7
        // Count odd numbers
8
        int oddCount = 0;
9
        for (int num : arr) {
10
            if (num % 2 == 1) oddCount++;
11
        }
12
        13
        // If we have at least 2 odd numbers, we can make two subsequences with odd sums
14
        // by putting odd numbers in separate subsequences and distributing even numbers arbitrarily
15
        return oddCount >= 2 ? ""YES"" : ""NO"";
16
    }
17
    18
    public static void main(String[] args) {
19
        Scanner sc = new Scanner(System.in);
20
        int t = sc.nextInt();
21
        22
        while (t-- > 0) {
23
            int n = sc.nextInt();
24
            int[] arr = new int[n];
25
            for (int i = 0; i < n; i++) {
26
                arr[i] = sc.nextInt();
27
            }
28
            System.out.println(canPartition(arr));
29
        }
30
        sc.close();
31
    }
32
}",141,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870936
1386870934,anuragt1604,unknown,unknown,"1
import math
2
3
T = int(input())
4
results = []
5
6
for _ in range(T):
7
    M, N, A = map(int, input().split())
8
    9
    cloths_for_length = math.ceil(M / A)
10
    cloths_for_width = math.ceil(N / A)
11
    12
    total_cloths = cloths_for_length * cloths_for_width
13
    results.append(total_cloths)
14
15
for result in results:
16
    print(result)
17",141,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870934
1386870931,saurabha_srs75,unknown,unknown,"1
def can_partition_into_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd numbers in the array
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        # If there are at least two odd numbers, it's possible to partition
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Input reading
14
T = int(input())  # Number of test cases
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())  # Number of integers
18
    A = list(map(int, input().split()))
19
    test_cases.append((N, A))
20
21
# Process and output results
22
results = can_partition_into_odd_product(test_cases)
23
for result in results:
24
    print(result)",141,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870931
1386870933,sakshimashalkar1,unknown,unknown,"1
def can_partition():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
    6
    T = int(data[0])  # Number of test cases
7
    idx = 1
8
    results = []
9
    10
    for _ in range(T):
11
        N = int(data[idx])  # Number of integers in the current test case
12
        idx += 1
13
        # Read the array of integers
14
        A = map(int, data[idx:idx + N])
15
        idx += N
16
        17
        # Count odd numbers in the array
18
        odd_count = 0
19
        for x in A:
20
            if x % 2 != 0:
21
                odd_count += 1
22
                if odd_count >= 2:
23
                    results.append(""YES"")
24
                    break
25
        else:
26
            results.append(""NO"")
27
    28
    # Print all results at once
29
    sys.stdout.write(""\n"".join(results) + ""\n"")
30
31
# Run the function
32
can_partition()
33",141,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870933
1386870932,h1032220427,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
3
    rows = (M + A - 1) // A  
4
    cols = (N + A - 1) // A  
5
6
    return rows * cols
7
8
if __name__ == ""__main__"":
9
    T = int(input())
10
11
    for _ in range(T):
12
        M, N, A = map(int, input().split())
13
        print(min_cloth_pieces(M, N, A))",141,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870932
1386870930,Rawat_vr44,unknown,unknown,"1
def can_partition_into_odd_sums(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        6
        # Count the number of odd numbers
7
        odd_count = sum(1 for x in A if x % 2 != 0)
8
        9
        # We need at least two odd numbers to make both sums odd
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    15
    return results
16
17
# Read input
18
T = int(input())
19
test_cases = []
20
for _ in range(T):
21
    N = int(input())
22
    A = list(map(int, input().split()))
23
    test_cases.append((N, A))
24
25
# Get results
26
results = can_partition_into_odd_sums(test_cases)
27
28
# Print results
29
for result in results:
30
    print(result)",141,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870930
1386870927,rishabhstudy59,unknown,unknown,"1
T = int(input())
2
results = []
3
4
for _ in range(T):
5
    N = int(input())
6
    A = list(map(int, input().split()))
7
    8
    odd_count = sum(1 for x in A if x % 2 != 0)
9
    10
    if odd_count >= 2:
11
        results.append(""YES"")
12
    else:
13
        results.append(""NO"")
14
15
for result in results:
16
    print(result)
17",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870927
1386870928,nikyadav456,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
       Scanner sc= new Scanner(System.in);
8
        int T= sc.nextInt();
9
        for(int t=0; t<T; t++){
10
            int M=sc.nextInt();
11
            int N=sc.nextInt();
12
            int A=sc.nextInt();
13
            14
            long numPiecesLength=(M+A-1)/A;
15
            long numPiecesWidth=(N+A-1)/A;
16
            17
            long totalPieces= numPiecesLength*numPiecesWidth;
18
            19
            System.out.println(totalPieces);     
20
        }
21
        sc.close();
22
    }
23
}",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870928
1386870929,aryannimkar206,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870929
1386870923,h1032221642,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
11
    int t;
12
        cin>>t;
13
    while(t--){
14
        long long m, n, a;
15
        cin >> m >> n >> a;
16
        long long lengthPieces = (m+a-1)/a;
17
        long long widthPieces = (n+a-1)/a;
18
        long long result = lengthPieces * widthPieces;
19
        20
        cout << result << endl;
21
    }
22
}
23",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870923
1386870924,pandeyrishabh966,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
bool canPartition(vector<int>& arr) {
9
    int n = arr.size();
10
    11
    for(int mask = 1; mask < (1 << n) - 1; mask++) {
12
        long long sum1 = 0, sum2 = 0;
13
        bool valid = true;
14
        15
        for(int i = 0; i < n; i++) {
16
            if(mask & (1 << i)) {
17
                sum1 += arr[i];
18
            } else {
19
                sum2 += arr[i];
20
            }
21
        }
22
        23
        if((sum1 * sum2) % 2 == 1) {
24
            return true;
25
        }
26
    }
27
    return false;
28
}
29
30
int main() {
31
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
32
    int t;
33
    cin >> t;
34
    35
    while(t--) {
36
        int n;
37
        cin >> n;
38
        39
        vector<int> arr(n);
40
        for(int i = 0; i < n; i++) {
41
            cin >> arr[i];
42
        }
43
        44
        if(canPartition(arr)) {
45
            cout << ""YES\n"";
46
        } else {
47
            cout << ""NO\n"";
48
        }
49
    }
50
    51
    return 0;
52
}
53",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870924
1386870925,harshy8013698,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870925
1386870918,sanskruti01thak1,unknown,unknown,"1
T = int(input())
2
results = []
3
4
for _ in range(T):
5
    M, N, A = map(int, input().split())
6
    squares_within_length = (M + A - 1) // A
7
    squares_within_width = (N + A - 1) // A
8
    total_number_squares = squares_within_length * squares_within_width
9
    results.append(total_number_squares)
10
11
for result in results:
12
    print(result)
13
14
    15",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870918
1386870921,h1032221690,unknown,unknown,"1
def can_partition(N, A):
2
    # Count odd and even numbers
3
    odd_count = sum(1 for x in A if x % 2 == 1)
4
    even_count = N - odd_count
5
    6
    # If there's exactly one odd number, we can't make an odd product
7
    # Because all possible partitions will have one odd sum and one even sum
8
    if odd_count <= 1:
9
        return False
10
        11
    # If we have 2 or more odd numbers, we can always make odd product
12
    # by putting two odd numbers in one partition and rest in another
13
    return True
14
15
# Process input
16
T = int(input())
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    print(""YES"" if can_partition(N, A) else ""NO"")
21
22",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870921
1386870922,vikasmourya54321,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
10
int main() {
11
    int T;
12
    cin >> T;
13
14
    while (T--) {
15
        int N;
16
        cin >> N;
17
        vector<int> A(N);
18
        int odd_count = 0, even_count = 0;
19
20
        for (int i = 0; i < N; i++) {
21
            cin >> A[i];
22
            if (A[i] % 2 == 0)
23
                even_count++;
24
            else
25
                odd_count++;
26
        }
27
28
        if (odd_count > 1 && even_count > 1) {
29
            cout << ""YES"" << endl;
30
        } else {
31
            cout << ""NO"" << endl;
32
        }
33
    }
34
35
    return 0;
36
}
37",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870922
1386870917,rayanubhav36,unknown,unknown,"1
def min_cloth(test_cases):
2
    results=[]
3
    for case in test_cases:
4
        M, N, A=case
5
        pieces_length=(M+A-1)//A
6
        pieces_width=(N+A-1)//A
7
        results.append(pieces_length*pieces_width)
8
    return results
9
10
T=int(input())
11
test_cases=[tuple(map(int,input().split())) for _ in range(T)]
12
results=min_cloth(test_cases)
13
for result in results:
14
    print(result)",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870917
1386870913,ts9892singh,unknown,unknown,"1
def can_partition_to_odd_product(nums):
2
    # Count the number of odd numbers
3
    odd_count = sum(1 for num in nums if num % 2 == 1)
4
    5
    # To form two subsequences with odd sums, we need at least two odd numbers
6
    if odd_count >= 2:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
def main():
12
    T = int(input())  # Number of test cases
13
    for _ in range(T):
14
        N = int(input())  # Number of integers in the test case
15
        nums = list(map(int, input().split()))  # The list of integers
16
        print(can_partition_to_odd_product(nums))
17
18
if __name__ == ""__main__"":
19
    main()
20",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870913
1386870915,h1032220223,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870915
1386870916,abhijeetjha913,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;  // Read the number of test cases
12
    13
    while (T--) {
14
        int N;
15
        cin >> N;  // Read the number of integers in the array
16
        vector<int> A(N);
17
        18
        int oddCount = 0;
19
        20
        // Read the array and count the number of odd elements
21
        for (int i = 0; i < N; ++i) {
22
            cin >> A[i];
23
            if (A[i] % 2 != 0) {
24
                oddCount++;
25
            }
26
        }
27
        28
        // To partition into two subsequences with odd sums, we need at least 2 odd numbers
29
        if (oddCount >= 2) {
30
            cout << ""YES"" << endl;
31
        } else {
32
            cout << ""NO"" << endl;
33
        }
34
    }
35
    36
    return 0;
37
}
38",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870916
1386870908,jayyprakashhyad1,unknown,unknown,"1
// Problem: Squarescaping
2
// Contest: HackerRank - TCET Shastra Coding Contest 1-A
3
// URL: https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping
4
// Memory Limit: 512 MB
5
// Time Limit: 4000 ms
6
// 
7
// Powered by CP Editor (https://cpeditor.org)
8
9
#include <bits/stdc++.h>
10
#include <ext/pb_ds/assoc_container.hpp>
11
#include <ext/pb_ds/tree_policy.hpp>
12
#include <ext/pb_ds/detail/standard_policies.hpp>
13
#include <cmath>
14
#define int long long int
15
#define pb push_back
16
/*---------------------------------------------------------------------------------------------------------------------------------*/
17
/*ASCII small case-> a-97 to z-122
18
upper case-> A-65 to Z-90*/
19
#define nl ""\n""
20
#define mp map<int, int>
21
#define all(v) v.begin(), v.end()
22
#define F first
23
#define S second
24
#define ump unordered_map<long long, int, custom_hash>
25
#define mstpi multiset<pair<int, int> >
26
#define mst multiset<int>
27
#define vec vector<int>
28
#define pi pair<int, int>
29
#define ld long double
30
#define vep vector<pair<int, int>>
31
#define ul unsigned long long
32
#define loop1 for (int i = 0; i < n; i++)
33
#define REP(i, a, b) for (int i = a; i <= b; i++)
34
#define NO cout << ""NO"" << endl
35
#define YES cout << ""YES"" << endl
36
using namespace std;
37
using namespace __gnu_pbds;
38
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set; //find_by_order, order_of_key, greater_equal<int> -> making it desc order
39
/*---------------------------------------------------------------------------------------------------------------------------------*/
40
const double PI = 3.1415926535;
41
const int inf = 1e18;
42
const int mod = 1000000007;
43
/*---------------------------------------------------------------------------------------------------------------------------------*/
44
int modmul(int a, int b, int m)
45
{
46
    a %= m;
47
    b %= m;
48
    return (a * b) % m;
49
}
50
int modexp(int n, int x)
51
{
52
    int ans = 1;
53
    while (n > 0)
54
    {
55
        if (n & 1)
56
        {
57
            ans = (ans * x) % mod;
58
        }
59
        n >>= 1;
60
        x = (x * x) % mod;
61
    }
62
    return ans;
63
}
64
/*---------------------------------------------------------------------------------------------------------------------------------*/
65
string add(string a, string b)
66
{
67
    string ans = """";
68
    int carry = 0;
69
    while (!a.empty() || !b.empty() || carry > 0)
70
    {
71
        int digitA = a.empty() ? 0 : a.back() - '0';
72
        int digitB = b.empty() ? 0 : b.back() - '0';
73
        int sum = digitA + digitB + carry;
74
        ans = to_string(sum % 10) + ans;
75
        carry = sum / 10;
76
        if (!a.empty())
77
            a.pop_back();
78
        if (!b.empty())
79
            b.pop_back();
80
    }
81
    return ans;
82
}
83
string ministrnum(string a, string b)
84
{
85
    if (a.length() > b.length())
86
        return b;
87
    else if (b.length() > a.length())
88
        return a;
89
    else
90
    {
91
        int n = a.length();
92
        for (int i = 0; i < n; i++)
93
        {
94
            if (a[i] > b[i])
95
                return b;
96
            else if (a[i] < b[i])
97
                return a;
98
        }
99
    }
100
    return a;
101
}
102
void solve()
103
{
104
    int n, m, a;
105
    cin>>n>>m>>a;
106
    int ans = ((n + a - 1LL)/a) * ((m + a - 1LL)/a);
107
    cout<<ans<<endl;
108
}
109
int32_t main()
110
{
111
    ios_base ::sync_with_stdio(0);
112
    cin.tie(0);
113
    cout.tie(0);
114
    int t = 1;
115
    cin >> t;
116
    while (t--)
117
        solve();
118
}",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870908
1386870911,harshm8540,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
bool canPartition(const vector<int>& arr) {
6
    int totalSum = 0;
7
    int oddCount = 0;
8
9
    for (int num : arr) {
10
        totalSum += num;
11
        if (num % 2 != 0) {
12
            oddCount++;
13
        }
14
    }
15
 16
    return (totalSum % 2 == 0 && oddCount >= 2);
17
}
18
19
int main() {
20
    int T;
21
    cin >> T;
22
23
    while (T--) {
24
        int N;
25
        cin >> N;
26
27
        vector<int> arr(N);
28
        for (int i = 0; i < N; i++) {
29
            cin >> arr[i];
30
        }
31
32
        if (canPartition(arr)) {
33
            cout << ""YES"" << endl;
34
        } else {
35
            cout << ""NO"" << endl;
36
        }
37
    }
38
39
    return 0;
40
}
41",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870911
1386870912,collegeid3250,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
4
using namespace std;
5
6
int calculateMinCloth(int M, int N, int A) {
7
    // Calculate pieces needed in length and width
8
    int piecesInLength = ceil((double)M / A);
9
    int piecesInWidth = ceil((double)N / A);
10
    11
    // Total pieces needed is product of pieces in each dimension
12
    return piecesInLength * piecesInWidth;
13
}
14
15
int main() {
16
    int T;
17
    cin >> T;
18
    19
    while (T--) {
20
        int M, N, A;
21
        cin >> M >> N >> A;
22
        cout << calculateMinCloth(M, N, A) << endl;
23
    }
24
    25
    return 0;
26
}",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870912
1386870905,archiskulkarni41,unknown,unknown,"1
def min_cloth_pieces(test_cases):
2
    results = []
3
    for case in test_cases:
4
        M, N, A = case
5
        6
        cloths_in_length = (M + A - 1) // A
7
        cloths_in_width = (N + A - 1) // A
8
        9
        total_cloths = cloths_in_length * cloths_in_width
10
        results.append(total_cloths)
11
    return results
12
13
T = int(input())
14
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
15
16
17
results = min_cloth_pieces(test_cases)
18
for res in results:
19
    print(res)
20",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870905
1386870907,anushkambtech,unknown,unknown,"1
testcase = int(input())
2
for test in range(testcase):
3
    n = int(input())
4
    numbers= input().split(' ')
5
    numbers = [int(num) for num in numbers]
6
    odd_numbers = [num for num in numbers if num%2]
7
    odds = len(odd_numbers)
8
    if odds >0 and odds%2 == 0:
9
        print(""YES"")
10
    else:
11
        print(""NO"")",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870907
1386870904,purvi_vishwakar1,unknown,unknown,"1
def can_partition_odd_product(A):
2
    """"""
3
    Checks if the given array can be partitioned into two subsequences 
4
    such that the product of their sums is odd.
5
6
    Args:
7
      A: The input array of integers.
8
9
    Returns:
10
      ""YES"" if possible, ""NO"" otherwise.
11
    """"""
12
13
    # Check if there are any odd numbers in the array
14
    has_odd = any(num % 2 == 1 for num in A)
15
16
    # If there are no odd numbers, it's impossible to have an odd product
17
    if not has_odd:
18
        return ""NO""
19
20
    # If there's only one odd number, it's impossible to have an odd product
21
    if sum(num % 2 for num in A) == 1: 
22
        return ""NO""
23
24
    # Otherwise, it's always possible to create an odd product
25
    return ""YES""
26
27
if __name__ == ""__main__"":
28
    T = int(input())
29
30
    for _ in range(T):
31
        N = int(input())
32
        A = list(map(int, input().split()))
33
        print(can_partition_odd_product(A))",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870904
1386870903,m8008,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870903
1386870900,mishranirajk121,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N, A = test_cases[i]
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
14
import sys
15
input = sys.stdin.read
16
data = input().split()
17
18
T = int(data[0])
19
test_cases = []
20
index = 1
21
for _ in range(T):
22
    N = int(data[index])
23
    A = list(map(int, data[index + 1: index + 1 + N]))
24
    test_cases.append((N, A))
25
    index += 1 + N
26
27
28
results = can_partition_odd_product(T, test_cases)
29
sys.stdout.write(""\n"".join(results) + ""\n"")
30",144,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870900
1386870901,hardikj1511,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for _, A in test_cases:
4
        # Count the number of odd numbers in the array
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        # If there are at least 2 odd numbers, we can partition
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Input reading
14
import sys
15
input = sys.stdin.read
16
data = input().split()
17
18
T = int(data[0])
19
index = 1
20
test_cases = []
21
22
for _ in range(T):
23
    N = int(data[index])
24
    index += 1
25
    A = list(map(int, data[index:index + N]))
26
    index += N
27
    test_cases.append((N, A))
28
29
# Get the results
30
results = can_partition_odd_product(test_cases)
31
32
# Output results
33
sys.stdout.write(""\n"".join(results) + ""\n"")
34",144,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870901
1386870902,h1032220677,unknown,unknown,"1
def can_partition_to_odd_product(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        odd_count = sum(1 for x in array if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
# Input handling
12
T = int(input().strip())  # Number of test cases
13
test_cases = []
14
for _ in range(T):
15
    N = int(input().strip())
16
    A = list(map(int, input().strip().split()))
17
    test_cases.append((N, A))
18
19
# Solve the problem
20
results = can_partition_to_odd_product(test_cases)
21
22
# Output results
23
print(""\n"".join(results))
24",144,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870902
1386870896,pandeyharsh0337,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;  // Read the number of test cases
8
9
    while (T--) {
10
        int N;
11
        cin >> N;  // Read the size of the array
12
        vector<int> A(N);
13
        int odd_count = 0;
14
        15
        // Read the array and count odd numbers
16
        for (int i = 0; i < N; i++) {
17
            cin >> A[i];
18
            if (A[i] % 2 != 0) {
19
                odd_count++;
20
            }
21
        }
22
        23
        // If there are at least 2 odd numbers, it's possible to partition the array
24
        if (odd_count >= 2) {
25
            cout << ""YES"" << endl;
26
        } else {
27
            cout << ""NO"" << endl;
28
        }
29
    }
30
    31
    return 0;
32
}
33",144,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870896
1386870897,harshgume17,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",144,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870897
1386870899,majorsecretx,unknown,unknown,"1
def can_partition_for_odd_multiplication(A):
2
3
    even_sum = 0
4
    odd_sum = 0
5
6
    for num in A:
7
        if num % 2 == 0:
8
            even_sum += num
9
        else:
10
            odd_sum += num
11
12
    if even_sum % 2 == 0 and odd_sum % 2 == 0:
13
        return False
14
    return True
15
16
if __name__ == ""__main__"":
17
    T = int(input()) 
18
19
    for _ in range(T):
20
        N = int(input()) 
21
        A = list(map(int, input().split()))
22
23
        if can_partition_for_odd_multiplication(A):
24
            print(""NO"")
25
        else:
26
            print(""YES"")",144,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870899
1386870892,rheetiksharma601,unknown,unknown,"1
import java.io.BufferedReader;
2
import java.io.IOException;
3
import java.io.InputStreamReader;
4
import java.io.PrintWriter;
5
import java.math.BigDecimal;
6
import java.math.BigInteger;
7
import java.math.MathContext;
8
import java.nio.channels.Pipe.SourceChannel;
9
import java.rmi.StubNotFoundException;
10
import java.util.*;
11
12
public class cf {
13
    static int mod = (int) 1e9 + 7;
14
    static int N = (int) 2e5 + 5;
15
    static FastReader sc = new FastReader();
16
    static PrintWriter out = new PrintWriter(System.out);
17
    static int count = 0;
18
19
    public static void main(String[] args) {
20
21
        // boolean[] isPrime=prime(1000000009);
22
23
        int tCase = sc.nextInt();
24
25
        l1: 
26
        while (tCase-- > 0) {
27
28
            int n=sc.nextInt();
29
            int m=sc.nextInt();
30
            int a=sc.nextInt();
31
32
            if(a>=n && a>=m){
33
                System.out.println(1);
34
            }else{
35
                System.out.println((int)(Math.ceil((double)Math.max(n,m)/a))*2);
36
            }
37
            38
            39
40
41
        }
42
        out.flush();
43
44
    }
45
46
    public static long longSqrt(long n){
47
        if(n==0){
48
            return 0;
49
        }
50
        if(n==1){
51
            return 1;
52
        }
53
        return BigInteger.valueOf(n).sqrt().longValue();
54
    }
55
56
    public static long fact(int num) {
57
        if (num == 1 || num == 0)
58
            return 1;
59
        return (num  * fact(num - 1));
60
    }
61
62
    public static long powerMod(long base, long exp, long mod) {
63
        long res = 1;
64
        base = base % mod;
65
        if (base == 0)
66
            return 0;
67
68
        while (exp > 0) {
69
            if ((exp & 1) == 1) {
70
                res = (res * base) % mod;
71
            }
72
            exp = exp >> 1;
73
            base = (base * base) % mod;
74
        }
75
        return res;
76
    }
77
78
    // public static HashMap<String,Pair> sortMap(HashMap<String,Pair> m){
79
    // List<Map.Entry<String, Pair>> list = new ArrayList<>(m.entrySet());
80
81
    // list.sort((e1,e2) -> {
82
    // Pair p1=e1.getValue();
83
    // Pair p2=e2.getValue();
84
85
    // if (p1.i != p2.i) {
86
    // return Integer.compare(p1.i, p2.i);
87
    // } else {
88
    // return Integer.compare(p1.j, p2.j);
89
    // }
90
    // });
91
92
    // LinkedHashMap<String, Pair> sortedMap = new LinkedHashMap<>();
93
    // for (Map.Entry<String, Pair> entry : list) {
94
    // sortedMap.put(entry.getKey(), entry.getValue());
95
    // }
96
    // return sortedMap;
97
    // }
98
99
    public static <K> HashMap<K, Pair> sortMap(Map<K, Pair> map) {
100
        List<Map.Entry<K, Pair>> list = new ArrayList<>(map.entrySet());
101
102
        list.sort((e1, e2) -> {
103
            Pair p1 = e1.getValue();
104
            Pair p2 = e2.getValue();
105
106
            if (p1.i != p2.i) {
107
                return Integer.compare(p1.i, p2.i);
108
            } else {
109
                return Integer.compare(p1.j, p2.j);
110
            }
111
        });
112
113
        HashMap<K, Pair> sortedMap = new LinkedHashMap<>();
114
        for (Map.Entry<K, Pair> entry : list) {
115
            sortedMap.put(entry.getKey(), entry.getValue());
116
        }
117
        return sortedMap;
118
    }
119
120
    public static long sumOf2(int x, int y) {
121
        return (long) ((long) Math.pow(2, y + 1) - Math.pow(2, x));
122
    }
123
124
    static class Pair {
125
        int i;
126
        int j;
127
128
        public Pair(int i, int j) {
129
            this.i = i;
130
            this.j = j;
131
        }
132
    }
133
134
    public static BigDecimal sqrt(BigDecimal value, MathContext mc) {
135
        BigDecimal x = new BigDecimal(Math.sqrt(value.doubleValue()), mc);
136
        return x.add(new BigDecimal(value.subtract(x.multiply(x)).doubleValue() / (x.doubleValue() * 2.0), mc));
137
    }
138
139
    140
141
    public static BigDecimal distance(BigDecimal x1, BigDecimal y1, BigDecimal x2, BigDecimal y2) {
142
        BigDecimal deltaX = x2.subtract(x1);
143
        BigDecimal deltaY = y2.subtract(y1);
144
145
        BigDecimal sumOfSquares = deltaX.multiply(deltaX).add(deltaY.multiply(deltaY));
146
        return sqrt(sumOfSquares, MathContext.DECIMAL128);
147
    }
148
149
    public static int closestMultiple(int a, int b, int k) {
150
        int quotient = b / a;
151
        int multipleBelow = a * quotient;
152
        int multipleAbove = a * (quotient + 1);
153
154
        int distanceBelow = Math.abs(multipleBelow - b);
155
        int distanceAbove = Math.abs(multipleAbove - b);
156
        if (distanceBelow <= k && distanceAbove <= k) {
157
            return distanceBelow < distanceAbove ? multipleBelow : multipleAbove;
158
        } else if (distanceBelow <= k) {
159
            return multipleBelow;
160
        } else if (distanceAbove <= k) {
161
            return multipleAbove;
162
        } else {
163
            return -1;
164
        }
165
    }
166
167
    public static boolean[] prime(int limit) {
168
        boolean[] isPrime = new boolean[limit + 1];
169
        Arrays.fill(isPrime, true);
170
        isPrime[0] = false;
171
        isPrime[1] = false;
172
173
        for (int i = 2; i * i <= limit; i++) {
174
            if (isPrime[i]) {
175
                for (int j = i * i; j <= limit; j += i) {
176
                    isPrime[j] = false;
177
                }
178
            }
179
        }
180
        return isPrime;
181
182
    }
183
184
    public static boolean isPrime(int num) {
185
        if (num <= 1) {
186
            return false;
187
        }
188
        if (num <= 3) {
189
            return true;
190
        }
191
        if (num % 2 == 0 || num % 3 == 0) {
192
            return false;
193
        }
194
        for (int i = 5; i * i <= num; i += 6) {
195
            if (num % i == 0 || num % (i + 2) == 0) {
196
                return false;
197
            }
198
        }
199
        return true;
200
    }
201
202
    public static int gcd(int a, int b) {
203
        while (b != 0) {
204
            int temp = b;
205
            b = a % b;
206
            a = temp;
207
        }
208
        return a;
209
    }
210
211
    // public static long combination(int n, int k) {
212
    // if(n < k) return 0;
213
    // return (fact[n] * p((fact[n - k] * fact[k]) % mod, mod - 2)) % mod;
214
    // }
215
    public static long p(long a, long b) {
216
        long r = 1;
217
        while (b > 0) {
218
            long res = b & 1;
219
            if (res == 1)
220
                r = (r * a) % mod;
221
            b /= 2;
222
            a = (a * a) % mod;
223
        }
224
        return r;
225
    }
226
227
    public static long combination(int n, int k) {
228
        if (k > n) {
229
            return 0;
230
        }
231
        if (k == 0 || k == n) {
232
            return 1;
233
        }
234
        k = Math.min(k, n - k);
235
        long c = 1;
236
        for (int i = 0; i < k; i++) {
237
            c = c * (n - i) / (i + 1);
238
        }
239
        return c;
240
    }
241
242
    public static int findGCD(int[] arr) {
243
        int result = arr[0];
244
        for (int i = 1; i < arr.length; i++) {
245
            result = gcd(result, arr[i]);
246
            if (result == 1) {
247
                return 1;
248
            }
249
        }
250
        return result;
251
    }
252
253
    static class FastReader {
254
        BufferedReader br;
255
        StringTokenizer st;
256
257
        public FastReader() {
258
            br = new BufferedReader(
259
                    new InputStreamReader(System.in));
260
        }
261
262
        String next() {
263
            while (st == null || !st.hasMoreElements()) {
264
                try {
265
                    st = new StringTokenizer(br.readLine());
266
                } catch (IOException e) {
267
                    e.printStackTrace();
268
                }
269
            }
270
            return st.nextToken();
271
        }
272
273
        int nextInt() {
274
            return Integer.parseInt(next());
275
        }
276
277
        long nextLong() {
278
            return Long.parseLong(next());
279
        }
280
281
        double nextDouble() {
282
            return Double.parseDouble(next());
283
        }
284
285
        String nextLine() {
286
            String str = """";
287
            try {
288
                if (st.hasMoreTokens()) {
289
                    str = st.nextToken(""\n"");
290
                } else {
291
                    str = br.readLine();
292
                }
293
            } catch (IOException e) {
294
                e.printStackTrace();
295
            }
296
            return str;
297
        }
298
    }
299
300
}
301",144,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870892
1386870894,antara4210,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",144,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870894
1386870895,meetj665,unknown,unknown,"1
def can_partition(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
        # Count odd numbers in the array
6
        odd_count = sum(1 for x in arr if x % 2 != 0)
7
        # At least two odd numbers are required
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input handling
15
if __name__ == ""__main__"":
16
    import sys
17
    input = sys.stdin.read
18
    data = input().split()
19
    20
    T = int(data[0])  # Number of test cases
21
    index = 1
22
    test_cases = []
23
    24
    for _ in range(T):
25
        n = int(data[index])
26
        index += 1
27
        arr = list(map(int, data[index:index + n]))
28
        index += n
29
        test_cases.append((n, arr))
30
    31
    # Get results
32
    results = can_partition(test_cases)
33
    34
    # Output results
35
    sys.stdout.write(""\n"".join(results) + ""\n"")
36",144,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870895
1386870890,ansh_vishwa2020,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
# Input reading
12
T = int(input())
13
inputs = [tuple(map(int, input().split())) for _ in range(T)]
14
15
# Compute results
16
results = squarescaping(inputs)
17
18
# Output results
19
for result in results:
20
    print(result)
21",144,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870890
1386870884,rajan2809jha,unknown,unknown,"1
import sys
2
3
def can_partition_odd_product(test_cases):
4
    results = []
5
    for n, a in test_cases:
6
        odd_count = sum(1 for x in a if x % 2 == 1)
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
input = sys.stdin.read
14
data = input().split()
15
16
T = int(data[0])
17
test_cases = []
18
index = 1
19
20
for _ in range(T):
21
    N = int(data[index])
22
    index += 1
23
    A = list(map(int, data[index:index+N]))
24
    index += N
25
    test_cases.append((N, A))
26
    27
results = can_partition_odd_product(test_cases)
28
sys.stdout.write(""\n"".join(results) + ""\n"")",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870884
1386870886,h1032220669,unknown,unknown,"1
def can_partition(arr):
2
    n = len(arr)
3
    total = sum(arr)
4
    5
   6
    if n < 2:
7
        return False
8
        9
    odd_numbers = [x for x in arr if x % 2 == 1]
10
    even_numbers = [x for x in arr if x % 2 == 0]
11
12
    odd_count = len(odd_numbers)
13
    even_count = len(even_numbers)
14
    15
    if odd_count == 0:
16
        return False 
17
    18
    if odd_count % 2 == 1:
19
        return odd_count > 1  
20
    21
 22
    return even_count > 0  
23
24
def main():
25
    T = int(input())
26
    for _ in range(T):
27
        N = int(input())
28
        A = list(map(int, input().split()))
29
        print(""YES"" if can_partition(A) else ""NO"")
30
31
if __name__ == ""__main__"":
32
    main()",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870886
1386870889,AadilRayeen,unknown,unknown,"1
import math
2
3
def ss():
4
    T = int(input())
5
    results = []
6
    7
    for _ in range(T):
8
        M, N, A = map(int, input().split())
9
        pieces_width = math.ceil(M / A)
10
        pieces_height = math.ceil(N / A)
11
        total_pieces = pieces_width * pieces_height
12
        results.append(total_pieces)
13
14
    for result in results:
15
        print(result)
16
17
ss()
18",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870889
1386870881,khushbu1215,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870881
1386870883,hy025u,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870883
1386870882,majorsecretx,unknown,unknown,"1
def can_partition_for_odd_multiplication(A):
2
    """"""
3
    Determines if an array A can be partitioned into two subsequences S1 and S2 
4
    such that the product of their sums is odd.
5
6
    Args:
7
        A: The input array of integers.
8
9
    Returns:
10
        True if such a partition exists, False otherwise.
11
    """"""
12
13
    even_sum = 0
14
    odd_sum = 0
15
16
    for num in A:
17
        if num % 2 == 0:
18
            even_sum += num
19
        else:
20
            odd_sum += num
21
22
    # If both sums are even, no partition exists
23
    if even_sum % 2 == 0 and odd_sum % 2 == 0:
24
        return False
25
26
    # Otherwise, a partition exists
27
    return True
28
29
if __name__ == ""__main__"":
30
    T = int(input())  # Number of test cases
31
32
    for _ in range(T):
33
        N = int(input())  # Number of integers in the array
34
        A = list(map(int, input().split()))
35
36
        if can_partition_for_odd_multiplication(A):
37
            print(""NO"")
38
        else:
39
            print(""YES"")",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870882
1386870877,sp488830,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
struct TestCase {
10
    long long M, N, A;
11
};
12
13
vector<long long> minimum_cloth_pieces(int T, const vector<TestCase>& test_cases) {
14
    vector<long long> results;
15
    for (const auto& test : test_cases) {
16
        long long M = test.M, N = test.N, A = test.A;
17
        long long X = (M + A - 1) / A; // Ceiling of M / A
18
        long long Y = (N + A - 1) / A; // Ceiling of N / A
19
        results.push_back(X * Y);
20
    }
21
    return results;
22
}
23
24
int main() {
25
    int T;
26
    cin >> T;
27
    vector<TestCase> test_cases(T);
28
29
    for (int i = 0; i < T; ++i) {
30
        cin >> test_cases[i].M >> test_cases[i].N >> test_cases[i].A;
31
    }
32
33
    vector<long long> results = minimum_cloth_pieces(T, test_cases);
34
35
    for (long long result : results) {
36
        cout << result << endl;
37
    }
38
39
    return 0;
40
}",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870877
1386870878,anipatil5122003,unknown,unknown,"1
def calculate_non_empty_subsets(n):
2
    return (1 << n) - 1
3
4
def solve():
5
    T = int(input())
6
    for _ in range(T):
7
        N = int(input())
8
        print(calculate_non_empty_subsets(N))
9
10
if __name__ == ""__main__"":
11
    solve()",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870878
1386870880,anuragt1604,unknown,unknown,"1
import math
2
3
# Read input
4
T = int(input())  # Number of test cases
5
results = []
6
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
    10
    # Calculate the number of cloth pieces needed for the dimensions
11
    cloths_for_length = math.ceil(M / A)
12
    cloths_for_width = math.ceil(N / A)
13
    14
    # Total cloth pieces needed
15
    total_cloths = cloths_for_length * cloths_for_width
16
    results.append(total_cloths)
17
18
# Output results
19
for result in results:
20
    print(result)
21",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870880
1386870876,bhaktiakoliya23,unknown,unknown,"1
def partition_possible(A):
2
    """"""
3
    Checks if it's possible to partition the given array A into two non-empty subsequences S1 and S2 
4
    such that sum(S1) * sum(S2) is odd.
5
6
    Args:
7
        A: A list of integers.
8
9
    Returns:
10
        True if such a partition is possible, False otherwise.
11
    """"""
12
13
    # Calculate the sum of all elements in A
14
    total_sum = sum(A)
15
16
    # If the total sum is even, it's not possible to get an odd product
17
    if total_sum % 2 == 0:
18
        return False
19
20
    # If the total sum is odd, we can always partition A into two non-empty subsequences 
21
    # with odd sums by putting one element in one subsequence and the rest in the other.
22
    return True
23
24
# Example usage
25
test_cases = [
26
    [1, 2, 2],
27
    [1, 2, 4, 6, 8, 10]
28
]
29
30
for A in test_cases:
31
    if partition_possible(A):
32
        print(""YES"")
33
    else:
34
        print(""NO"")",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870876
1386870874,sakshimashalkar1,unknown,unknown,"1
def can_partition():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
    6
    T = int(data[0])  
7
    idx = 1
8
    results = []
9
    10
    for _ in range(T):
11
        N = int(data[idx])  
12
        idx += 1
13
        A = map(int, data[idx:idx + N])
14
        idx += N
15
        16
       17
        odd_count = sum(1 for x in A if x % 2 != 0)
18
        19
        20
        if odd_count >= 2:
21
            results.append(""YES"")
22
        else:
23
            results.append(""NO"")
24
    25
    26
    sys.stdout.write(""\n"".join(results) + ""\n"")
27
    28
can_partition()
29",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870874
1386870875,h1032220730,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        odd_count = sum(1 for num in arr if num % 2 == 1)
9
        10
        if total_sum % 2 == 1:
11
            results.append(""NO"")
12
        else:
13
            # If there is at least one odd number, partitioning is possible
14
            if odd_count > 0:
15
                results.append(""YES"")
16
            else:
17
                results.append(""NO"")
18
    19
    return results
20
21
# Example usage
22
test_cases = [
23
    (4, [1, 1, 2, 2]),
24
    (6, [1, 2, 4, 6, 8, 10])
25
]
26
27
T = len(test_cases)
28
output = can_partition_odd_sum(T, test_cases)
29
for res in output:
30
    print(res)
31",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870875
1386870873,sarkarsudeep0409,unknown,unknown,"1
for _ in range(int(input())):
2
    print(2**int(input()) - 1)",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870873
1386870869,guptamukesh9380,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
t=int(input())
3
for _ in range(t):
4
    m,n,a=map(int,input().split())
5
    one=0
6
    two=0
7
    if m%a==0:
8
        one=m//a
9
    else:
10
        one=m//a +1
11
    if n%a==0:
12
        two=n//a
13
    else:
14
        two=n//a +1
15
    16
    if one==1 and two==1:
17
        print(1)
18
    else:
19
        print(one+two)",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870869
1386870868,aaryatcet22,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(M, N, A):
4
    # Calculate the number of pieces required along each dimension
5
    pieces_width = (M + A - 1) // A  # Equivalent to ceil(M / A)
6
    pieces_height = (N + A - 1) // A  # Equivalent to ceil(N / A)
7
    # Total pieces is the product of the two
8
    return pieces_width * pieces_height
9
10
# Input number of test cases
11
T = int(input())
12
13
# Process each test case
14
results = []
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    results.append(min_cloth_pieces(M, N, A))
18
19
# Output the results
20
for result in results:
21
    print(result)",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870868
1386870872,aarya_kumar1712,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870872
1386870863,kerissapatel,unknown,unknown,"1
def can_partition(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        odd_count = sum(1 for x in arr if x % 2 != 0)
5
        even_count = n - odd_count
6
        7
        # A product of sums is odd only if both sums are odd
8
        # This requires at least two odd numbers
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input
16
T = int(input())
17
test_cases = []
18
19
for _ in range(T):
20
    N = int(input())
21
    A = list(map(int, input().split()))
22
    test_cases.append((N, A))
23
24
# Process each test case
25
results = can_partition(test_cases)
26
27
# Output results
28
print(""\n"".join(results))
29
30",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870863
1386870864,printshubham,unknown,unknown,"1
def min_cloth_pieces(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        M, N, A = test_cases[i]
5
        rows = (M + A - 1) // A 
6
        cols = (N + A - 1) // A  
7
        results.append(rows * cols)
8
    return results
9
10
T = int(input())
11
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
12
13
results = min_cloth_pieces(T, test_cases)
14
print(""\n"".join(map(str, results)))
15",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870864
1386870866,iamrealsoumik,unknown,unknown,"1
# Input number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    # Input the size of the array
7
    N = int(input())
8
    # Input the array
9
    A = list(map(int, input().split()))
10
    11
    # Count the number of odd numbers
12
    odd_count = sum(1 for x in A if x % 2 != 0)
13
    14
    # Check if there are at least two odd numbers
15
    if odd_count >= 2:
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Output the results
21
print(""\n"".join(results))",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870866
1386870861,tarang_rathod,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")
19",146,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870861
1386870855,shivam_r_mishra1,unknown,unknown,"1
def calculate_subsets():
2
    t = int(input())
3
    output = []
4
    5
    for _ in range(t):
6
        n = int(input())
7
        output.append((1 << n) - 1)
8
    9
    for res in output:
10
        print(res)
11
12
calculate_subsets()
13",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870855
1386870856,h1032220619,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces needed
4
def minimum_cloth_pieces(T, test_cases):
5
    results = []
6
    for case in test_cases:
7
        M, N, A = case
8
        # Calculate the number of pieces needed for length and width
9
        num_pieces_length = math.ceil(M / A)
10
        num_pieces_width = math.ceil(N / A)
11
        # Total number of pieces is the product of pieces along length and width
12
        total_pieces = num_pieces_length * num_pieces_width
13
        results.append(total_pieces)
14
    return results
15
16
# Input reading
17
T = int(input())  # Number of test cases
18
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
19
20
# Process and output results
21
results = minimum_cloth_pieces(T, test_cases)
22
for result in results:
23
    print(result)",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870856
1386870859,tanishrai,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
7
        int T = sc.nextInt();
8
9
        while (T-- > 0) {
10
            int N = sc.nextInt();
11
12
            int result = (1 << N) - 1; 
13
14
            System.out.println(result);
15
        }
16
17
        sc.close();
18
    }
19
}",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870859
1386870852,tanishqraj2112,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while(T--) {
12
        int N;
13
        cin >> N;
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    return 0;
17
}
18",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870852
1386870853,h1032221690,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870853
1386870854,risshabh022,unknown,unknown,"1
def can_partition_to_odd_product(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        # Count odd and even numbers in the array
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        even_count = N - odd_count
8
9
        # To get an odd product, we need at least one odd number in each subset
10
        if odd_count >= 2:  # We need at least two odd numbers to split between S1 and S2
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
# Input processing
17
T = int(input())
18
test_cases = []
19
for _ in range(T):
20
    N = int(input())
21
    A = list(map(int, input().split()))
22
    test_cases.append((N, A))
23
24
# Calculate and output results
25
results = can_partition_to_odd_product(test_cases)
26
for result in results:
27
    print(result)
28",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870854
1386870846,jaypsingh04,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870846
1386870848,abhijeetjha913,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;  // Read number of test cases
12
    13
    while (T--) {
14
        int N;
15
        cin >> N;  // Read the number of integers in the array
16
        vector<int> A(N);
17
        18
        int oddCount = 0;
19
        20
        // Read the array and count the number of odd elements
21
        for (int i = 0; i < N; ++i) {
22
            cin >> A[i];
23
            if (A[i] % 2 != 0) {
24
                oddCount++;
25
            }
26
        }
27
        28
        // If there are at least two odd numbers, it's possible to partition
29
        if (oddCount >= 2) {
30
            cout << ""YES"" << endl;
31
        } else {
32
            cout << ""NO"" << endl;
33
        }
34
    }
35
    36
    return 0;
37
}
38",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870848
1386870850,aishwaryajagdal1,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of square cloth pieces
4
def minimum_cloth_pieces(T, test_cases):
5
    results = []
6
    for case in test_cases:
7
        M, N, A = case
8
        # Calculate the number of cloth pieces required along the length and width
9
        num_length = math.ceil(M / A)
10
        num_width = math.ceil(N / A)
11
        # Total number of cloth pieces
12
        results.append(num_length * num_width)
13
    return results
14
15
# Input
16
T = int(input())  # Number of test cases
17
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
18
19
# Output results
20
results = minimum_cloth_pieces(T, test_cases)
21
for res in results:
22
    print(res)",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870850
1386870845,h1032221052,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while (T--) {
12
        long long len, with, dim;
13
        cin >> len >> with >> dim;
14
        long long r = (len + dim - 1) / dim;
15
        long long c = (with + dim - 1) / dim;
16
        cout << r * c << endl;
17
    }
18
    return 0;
19
}
20",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870845
1386870843,anshu_gupta_03,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870843
1386870844,hardikj1511,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for N, A in test_cases:
4
        # Count the number of odd numbers in the array
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        # If there are at least 2 odd numbers, we can partition
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Input reading
14
import sys
15
input = sys.stdin.read
16
data = input().split()
17
18
T = int(data[0])
19
index = 1
20
test_cases = []
21
22
for _ in range(T):
23
    N = int(data[index])
24
    index += 1
25
    A = list(map(int, data[index:index + N]))
26
    index += N
27
    test_cases.append((N, A))
28
29
# Get the results
30
results = can_partition_odd_product(test_cases)
31
32
# Output results
33
sys.stdout.write(""\n"".join(results) + ""\n"")
34",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870844
1386870842,majorsecretx,unknown,unknown,"1
def can_partition_for_odd_multiplication(A):
2
    even_sum = 0
3
    odd_sum = 0
4
5
    for num in A:
6
        if num % 2 == 0:
7
            even_sum += num
8
        else:
9
            odd_sum += num
10
11
    if even_sum % 2 == 0 and odd_sum % 2 == 0:
12
        return False
13
14
15
    return True
16
17
if __name__ == ""__main__"":
18
    T = int(input()) 
19
20
    for _ in range(T):
21
        N = int(input()) 
22
        A = list(map(int, input().split()))
23
24
        if can_partition_for_odd_multiplication(A):
25
            print(""YES"")
26
        else:
27
            print(""NO"")",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870842
1386870839,shravantiwari281,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870839
1386870841,rudra07032004,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870841
1386870836,jharishabh2k3,unknown,unknown,"1
import math
2
3
def fun(T, test_cases):
4
    res = []
5
    for M, N, A in test_cases:
6
        pieces_length = math.ceil(M / A)
7
        pieces_width = math.ceil(N / A)
8
        res.append(pieces_length * pieces_width)
9
    return res
10
11
T = int(input())
12
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
13
res = fun(T, test_cases)
14
15
for re in res:
16
    print(re)
17",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870836
1386870831,shlokpednekar_21,unknown,unknown,"1
import math
2
3
4
T = int(input())
5
results = []
6
7
for x in range(T):
8
    M,N,A = map(int, input().split())
9
    rows =(M+A-1) // A
10
    cols =(N+A-1) // A
11
    results.append(rows * cols)
12
13
for result in results:
14
    print(result)
15",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870831
1386870832,siddharthbabel01,unknown,unknown,"1
// Problem: Squarescaping
2
// Contest: HackerRank - TCET Shastra Coding Contest 1-A
3
// URL: https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping
4
// Memory Limit: 512 MB
5
// Time Limit: 4000 ms
6
// 
7
// Powered by CP Editor (https://cpeditor.org)
8
9
#include <bits/stdc++.h>
10
using namespace std;
11
#define FAST_IO             (ios_base:: sync_with_stdio(false),cin.tie(NULL));
12
13
//stls
14
#define pii                 pair<int, int>
15
#define vi                  vector<int>
16
#define vll                 vector<ll>
17
#define vvi                 vector<vector<int>>
18
#define vvl                 vector<vector<ll>>
19
20
// Short forms
21
#define ll                  long long
22
#define ull                 unsigned long long
23
#define nl                  '\n'
24
#define ff                  first
25
#define ss                  second
26
#define all(x)              x.begin(), x.end()
27
#define sz(x)               (int)(x).size()
28
#define pb                  push_back
29
#define mp                  make_pair
30
31
32
////////////////////////////////////////////////////////////////
33
34
void solve()
35
{
36
    int m,n,a;
37
    cin>>m>>n>>a;
38
    int l = floor((m+a-1)/a);
39
    int w = floor((n+a-1)/a);
40
    int res = l*w;
41
    cout<< res<<endl;
42
    43
}
44
45
46
47
int main()
48
{
49
    FAST_IO;
50
    int TC = 1;
51
    cin >> TC;
52
    while (TC--) solve();
53
}",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870832
1386870835,rangrejd82,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870835
1386870830,adarshvijaysing1,unknown,unknown,"1
import math
2
3
def minimum_cloths(t, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloths along each dimension
8
        cloths_along_length = (M + A - 1) // A  # Equivalent to math.ceil(M / A)
9
        cloths_along_width = (N + A - 1) // A  # Equivalent to math.ceil(N / A)
10
        # Total cloths required
11
        results.append(cloths_along_length * cloths_along_width)
12
    return results
13
14
# Input
15
T = int(input())  # Number of test cases
16
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
17
18
# Calculate and output results
19
results = minimum_cloths(T, test_cases)
20
for res in results:
21
    print(res)
22",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870830
1386870821,shiroryou,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870821
1386870824,atharvatripathi8,unknown,unknown,"1
import math
2
3
# Read input
4
T = int(input())
5
results = []
6
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
    # Calculate the minimum number of cloth pieces
10
    rows = math.ceil(M / A)
11
    cols = math.ceil(N / A)
12
    results.append(rows * cols)
13
14
# Print results for each test case
15
for result in results:
16
    print(result)
17",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870824
1386870829,h1032221659,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if __name__ == ""__main__"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
        print(result)
32",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870829
1386870814,h10322204571,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        int T = Integer.parseInt(br.readLine()); 
9
        StringBuilder result = new StringBuilder();
10
        11
        for (int t = 0; t < T; t++) {
12
            String[] input = br.readLine().split("" "");
13
            long M = Long.parseLong(input[0]);
14
            long N = Long.parseLong(input[1]);
15
            long A = Long.parseLong(input[2]);
16
            17
            long piecesAlongM = (M + A - 1) / A; 
18
            long piecesAlongN = (N + A - 1) / A; 
19
            20
            long totalPieces = piecesAlongM * piecesAlongN;
21
            result.append(totalPieces).append(""\n"");
22
        }
23
        24
        System.out.print(result.toString());
25
    }
26
}
27",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870814
1386870815,Rawat_vr44,unknown,unknown,"1
def can_partition_into_odd_sums(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        7
        # We need at least two odd numbers to make both sums odd
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    13
    return results
14
15
# Read input
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    A = list(map(int, input().split()))
21
    test_cases.append((N, A))
22
23
# Get results
24
results = can_partition_into_odd_sums(test_cases)
25
26
# Print results
27
for result in results:
28
    print(result)",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870815
1386870817,shreyaojha2,unknown,unknown,"1
def solve_test_cases(M, N, A):
2
    squares_lengths = (M + A - 1) // A  
3
    squares_widths = (N + A - 1) // A   
4
    5
    return squares_lengths * squares_widths
6
7
T = int(input())
8
9
for _ in range(T):
10
    M, N, A = map(int, input().split())
11
    results = solve_test_cases(M, N, A)
12
    print(results)",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870817
1386870810,h1032220730,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870810
1386870811,bhoganashish25,unknown,unknown,"1
def is_partition_possible(arr):
2
    # Counting odd and even numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    even_count = len(arr) - odd_count
5
    6
    # To create two subsequences S1 and S2 such that their sums are odd
7
    # both sums must be odd, hence we need at least one odd number in each subsequence
8
    if odd_count >= 2:
9
        return ""YES""
10
    else:
11
        return ""NO""
12
13
# Reading input
14
t = int(input().strip())
15
results = []
16
17
for _ in range(t):
18
    n = int(input().strip())
19
    arr = list(map(int, input().strip().split()))
20
    results.append(is_partition_possible(arr))
21
22
# Output results
23
for result in results:
24
    print(result)
25",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870811
1386870813,h1032221727,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870813
1386870809,amansharmaa1205,unknown,unknown,"1
# Input number of test cases
2
T = int(input().strip())
3
results = []
4
5
for _ in range(T):
6
    # Input the size of the array
7
    N = int(input().strip())
8
    9
    # Input the array
10
    A = list(map(int, input().strip().split()))
11
    12
    # Ensure the input size matches the array size
13
    if len(A) != N:
14
        results.append(""NO"")
15
        continue
16
    17
    # Count the number of odd numbers, stop once we find 2
18
    odd_count = 0
19
    for x in A:
20
        if x % 2 != 0:
21
            odd_count += 1
22
        if odd_count >= 2:
23
            results.append(""YES"")
24
            break
25
    else:
26
        results.append(""NO"")
27
28
# Output the results
29
print(""\n"".join(results))
30",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870809
1386870804,mishrashashank31,unknown,unknown,"1
def min_cloth_pieces(test_cases):
2
    results = []
3
    for case in test_cases:
4
        M, N, A = case
5
        pieces = ((M + A - 1) // A) * ((N + A - 1) // A)
6
        results.append(pieces)
7
    return results
8
9
T = int(input())
10
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
11
12
results = min_cloth_pieces(test_cases)
13
14
for res in results:
15
    print(res)
16",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870804
1386870807,aaryatcet22,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(n):
3
    # Total subsets of a set with n elements = 2^n
4
    # Non-empty subsets = Total subsets - 1 (remove empty set)
5
    return (1 << n) - 1
6
7
# Input number of test cases
8
T = int(input())
9
10
# Process each test case
11
results = []
12
for _ in range(T):
13
    N = int(input())
14
    results.append(count_non_empty_subsets(N))
15
16
# Output the results
17
for result in results:
18
    print(result)
19",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870807
1386870806,sumeetshah107,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces needed
4
def minimum_cloth_pieces(T, test_cases):
5
    results = []
6
    for case in test_cases:
7
        M, N, A = case
8
        # Calculate the number of pieces needed for length and width
9
        num_pieces_length = math.ceil(M / A)
10
        num_pieces_width = math.ceil(N / A)
11
        # Total number of pieces is the product of pieces along length and width
12
        total_pieces = num_pieces_length * num_pieces_width
13
        results.append(total_pieces)
14
    return results
15
16
# Input reading
17
T = int(input())  # Number of test cases
18
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
19
20
# Process and output results
21
results = minimum_cloth_pieces(T, test_cases)
22
for result in results:
23
    print(result)
24",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870806
1386870801,h1032221736,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870801
1386870802,yansh985,unknown,unknown,"1
def minimum_cloth_pieces(M, N, A):
2
    pieces_length = (M + A - 1) // A
3
    pieces_width = (N + A - 1) // A
4
    return pieces_length * pieces_width
5
6
def main():
7
    T = int(input().strip())
8
    for _ in range(T):
9
        M, N, A = map(int, input().split())
10
        result = minimum_cloth_pieces(M, N, A)
11
        print(result)
12
13
if __name__ == ""__main__"":
14
    main()",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870802
1386870803,nj6097114,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    16
17
    18
    19
20
    int Neel;
21
22
    cin >> Neel;
23
24
    while (Neel--) {
25
26
        long long M, N, A;
27
28
        cin >> M >> N >> A; 
29
30
        long long pieces_along_length = (M + A - 1) / A;
31
32
        long long pieces_along_width = (N + A - 1) / A;
33
34
       35
36
        long long ansP= pieces_along_length * pieces_along_width;
37
38
 39
40
        cout << ansP<< endl;
41
42
    }
43
44
    45
46
    return 0;
47
48
}",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870803
1386870797,sanketsaha04,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        int N;
11
        cin >> N;
12
13
        // Calculate the number of non-empty subsets
14
        long long nonEmptySubsets = (1LL << N) - 1;
15
16
        cout << nonEmptySubsets << endl;
17
    }
18
19
    return 0;
20
}
21",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870797
1386870799,adityapoojary07,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
7
        // Read the number of test cases
8
        int T = sc.nextInt();
9
10
        // Process each test case
11
        while (T-- > 0) {
12
            // Read the value of N
13
            int N = sc.nextInt();
14
15
            // Calculate the number of non-empty subsets using the formula: (2^N - 1)
16
            int result = (1 << N) - 1; // Efficient computation of 2^N - 1 using bit shifting
17
18
            // Print the result
19
            System.out.println(result);
20
        }
21
22
        sc.close();
23
    }
24
}
25",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870799
1386870800,jashbarot05,unknown,unknown,"1
def solve_case(M, N, A):
2
    # Calculate squares needed for length
3
    squares_length = (M + A - 1) // A
4
    5
    # Calculate squares needed for width
6
    squares_width = (N + A - 1) // A
7
    8
    # Total squares needed is product of both dimensions
9
    return squares_length * squares_width
10
11
# Reading number of test cases
12
T = int(input(""""))
13
14
# Process each test case
15
for _ in range(T):
16
    # Read M, N, A for this test case
17
    M, N, A = map(int, input().split())
18
    result = solve_case(M, N, A)
19
    print(result)",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870800
1386870796,shivam_r_mishra1,unknown,unknown,"1
def count_non_empty_subsets():
2
    # Number of test cases
3
    test_cases = int(input(""Enter the number of test cases: ""))
4
    outputs = []
5
    6
    for _ in range(test_cases):
7
        # Input the size of the set
8
        size = int(input(""Enter the size of the set: ""))
9
        # Compute the count of non-empty subsets as 2^size - 1
10
        outputs.append(2**size - 1)
11
    12
    # Print results for all test cases
13
    print(""Non-empty subsets for each test case:"")
14
    for result in outputs:
15
        print(result)
16
17
# Call the function
18
count_non_empty_subsets()
19",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870796
1386870791,sarkarsudeep0409,unknown,unknown,"1
def can_partition(arr):
2
    if len(arr) < 2:
3
        return ""YES""
4
    return ""YES"" if sum(num % 2 for num in arr) % 2 == 0 else ""NO""
5
6
T = int(input())
7
for _ in range(T):
8
    N = int(input())
9
    arr = list(map(int, input().split()))
10
    print(can_partition(arr))",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870791
1386870790,h1032220677,unknown,unknown,"1
def minimum_cloth_pieces(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        # Calculate the number of cloth pieces needed along the length and width
5
        pieces_along_length = (M + A - 1) // A
6
        pieces_along_width = (N + A - 1) // A
7
        # Total pieces needed
8
        total_pieces = pieces_along_length * pieces_along_width
9
        results.append(total_pieces)
10
    return results
11
12
# Input handling
13
T = int(input().strip())  # Number of test cases
14
test_cases = [tuple(map(int, input().strip().split())) for _ in range(T)]
15
16
# Calculate results
17
results = minimum_cloth_pieces(test_cases)
18
19
# Output results
20
for result in results:
21
    print(result)
22
23",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870790
1386870793,shiroryou,unknown,unknown,"1
def odd_multiplication_partition(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, A = test_cases[t]
5
        odd_count = sum(1 for x in A if x % 2 == 1)
6
        # Check if there are at least two odd numbers
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Input reading
14
T = int(input())
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())
18
    A = list(map(int, input().split()))
19
    test_cases.append((N, A))
20
21
# Solve the problem
22
outputs = odd_multiplication_partition(T, test_cases)
23
24
# Print results
25
print(""\n"".join(outputs))
26",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870793
1386870787,h1032220736,unknown,unknown,"1
# Read input
2
import sys
3
input = sys.stdin.read
4
data = input().splitlines()
5
6
# Number of test cases
7
T = int(data[0])
8
results = []
9
10
# Process each test case
11
for i in range(1, T + 1):
12
    N = int(data[i])
13
    # Calculate the number of non-empty subsets
14
    non_empty_subsets = (1 << N) - 1  # Using bitwise shift for 2^N
15
    results.append(non_empty_subsets)
16
17
# Print all results
18
sys.stdout.write(""\n"".join(map(str, results)) + ""\n"")
19",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870787
1386870788,tarang_rathod,unknown,unknown,"1
import sys
2
3
input_data = sys.stdin.read().strip().split()
4
t = int(input_data[0])
5
idx = 1
6
7
for _ in range(t):
8
    n = int(input_data[idx]); idx += 1
9
    arr = list(map(int, input_data[idx:idx+n]))
10
    idx += n
11
    12
    # Count how many elements are odd
13
    count_odd = sum(1 for x in arr if x % 2 == 1)
14
    15
    # We need at least two odd elements, and that total must be even
16
    # (which also implies the sum of A is even)
17
    if count_odd >= 2 and count_odd % 2 == 0:
18
        print(""YES"")
19
    else:
20
        print(""NO"")
21",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870788
1386870789,mishranirajk121,unknown,unknown,"1
import math
2
3
4
def minimum_cloth_pieces(T, test_cases):
5
    results = []
6
    for case in test_cases:
7
        M, N, A = case
8
       9
        length_pieces = math.ceil(M / A)
10
        width_pieces = math.ceil(N / A)
11
       12
        results.append(length_pieces * width_pieces)
13
    return results
14
15
16
T = int(input(""""))
17
test_cases = []
18
for _ in range(T):
19
    M, N, A = map(int, input("""").split())
20
    test_cases.append((M, N, A))
21
22
23
results = minimum_cloth_pieces(T, test_cases)
24
for res in results:
25
    print(res)
26",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870789
1386870784,h1032220669,unknown,unknown,"1
def can_partition(arr):
2
    n = len(arr)
3
    total = sum(arr)
4
    5
  6
    for mask in range(1, 1 << n):
7
        s1_sum = sum(arr[i] for i in range(n) if mask & (1 << i))
8
        s2_sum = total - s1_sum
9
        10
        11
        if s1_sum % 2 == 1 and s2_sum % 2 == 1:
12
            return True
13
    return False
14
15
def main():
16
    T = int(input())
17
    for _ in range(T):
18
        N = int(input())
19
        A = list(map(int, input().split()))
20
        print(""YES"" if can_partition(A) else ""NO"")
21
22
if __name__ == ""__main__"":
23
    main()",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870784
1386870785,shivanshupasi,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870785
1386870786,sethdharmik5,unknown,unknown,"1
import java.util.*;
2
3
public class MinimumClothPieces {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Input number of test cases
8
        int T = scanner.nextInt();
9
        10
        // Array to store results for each test case
11
        int[] results = new int[T];
12
13
        for (int t = 0; t < T; t++) {
14
            // Input values M, N, and A
15
            int M = scanner.nextInt();
16
            int N = scanner.nextInt();
17
            int A = scanner.nextInt();
18
19
            // Calculate the minimum number of cloth pieces needed
20
            int piecesForLength = (int) Math.ceil((double) M / A);
21
            int piecesForWidth = (int) Math.ceil((double) N / A);
22
23
            results[t] = piecesForLength * piecesForWidth;
24
        }
25
26
        // Output the results
27
        for (int result : results) {
28
            System.out.println(result);
29
        }
30
31
        scanner.close();
32
    }
33
}",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870786
1386870783,tanishqraj2112,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
bool canPartition(vector<long long>& A) {
9
    int n = A.size();
10
    long long totalSum = 0;
11
    for(long long x : A) totalSum += x;
12
    13
    // Try all possible combinations using bitmask
14
    for(int mask = 1; mask < (1 << n) - 1; mask++) {
15
        long long sum1 = 0, sum2 = 0;
16
        for(int i = 0; i < n; i++) {
17
            if(mask & (1 << i)) sum1 += A[i];
18
            else sum2 += A[i];
19
        }
20
        if((sum1 * sum2) % 2 == 1) return true;
21
    }
22
    return false;
23
}
24
25
int main() {
26
    int T;
27
    cin >> T;
28
    while(T--) {
29
        int N;
30
        cin >> N;
31
        vector<long long> A(N);
32
        for(int i = 0; i < N; i++) cin >> A[i];
33
        cout << (canPartition(A) ? ""YES"" : ""NO"") << endl;
34
    }
35
    return 0;
36
}
37",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870783
1386870779,saranshagnihotr1,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",152,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870779
1386870780,singhastha182004,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",152,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870780
1386870782,h1032220850,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T; // Number of test cases
7
    cin >> T;
8
9
    while (T--) {
10
        int N; // Size of the array
11
        cin >> N;
12
13
        vector<int> A(N);
14
        int oddCount = 0;
15
16
        // Read the array and count odd numbers
17
        for (int i = 0; i < N; i++) {
18
            cin >> A[i];
19
            if (A[i] % 2 != 0) {
20
                oddCount++;
21
            }
22
        }
23
24
        // Check if the array can be partitioned
25
        if (oddCount >= 2) {
26
            cout << ""YES"" << endl;
27
        } else {
28
            cout << ""NO"" << endl;
29
        }
30
    }
31
32
    return 0;
33
}
34",152,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870782
1386870774,majorsecretx,unknown,unknown,"1
def min_squares(M, N, A):
2
    rows = (M + A - 1) // A  
3
    cols = (N + A - 1) // A  
4
    return rows * cols
5
6
if __name__ == ""__main__"":
7
    T = int(input())  
8
9
    for _ in range(T):
10
        M, N, A = map(int, input().split())
11
        print(min_squares(M, N, A))",152,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870774
1386870776,h1032221052,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while (T--) {
12
        int len, with, dim;
13
        cin >> len >> with >> dim;
14
        int r = (len + dim - 1)/ dim;
15
        int c = (with + dim - 1)/ dim;
16
        cout << r*c<< endl;
17
    }
18
    return 0;
19
}
20
21",152,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870776
1386870777,bubblebee156,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",152,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870777
1386870770,tarang_rathod,unknown,unknown,"1
import sys
2
3
input_data = sys.stdin.read().strip().split()
4
t = int(input_data[0])
5
idx = 1
6
7
for _ in range(t):
8
    n = int(input_data[idx]); idx += 1
9
    arr = list(map(int, input_data[idx:idx+n]))
10
    idx += n
11
    12
    # Count how many elements are odd
13
    count_odd = sum(1 for x in arr if x % 2 == 1)
14
    15
    # We need at least two odd elements, and that total must be even
16
    # (which also implies the sum of A is even)
17
    if count_odd >= 2 and count_odd % 2 == 0:
18
        print(""YES"")
19
    else:
20
        print(""NO"")
21
22",152,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870770
1386870771,saurabha_srs75,unknown,unknown,"1
import math
2
3
def calculate_cloth_pieces(test_cases):
4
    results = []
5
    for M, N, A in test_cases:
6
        # Calculate the number of squares required
7
        pieces_length = (M + A - 1) // A  # Equivalent to ceil(M / A)
8
        pieces_width = (N + A - 1) // A  # Equivalent to ceil(N / A)
9
        results.append(pieces_length * pieces_width)
10
    return results
11
12
# Input reading
13
T = int(input())  # Number of test cases
14
test_cases = []
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
# Process and output results
20
results = calculate_cloth_pieces(test_cases)
21
for result in results:
22
    print(result)",152,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870771
1386870773,ts9892singh,unknown,unknown,"1
# Input number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    # Input the size of the array
7
    N = int(input())
8
    # Input the array
9
    A = list(map(int, input().split()))
10
    11
    # Count the number of odd numbers
12
    odd_count = sum(1 for x in A if x % 2 != 0)
13
    14
    # Check if there are at least two odd numbers
15
    if odd_count >= 2:
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Output the results
21
print(""\n"".join(results))",152,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870773
1386870768,hardikj1511,unknown,unknown,"1
def can_partition_odd_sums(arr):
2
    # Special case for size 2
3
    if len(arr) == 2:
4
        return arr[0] % 2 == 1 and arr[1] % 2 == 1
5
    6
    # For any other size, we just need to find two odd numbers
7
    # We can take them as individual subsequences
8
    odds = sum(1 for x in arr if x % 2 == 1)
9
    return odds >= 2
10
11
def solve_test_cases():
12
    T = int(input())
13
    for _ in range(T):
14
        N = int(input())
15
        A = list(map(int, input().split()))
16
        print(""YES"" if can_partition_odd_sums(A) else ""NO"")
17
18
if __name__ == ""__main__"":
19
    solve_test_cases()",152,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870768
1386870763,anipatil5122003,unknown,unknown,"1
def can_partition_odd_product(arr):
2
    n = len(arr)
3
    # Try all possible subsequence combinations using bitmask
4
    for mask in range(1, (1 << n) - 1):  # Exclude empty and full set
5
        s1_sum = 0
6
        s2_sum = 0
7
        used = set()
8
        9
        # Create subsequences based on current bitmask
10
        for i in range(n):
11
            if mask & (1 << i):
12
                s1_sum += arr[i]
13
                used.add(i)
14
            15
        # Create S2 from remaining elements
16
        for i in range(n):
17
            if i not in used:
18
                s2_sum += arr[i]
19
        20
        # Check if product is odd
21
        if (s1_sum * s2_sum) % 2 == 1:
22
            return True
23
            24
    return False
25
26
# Process input
27
T = int(input())
28
for _ in range(T):
29
    N = int(input())
30
    A = list(map(int, input().split()))
31
    print(""YES"" if can_partition_odd_product(A) else ""NO"")",153,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870763
1386870766,shuklapallavi76,unknown,unknown,"1
import math
2
3
4
T = int(input())
5
for _ in range(T):
6
    M, N, A = map(int, input().split())
7
    pieces_along_length = math.ceil(M / A)
8
    pieces_along_width = math.ceil(N / A)
9
    total_pieces = pieces_along_length * pieces_along_width
10
    print(total_pieces)
11
    12
    13
14",153,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870766
1386870762,saumyamurkya,unknown,unknown,"1
# Input number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    # Input the size of the array
7
    N = int(input())
8
    # Input the array
9
    A = list(map(int, input().split()))
10
    11
    # Count the number of odd numbers
12
    odd_count = sum(1 for x in A if x % 2 != 0)
13
    14
    # Check if there are at least two odd numbers
15
    if odd_count >= 2:
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Output the results
21
print(""\n"".join(results))",153,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870762
1386870758,pandeyharsh0337,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
long long min_cloth_pieces(long long M, long long N, long long A) {
8
    // Calculate the number of pieces required along length M
9
    long long pieces_length = (M + A - 1) / A;
10
    // Calculate the number of pieces required along width N
11
    long long pieces_width = (N + A - 1) / A;
12
    // The total pieces required is the product of both
13
    return pieces_length * pieces_width;
14
}
15
16
int main() {
17
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
18
    int T;
19
    cin >> T;  // Read the number of test cases
20
    while (T--) {
21
        long long M, N, A;
22
        cin >> M >> N >> A;  // Read M, N, A for each test case
23
        cout << min_cloth_pieces(M, N, A) << endl;
24
    }
25
    return 0;
26
    27
}
28",153,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870758
1386870759,amanmaurya_me,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
public static void main(String[] args) {
7
        Scanner sc = new Scanner(System.in);
8
        int T = sc.nextInt();
9
        while (T-- > 0) {
10
            int N = sc.nextInt();
11
            long[] arr = new long[N];
12
            for (int i = 0; i < N; i++) {
13
                arr[i] = sc.nextLong();
14
            }
15
            System.out.println(canPartition(arr) ? ""YES"" : ""NO"");
16
        }
17
    }
18
    private static boolean canPartition(long[] arr) {
19
        long totalSum = 0;
20
        for (long num : arr) {
21
            totalSum += num;
22
        }
23
        return findPartition(arr, 0, 0, totalSum, new HashSet<>());
24
    }
25
    26
    private static boolean findPartition(long[] arr, int index, long sum1, long remainingSum, Set<Integer> set1) {
27
        if (index == arr.length) {
28
            return !set1.isEmpty() && set1.size() < arr.length && 
29
                   (sum1 * (remainingSum)) % 2 == 1;
30
        }
31
        32
        set1.add(index);
33
        if (findPartition(arr, index + 1, sum1 + arr[index], remainingSum - arr[index], set1)) {
34
            return true;
35
        }
36
        set1.remove(index);
37
        if (findPartition(arr, index + 1, sum1, remainingSum, set1)) {
38
            return true;
39
        }
40
        return false;}
41
}",153,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870759
1386870761,iamrealsoumik,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
4
using namespace std;
5
6
int main() {
7
    int t;
8
    cin >> t;
9
    while (t--) {
10
        long long m, n, a;
11
        cin >> m >> n >> a;
12
        long long squares_m = ceil((double)m / a);
13
        long long squares_n = ceil((double)n / a);
14
        long long total_squares = squares_m * squares_n;
15
        cout << total_squares << endl;
16
    }
17
    return 0;
18
}",153,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870761
1386870755,suyogkumbhar24,unknown,unknown,"1
import math
2
def min(M,N,A):
3
    pieces_length=math.ceil(M/A)
4
    pieces_width=math.ceil(N/A)
5
    return pieces_length*pieces_width
6
7
T=int(input())
8
9
for _ in range (T):
10
    M,N,A=map(int,input().split())
11
    print(min(M,N,A))",153,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870755
1386870756,diyabinoymanape1,unknown,unknown,"1
def get_min_cloth_pieces(T, cases):
2
    ans = []
3
    for i in range(T):
4
        M, N, A = cases[i]
5
        hor = (M + A - 1) // A  
6
        ver = (N + A - 1) // A  
7
        ans.append(hor * ver) 
8
    return ans
9
10
T = int(input())
11
cases = []
12
for _ in range(T):
13
    cases.append(tuple(map(int, input().split())))
14
15
results = get_min_cloth_pieces(T, cases)
16
for res in results:
17
    print(res)",153,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870756
1386870757,meetj665,unknown,unknown,"1
def calculate_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets excluding the empty set
5
        results.append((2 ** n) - 1)
6
    return results
7
8
# Input handling
9
if __name__ == ""__main__"":
10
    T = int(input())  # Number of test cases
11
    test_cases = [int(input()) for _ in range(T)]
12
    # Compute results
13
    results = calculate_non_empty_subsets(test_cases)
14
    # Output results
15
    for result in results:
16
        print(result)
17",153,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870757
1386870754,omg40787,unknown,unknown,"1
def count_non_empty_subsets(N):
2
    return (2 ** N) - 1
3
4
def main():
5
    T = int(input())  # Number of test cases
6
    for _ in range(T):
7
        N = int(input())  # Number of elements in the set
8
        print(count_non_empty_subsets(N))
9
10
if __name__ == ""__main__"":
11
    main()
12",153,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870754
1386870750,shaunaksinkar,unknown,unknown,"1
def solve():
2
    # Read the number of test cases
3
    T = int(input())
4
    5
    results = []
6
    for _ in range(T):
7
        # Read the size of the array (we don't actually need this value)
8
        n = int(input())
9
        # Read the array elements
10
        A = list(map(int, input().split()))
11
        12
        # Count the number of odd numbers
13
        odd_count = sum(1 for x in A if x % 2 != 0)
14
        15
        # Check if there are at least 2 odd numbers
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    # Print the results for each test case
22
    print(""\n"".join(results))
23
24
# Run the solution
25
solve()",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870750
1386870751,sanjanasharma191,unknown,unknown,"1
import math
2
3
def squarescaping(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of squares needed along each dimension
8
        rows = math.ceil(M / A)  # Number of rows of squares required
9
        cols = math.ceil(N / A)  # Number of columns of squares required
10
        # Total squares needed
11
        results.append(rows * cols)
12
    return results
13
14
# Input reading
15
if __name__ == ""__main__"":
16
    T = int(input())  # Number of test cases
17
    test_cases = []
18
    for _ in range(T):
19
        M, N, A = map(int, input().split())
20
        test_cases.append((M, N, A))
21
    22
    # Process test cases
23
    results = squarescaping(test_cases)
24
    for result in results:
25
        print(result)",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870751
1386870752,sanketsaha04,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
bool canPartition(const vector<int>& arr) {
6
    int totalSum = 0;
7
    int oddCount = 0;
8
9
    for (int num : arr) {
10
        totalSum += num;
11
        if (num % 2 != 0) {
12
            oddCount++;
13
        }
14
    }
15
16
    // Check if total sum is even and there are at least two odd numbers
17
    return (totalSum % 2 == 0 && oddCount >= 2);
18
}
19
20
int main() {
21
    int T;
22
    cin >> T;
23
24
    while (T--) {
25
        int N;
26
        cin >> N;
27
28
        vector<int> arr(N);
29
        for (int i = 0; i < N; i++) {
30
            cin >> arr[i];
31
        }
32
33
        if (canPartition(arr)) {
34
            cout << ""YES"" << endl;
35
        } else {
36
            cout << ""NO"" << endl;
37
        }
38
    }
39
40
    return 0;
41
}
42",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870752
1386870745,h1032221626,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(M, N, A):
4
    pieces_along_length = math.ceil(M / A)
5
    pieces_along_width = math.ceil(N / A)
6
7
    total_pieces = pieces_along_length * pieces_along_width
8
    return total_pieces
9
10
T = int(input())  
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(min_cloth_pieces(M, N, A))",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870745
1386870746,keyurchauhan15,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
    """"""
3
    Calculates the minimum number of cloth pieces required to cover a rectangular plot of land.
4
5
    Args:
6
        M: Length of the land in meters.
7
        N: Width of the land in meters.
8
        A: Size of each square cloth piece in meters.
9
10
    Returns:
11
        The minimum number of cloth pieces required.
12
    """"""
13
14
    num_rows = (M + A - 1) // A  # Calculate the number of rows of cloth pieces
15
    num_cols = (N + A - 1) // A  # Calculate the number of columns of cloth pieces
16
17
    return num_rows * num_cols
18
19
if __name__ == ""__main__"":
20
    T = int(input())  # Number of test cases
21
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        result = min_cloth_pieces(M, N, A)
25
        print(result)",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870746
1386870749,nileshparmaroff1,unknown,unknown,"1
import java.util.Scanner;
2
3
public class PartitioningForOddMultiplication {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        int T = scanner.nextInt();
8
9
        for (int t = 0; t < T; t++) {
10
            int N = scanner.nextInt();
11
12
            int[] arr = new int[N];
13
            int oddCount = 0;
14
            for (int i = 0; i < N; i++) {
15
                arr[i] = scanner.nextInt();
16
                if (arr[i] % 2 != 0) {
17
                    oddCount++;
18
                }
19
            }
20
            if (oddCount >= 2) {
21
                System.out.println(""YES"");
22
            } else {
23
                System.out.println(""NO"");
24
            }
25
        }
26
27
        scanner.close();
28
    }
29
}
30",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870749
1386870741,sethdharmik5,unknown,unknown,"1
import java.util.*;
2
3
public class MinimumClothPieces {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Input number of test cases
8
        int T = scanner.nextInt();
9
        10
        // Array to store results for each test case
11
        int[] results = new int[T];
12
13
        for (int t = 0; t < T; t++) {
14
            // Input values M, N, and A
15
            int M = scanner.nextInt();
16
            int N = scanner.nextInt();
17
            int A = scanner.nextInt();
18
19
            // Calculate the minimum number of cloth pieces needed
20
            int piecesForLength = (int) Math.ceil((double) M / A);
21
            int piecesForWidth = (int) Math.ceil((double) N / A);
22
23
            results[t] = piecesForLength * piecesForWidth;
24
        }
25
26
        // Output the results
27
        for (int result : results) {
28
            System.out.println(result);
29
        }
30
31
        scanner.close();
32
    }
33
}
34",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870741
1386870742,vartikau8,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))
14",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870742
1386870739,cabhishekpal,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        int T = Integer.parseInt(br.readLine()); // Read the number of test cases
9
        StringBuilder result = new StringBuilder();
10
        11
        for (int t = 0; t < T; t++) {
12
            String[] input = br.readLine().split("" "");
13
            long M = Long.parseLong(input[0]);
14
            long N = Long.parseLong(input[1]);
15
            long A = Long.parseLong(input[2]);
16
            17
            // Calculate the number of pieces needed along each dimension
18
            long piecesAlongM = (M + A - 1) / A; // Equivalent to ceil(M / A)
19
            long piecesAlongN = (N + A - 1) / A; // Equivalent to ceil(N / A)
20
            21
            // Total pieces needed
22
            long totalPieces = piecesAlongM * piecesAlongN;
23
            result.append(totalPieces).append(""\n"");
24
        }
25
        26
        // Print the results
27
        System.out.print(result.toString());
28
    }
29
}
30",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870739
1386870738,varunfatehpuria2,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
import math
3
def minimum_cloth_pieces(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        num_squares_length = math.ceil(M / A)
8
        num_squares_width = math.ceil(N / A)
9
        total_squares = num_squares_length * num_squares_width
10
        results.append(total_squares)
11
    return results
12
T = int(input(""""))
13
test_cases = []
14
for _ in range(T):
15
    test_cases.append(tuple(map(int, input().split())))
16
results = minimum_cloth_pieces(T, test_cases)
17
for result in results:
18
    print(result)",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870738
1386870733,shiroryou,unknown,unknown,"1
def odd_multiplication_partition(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N, A = test_cases[t]
5
        odd_count = sum(1 for x in A if x % 2 == 1)
6
        # Check if there are at least two odd numbers
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
# Input reading
14
T = int(input())
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())
18
    A = list(map(int, input().split()))
19
    test_cases.append((N, A))
20
21
# Solve the problem
22
outputs = odd_multiplication_partition(T, test_cases)
23
24
# Print results
25
print(""\n"".join(outputs))
26",155,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870733
1386870735,hardikj1511,unknown,unknown,"1
def can_partition_odd_sums(arr):
2
    n = len(arr)
3
    total = sum(arr)
4
    5
    def find_partition(index, sum1, sum2, used1, used2):
6
        if index == n:
7
            return sum1 % 2 == 1 and sum2 % 2 == 1
8
            9
        # Try adding to first subsequence
10
        if not used1[index]:
11
            used1[index] = True
12
            if find_partition(index + 1, sum1 + arr[index], sum2, used1, used2):
13
                return True
14
            used1[index] = False
15
            16
        # Try adding to second subsequence
17
        if not used2[index]:
18
            used2[index] = True
19
            if find_partition(index + 1, sum1, sum2 + arr[index], used1, used2):
20
                return True
21
            used2[index] = False
22
            23
        return False
24
25
    used1 = [False] * n
26
    used2 = [False] * n
27
    return find_partition(0, 0, 0, used1, used2)
28
29
def solve_test_cases():
30
    T = int(input())
31
    for _ in range(T):
32
        N = int(input())
33
        A = list(map(int, input().split()))
34
        print(""YES"" if can_partition_odd_sums(A) else ""NO"")
35
36
if __name__ == ""__main__"":
37
    solve_test_cases()",155,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870735
1386870736,taichikarna,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        6
        # Step 1: Check if the sum is even
7
        total_sum = sum(arr)
8
        if total_sum % 2 != 0:
9
            results.append(""NO"")
10
            continue
11
        12
        # Step 2: Count the odd numbers
13
        odd_count = sum(1 for x in arr if x % 2 != 0)
14
        15
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input reading
24
T = int(input())  # Number of test cases
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())  # Size of the list
28
    arr = list(map(int, input().split()))  # The list of integers
29
    test_cases.append((N, arr))
30
31
# Compute and output the results
32
results = can_partition_into_subsequences(test_cases)
33
for result in results:
34
    print(result)
35",155,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870736
1386870730,rathodlucky12k,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(t, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces along both dimensions
8
        rows = math.ceil(M / A)
9
        cols = math.ceil(N / A)
10
        # Total number of pieces required
11
        results.append(rows * cols)
12
    return results
13
14
if __name__ == ""__main__"":
15
    T = int(input())  # Number of test cases
16
    test_cases = []
17
18
    for _ in range(T):
19
        M, N, A = map(int, input().split())
20
        test_cases.append((M, N, A))
21
22
    # Get the results
23
    results = min_cloth_pieces(T, test_cases)
24
25
    # Print each result on a new line
26
    for result in results:
27
        print(result)",155,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870730
1386870731,tripathiayush161,unknown,unknown,"1
if __name__ == ""__main__"":
2
    t = int(input())  # Read the number of test cases
3
4
    for _ in range(t):
5
        m, n, a = map(int, input().split())  # Read dimensions M, N and side length A
6
7
        # Calculate the number of cloth pieces required
8
        length_pieces = (m + a - 1) // a  # Integer division to get ceil(m / a)
9
        width_pieces = (n + a - 1) // a  # Integer division to get ceil(n / a)
10
        result = length_pieces * width_pieces
11
12
        # Output the result
13
        print(result)",155,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870731
1386870732,amansharmaa1205,unknown,unknown,"1
# Input number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    # Input the size of the array
7
    N = int(input())
8
    # Input the array
9
    A = list(map(int, input().split()))
10
    11
    # Count the number of odd numbers
12
    odd_count = sum(1 for x in A if x % 2 != 0)
13
    14
    # Check if there are at least two odd numbers
15
    if odd_count >= 2:
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Output the results
21
print(""\n"".join(results))",155,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870732
1386870726,h1032221491,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
   3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
  7
    return pieces_length * pieces_width
8
9
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))
14
15
first",155,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870726
1386870727,aryavardhnsingh,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))
14
15",155,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870727
1386870728,risshabh022,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed along the length and width
8
        num_length = math.ceil(M / A)
9
        num_width = math.ceil(N / A)
10
        # Total number of cloth pieces
11
        results.append(num_length * num_width)
12
    return results
13
14
# Input processing
15
T = int(input())
16
test_cases = []
17
for _ in range(T):
18
    M, N, A = map(int, input().split())
19
    test_cases.append((M, N, A))
20
21
# Calculate and output results
22
results = min_cloth_pieces(test_cases)
23
for result in results:
24
    print(result)
25",155,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870728
1386870724,omg40787,unknown,unknown,"1
def can_partition_into_subsequences(N, arr):
2
    total_sum = sum(arr)
3
    4
    # If the sum is odd, it's impossible to partition into two equal sums
5
    if total_sum % 2 != 0:
6
        return ""NO""
7
    8
    # Count the number of odd numbers
9
    odd_count = sum(1 for x in arr if x % 2 != 0)
10
    11
    # We need at least 2 odd numbers to have two subsequences with odd products
12
    if odd_count < 2:
13
        return ""NO""
14
    15
    return ""YES""
16
17
def main():
18
    T = int(input())  # Read the number of test cases
19
    for _ in range(T):
20
        N = int(input())  # Number of elements in the current test case
21
        arr = list(map(int, input().split()))  # Read the array of integers
22
        print(can_partition_into_subsequences(N, arr))
23
24
if __name__ == ""__main__"":
25
    main()
26",155,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870724
1386870719,adityapoojary07,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Squarescaping {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
10
        // Process each test case
11
        for (int t = 0; t < T; t++) {
12
            // Read dimensions of land (M x N) and cloth size (A x A)
13
            long M = scanner.nextLong();
14
            long N = scanner.nextLong();
15
            long A = scanner.nextLong();
16
17
            // Calculate the number of cloth pieces needed
18
            long numPieces = (long) Math.ceil((double) M / A) * (long) Math.ceil((double) N / A);
19
20
            // Output the result
21
            System.out.println(numPieces);
22
        }
23
24
        scanner.close();
25
    }
26
}",156,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870719
1386870722,rajan2809jha,unknown,unknown,"1
def calculate_minimum_squares(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        length_squares = (M + A - 1) // A
5
        width_squares = (N + A - 1) // A
6
        total_squares = length_squares * width_squares
7
        results.append(total_squares)
8
    return results
9
T = int(input())
10
test_cases = []
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    test_cases.append((M, N, A))
14
15
results = calculate_minimum_squares(test_cases)
16
for res in results:
17
    print(res)",156,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870722
1386870723,ts9892singh,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt(); 
8
        9
        StringBuilder output = new StringBuilder();
10
        11
        for (int t = 0; t < T; t++) {
12
            long M = scanner.nextLong(); 
13
            long N = scanner.nextLong(); 
14
            long A = scanner.nextLong(); 
15
            16
        17
            long piecesLength = (M + A - 1) / A; 
18
            long piecesWidth = (N + A - 1) / A;  
19
            20
            // Total cloth pieces required
21
            long totalPieces = piecesLength * piecesWidth;
22
            23
            output.append(totalPieces).append(""\n"");
24
        }
25
        26
        // Print all results at once for efficiency
27
        System.out.print(output.toString());
28
        scanner.close();
29
    }
30
}
31",156,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870723
1386870715,Rawat_vr44,unknown,unknown,"1
def partition_possible(arr):
2
    """"""
3
    Checks if an array can be partitioned into two subsequences such that the product of their sums is odd.
4
5
    Args:
6
        arr: The input array of integers.
7
8
    Returns:
9
        True if such a partition is possible, False otherwise.
10
    """"""
11
12
    if len(arr) == 1:
13
        return False  # Single element cannot be partitioned
14
15
    # Check if there is at least one odd element
16
    has_odd = False
17
    for num in arr:
18
        if num % 2 != 0:
19
            has_odd = True
20
            break
21
22
    # Check if there are at least two odd elements
23
    num_odd = 0
24
    for num in arr:
25
        if num % 2 != 0:
26
            num_odd += 1
27
28
    return has_odd and num_odd >= 2
29
30
if __name__ == ""__main__"":
31
    T = int(input())  # Number of test cases
32
33
    for _ in range(T):
34
        N = int(input())  # Number of integers
35
        arr = list(map(int, input().split()))
36
37
        if partition_possible(arr):
38
            print(""YES"")
39
        else:
40
            print(""NO"")",156,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870715
1386870716,tiwarikhushi907,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
     public static long solve(long M, long N, long A) {
7
        long piecesLength = (M + A - 1) / A;
8
        long piecesWidth = (N + A - 1) / A;
9
        10
        return piecesLength * piecesWidth;
11
    }
12
    13
    public static void main(String[] args) {
14
        Scanner scanner = new Scanner(System.in);
15
        int T = scanner.nextInt();
16
        17
        for (int t = 0; t < T; t++) {
18
            long M = scanner.nextLong();
19
            long N = scanner.nextLong();
20
            long A = scanner.nextLong();
21
            System.out.println(solve(M, N, A));
22
        }
23
        24
        scanner.close();
25
    }
26
}",156,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870716
1386870718,hardikj1511,unknown,unknown,"1
def can_partition_odd_sums(arr):
2
    n = len(arr)
3
    total = sum(arr)
4
    5
    def find_partition(index, sum1, sum2, used1, used2):
6
        if index == n:
7
            return sum1 % 2 == 1 and sum2 % 2 == 1
8
            9
        # Try adding to first subsequence
10
        if not used1[index]:
11
            used1[index] = True
12
            if find_partition(index + 1, sum1 + arr[index], sum2, used1, used2):
13
                return True
14
            used1[index] = False
15
            16
        # Try adding to second subsequence
17
        if not used2[index]:
18
            used2[index] = True
19
            if find_partition(index + 1, sum1, sum2 + arr[index], used1, used2):
20
                return True
21
            used2[index] = False
22
            23
        return False
24
25
    used1 = [False] * n
26
    used2 = [False] * n
27
    return find_partition(0, 0, 0, used1, used2)
28
29
def solve_test_cases():
30
    T = int(input())
31
    for _ in range(T):
32
        N = int(input())
33
        A = list(map(int, input().split()))
34
        print(""YES"" if can_partition_odd_sums(A) else ""NO"")
35
36
if __name__ == ""__main__"":
37
    solve_test_cases()",156,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870718
1386870709,tanishqraj2112,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while(T--) {
12
        long long M, N, A;
13
        cin >> M >> N >> A;
14
        long long squares_M = (M + A - 1) / A;
15
        long long squares_N = (N + A - 1) / A;
16
        cout << squares_M * squares_N << endl;
17
    }
18
    return 0;
19
}
20",156,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870709
1386870711,rishabhstudy59,unknown,unknown,"1
import math
2
3
T = int(input())
4
results = []
5
6
for _ in range(T):
7
    M, N, A = map(int, input().split())
8
    num_pieces_length = (M + A - 1) // A
9
    num_pieces_width = (N + A - 1) // A
10
    total_pieces = num_pieces_length * num_pieces_width
11
    results.append(total_pieces)
12
13
for result in results:
14
    print(result)
15",156,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870711
1386870714,dhanashrikuwar25,unknown,unknown,"1
# Input number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    # Input the size of the array
7
    N = int(input())
8
    # Input the array
9
    A = list(map(int, input().split()))
10
    11
    # Count the number of odd numbers
12
    odd_count = sum(1 for x in A if x % 2 != 0)
13
    14
    # Check if there are at least two odd numbers
15
    if odd_count >= 2:
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Output the results
21
print(""\n"".join(results))",156,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870714
1386870707,singhastha182004,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        8
        rows = math.ceil(M / A)
9
        cols = math.ceil(N / A)
10
        11
        results.append(rows * cols)
12
    return results
13
14
15
T = int(input())
16
test_cases = []
17
for _ in range(T):
18
    test_cases.append(tuple(map(int, input().split())))
19
20
21
results = minimum_cloth_pieces(T, test_cases)
22
for result in results:
23
    print(result)",156,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870707
1386870704,_youknowzair65,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        8
        // Read number of test cases
9
        int T = scanner.nextInt();
10
        11
        // Iterate through each test case
12
        for (int i = 0; i < T; i++) {
13
            // Read M, N, A for the current test case
14
            long M = scanner.nextLong();
15
            long N = scanner.nextLong();
16
            long A = scanner.nextLong();
17
            18
            // Calculate the number of cloths required along M and N
19
            long numClothsM = (M + A - 1) / A;
20
            long numClothsN = (N + A - 1) / A;
21
            22
            // The total number of cloths is the product of both
23
            long totalCloths = numClothsM * numClothsN;
24
            25
            // Output the result
26
            System.out.println(totalCloths);
27
        }
28
        29
        // Close the scanner
30
        scanner.close();
31
    }
32
}",157,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870704
1386870705,taichikarna,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(T, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        M, N, A = case
8
        height_pieces = math.ceil(M / A)
9
        width_pieces = math.ceil(N / A)
10
        11
        total_pieces = height_pieces * width_pieces
12
        results.append(total_pieces)
13
    14
    return results
15
16
T = int(input())  
17
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
18
19
results = min_cloth_pieces(T, test_cases)
20
for result in results:
21
    print(result)
22",157,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870705
1386870706,singhyatharthsn,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)
18",157,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870706
1386870697,sarkarsudeep0409,unknown,unknown,"1
import math
2
3
def min_squares(M, N, A):
4
    return math.ceil(M / A) * math.ceil(N / A)
5
6
T = int(input())
7
8
for _ in range(T):
9
    M, N, A = map(int, input().split())
10
    print(min_squares(M, N, A))",157,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870697
1386870702,deeptisunilsing1,unknown,unknown,"1
import math
2
3
def squarescaping(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of squares needed along each dimension
8
        rows = math.ceil(M / A)  # Number of rows of squares required
9
        cols = math.ceil(N / A)  # Number of columns of squares required
10
        # Total squares needed
11
        results.append(rows * cols)
12
    return results
13
14
# Input reading
15
if __name__ == ""__main__"":
16
    T = int(input())  # Number of test cases
17
    test_cases = []
18
    for _ in range(T):
19
        M, N, A = map(int, input().split())
20
        test_cases.append((M, N, A))
21
    22
    # Process test cases
23
    results = squarescaping(test_cases)
24
    for result in results:
25
        print(result)
26",157,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870702
1386870703,h1032220736,unknown,unknown,"1
# Read input
2
import sys
3
input = sys.stdin.read
4
data = input().splitlines()
5
6
# Number of test cases
7
T = int(data[0])
8
results = []
9
10
# Process each test case
11
index = 1
12
for _ in range(T):
13
    # Read the size of the array
14
    N = int(data[index])
15
    index += 1
16
    # Read the array elements
17
    A = list(map(int, data[index].split()))
18
    index += 1
19
    20
    # Count odd integers
21
    odd_count = sum(1 for x in A if x % 2 != 0)
22
    23
    # Determine if partition is possible
24
    if odd_count >= 2:
25
        results.append(""YES"")
26
    else:
27
        results.append(""NO"")
28
29
# Print results
30
sys.stdout.write(""\n"".join(results) + ""\n"")
31",157,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870703
1386870693,saurabha_srs75,unknown,unknown,"1
def calculate_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Calculate the number of non-empty subsets
5
        results.append((2 ** n) - 1)
6
    return results
7
8
# Input reading
9
T = int(input())  # Number of test cases
10
test_cases = []
11
for _ in range(T):
12
    N = int(input())  # Size of the set
13
    test_cases.append(N)
14
15
# Process and output results
16
results = calculate_subsets(test_cases)
17
for result in results:
18
    print(result)",157,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870693
1386870695,saumyamurkya,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",157,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870695
1386870696,vikasmourya54321,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin>>T;
12
    while(T--){
13
        long long M,N,A;
14
         cin>>M>>N>>A;
15
        long long rows = (M + A - 1) / A; 
16
        long long cols = (N + A - 1) / A;
17
        long long result = rows * cols;
18
19
        cout << result << endl;
20
    }
21
    return 0;
22
}
23",157,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870696
1386870692,sanketsaha04,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        long long M, N, A;
11
        cin >> M >> N >> A;
12
13
        // Calculate the number of pieces in both dimensions
14
        long long widthCount = (M + A - 1) / A; // Equivalent to ceil(M / A)
15
        long long heightCount = (N + A - 1) / A; // Equivalent to ceil(N / A)
16
17
        // Calculate the total number of pieces
18
        long long totalPieces = widthCount * heightCount;
19
20
        cout << totalPieces << endl;
21
    }
22
23
    return 0;
24
}
25",157,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870692
1386870686,h1032220669,unknown,unknown,"1
def solve_cloth_covering(M, N, A):
2
   3
    pieces_length = (M + A - 1) // A  
4
    pieces_width = (N + A - 1) // A   
5
   6
    return pieces_length * pieces_width
7
8
def main():
9
    10
    T = int(input())
11
    12
    13
    for _ in range(T):
14
        15
        M, N, A = map(int, input().split())
16
        17
        18
        result = solve_cloth_covering(M, N, A)
19
        print(result)
20
21
if __name__ == ""__main__"":
22
    main()",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870686
1386870687,alekarchinmay051,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870687
1386870688,h1032221621,unknown,unknown,"1
#include <stdio.h>
2
3
long long calculate_cloth_pieces(long long M, long long N, long long A) {
4
    long long rows = (M + A - 1) / A;
5
    long long cols = (N + A - 1) / A;
6
7
    return rows * cols;
8
}
9
10
int main() {
11
    int T;
12
    scanf(""%d"", &T);
13
14
    // Process each test case
15
    for (int i = 0; i < T; i++) {
16
        long long M, N, A;
17
        scanf(""%lld %lld %lld"", &M, &N, &A);
18
19
        printf(""%lld\n"", calculate_cloth_pieces(M, N, A));
20
    }
21
22
    return 0;
23
}
24",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870688
1386870682,sakshimashalkar1,unknown,unknown,"1
def non_empty_subsets():
2
    # Read the number of test cases
3
    T = int(input())
4
    results = []
5
    6
    for _ in range(T):
7
        # Read the value of N for each test case
8
        N = int(input())
9
        # Calculate 2^N - 1 (number of non-empty subsets)
10
        results.append((1 << N) - 1)  # Using bitwise shift for 2^N
11
    12
    # Output all results, one per line
13
    for result in results:
14
        print(result)
15
16
# Run the function
17
non_empty_subsets()
18",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870682
1386870683,omg40787,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate number of pieces needed for length M and width N
8
        pieces_for_length = (M + A - 1) // A
9
        pieces_for_width = (N + A - 1) // A
10
        # Total pieces is the product of the pieces for length and width
11
        total_pieces = pieces_for_length * pieces_for_width
12
        results.append(total_pieces)
13
    14
    return results
15
16
# Input handling
17
T = int(input())  # Read number of test cases
18
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
19
20
# Process each test case and output results
21
results = minimum_cloth_pieces(T, test_cases)
22
for result in results:
23
    print(result)
24",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870683
1386870684,harshm8540,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;  
8
9
    while (T--) {
10
        long long M, N, A;
11
        cin >> M >> N >> A;   
12
        13
        long long squares_along_length = (M + A - 1) / A; 
14
        long long squares_along_width = (N + A - 1) / A; 
15
 16
        long long total_squares = squares_along_length * squares_along_width;
17
18
        cout << total_squares << endl;
19
    }
20
21
    return 0;
22
}
23",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870684
1386870676,tripathiayush161,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    return 2**n - 1
3
4
if __name__ == ""__main__"":
5
    t = int(input()) 
6
7
    for _ in range(t):
8
        n = int(input())  
9
        print(count_non_empty_subsets(n))",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870676
1386870678,aryanshukla9004,unknown,unknown,"1
# Input number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    # Input the size of the array
7
    N = int(input())
8
    # Input the array
9
    A = list(map(int, input().split()))
10
    11
    # Count the number of odd numbers
12
    odd_count = sum(1 for x in A if x % 2 != 0)
13
    14
    # Check if there are at least two odd numbers
15
    if odd_count >= 2:
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Output the results
21
print(""\n"".join(results))",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870678
1386870677,pandeyrishabh966,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
10
int main() {
11
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
12
    int T;
13
    cin >> T;
14
15
    while (T--) {
16
        long long M, N, A;
17
        cin >> M >> N >> A; 
18
        long long pal = (M + A - 1) / A;
19
        long long paw = (N + A - 1) / A;
20
        long long total= pal * paw;
21
22
        23
        cout << total << endl;
24
    }
25
    return 0;
26
}
27",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870677
1386870674,neharoy_1158,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        rows = math.ceil(M / A)
8
        columns = math.ceil(N / A)
9
        results.append(rows * columns)
10
    return results
11
12
T = int(input())
13
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
14
15
for result in minimum_cloth_pieces(test_cases):
16
    print(result)
17",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870674
1386870668,abhijeetjha913,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int min_cloth_pieces(int M, int N, int A) {
5
    6
    int num_length = (M + A - 1) / A;
7
    int num_width = (N + A - 1) / A;
8
    9
    return num_length * num_width;
10
}
11
12
int main() {
13
    int T;
14
    cin >> T;  
15
    16
    while (T--) {
17
        int M, N, A;
18
        cin >> M >> N >> A;  
19
        cout << min_cloth_pieces(M, N, A) << endl;  
20
    }
21
    22
    return 0;
23
}
24",159,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870668
1386870671,h1032220850,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int T; // Number of test cases
7
    cin >> T;
8
9
    while (T--) {
10
        long long M, N, A; // Dimensions of the rectangle and the side length of the square cloth
11
        cin >> M >> N >> A;
12
13
        // Calculate the number of squares required along the length and width
14
        long long horizontalPieces = (M + A - 1) / A; // Equivalent to ceil(M / A)
15
        long long verticalPieces = (N + A - 1) / A;   // Equivalent to ceil(N / A)
16
17
        // Total pieces required
18
        long long totalPieces = horizontalPieces * verticalPieces;
19
20
        // Output the result for the current test case
21
        cout << totalPieces << endl;
22
    }
23
24
    return 0;
25
}",159,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870671
1386870673,tanishrai,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Squarescaping {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        int T = scanner.nextInt();
8
9
        for (int t = 0; t < T; t++) {
10
            long M = scanner.nextLong();
11
            long N = scanner.nextLong();
12
            long A = scanner.nextLong();
13
14
            long numPieces = (long) Math.ceil((double) M / A) * (long) Math.ceil((double) N / A);
15
16
            System.out.println(numPieces);
17
        }
18
19
        scanner.close();
20
    }
21
}",159,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870673
1386870665,ketan_kumavat191,unknown,unknown,"1
#include <iostream>
2
3
#include <cmath>
4
5
using namespace std;
6
7
int main() {
8
9
    int T;
10
11
    cin >> T;
12
13
    while (T--) {
14
15
        long long M, N, A;
16
17
        cin >> M >> N >> A;
18
19
        long long piecesInLength = (M + A - 1) / A;
20
21
        long long piecesInWidth = (N + A - 1) / A;
22
23
        long long totalPieces = piecesInLength * piecesInWidth;
24
25
        cout << totalPieces << endl;
26
27
    }
28
29
    return 0;
30
31
}",159,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870665
1386870666,bhaktiakoliya23,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
    """"""
3
    Calculates the minimum number of square cloth pieces needed to cover a rectangular land.
4
5
    Args:
6
        M: Length of the land.
7
        N: Width of the land.
8
        A: Side length of each square cloth piece.
9
10
    Returns:
11
        The minimum number of cloth pieces required.
12
    """"""
13
14
    # Calculate the number of cloth pieces needed along each dimension
15
    pieces_along_length = (M + A - 1) // A
16
    pieces_along_width = (N + A - 1) // A
17
18
    # Total number of cloth pieces needed
19
    total_pieces = pieces_along_length * pieces_along_width
20
21
    return total_pieces
22
23
if _name_ == ""_main_"":
24
    T = int(input())  # Number of test cases
25
26
    for _ in range(T):
27
        M, N, A = map(int, input().split())
28
        result = min_cloth_pieces(M, N, A)
29
        print(result)",159,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870666
1386870663,akshaytcet777,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(t, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces along both dimensions
8
        rows = math.ceil(M / A)
9
        cols = math.ceil(N / A)
10
        # Total number of pieces required
11
        results.append(rows * cols)
12
    return results
13
14
if __name__ == ""__main__"":
15
    T = int(input())  # Number of test cases
16
    test_cases = []
17
18
    for _ in range(T):
19
        M, N, A = map(int, input().split())
20
        test_cases.append((M, N, A))
21
22
    # Get the results
23
    results = min_cloth_pieces(T, test_cases)
24
25
    # Print each result on a new line
26
    for result in results:
27
        print(result)
28",159,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870663
1386870658,h1032220619,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def calculate_non_empty_subsets(n):
3
    return (1 << n) - 1  # Using bitwise shift for 2^n
4
5
# Read input
6
T = int(input())  # Number of test cases
7
results = []
8
9
for _ in range(T):
10
    N = int(input())  # Size of the set
11
    results.append(calculate_non_empty_subsets(N))
12
13
# Output results
14
for res in results:
15
    print(res)
16",159,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870658
1386870662,amanmaurya_me,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
       Scanner scanner = new Scanner(System.in);
8
        int T = scanner.nextInt();
9
        for (int t = 0; t < T; t++) {
10
            long M = scanner.nextLong();
11
            long N = scanner.nextLong();
12
            long A = scanner.nextLong();
13
            System.out.println(calculateMinClothPieces(M, N, A));
14
        }
15
    }
16
    private static long calculateMinClothPieces(long M, long N, long A) {
17
        long horizontalPieces = (M + A - 1) / A;
18
        long verticalPieces = (N + A - 1) / A;
19
        return horizontalPieces * verticalPieces;
20
    }
21
}",159,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870662
1386870659,aryannimkar206,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(t, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        8
        length_cloths = math.ceil(M / A)
9
        width_cloths = math.ceil(N / A)
10
       11
        total_cloths = length_cloths * width_cloths
12
        results.append(total_cloths)
13
    return results
14
15
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    test_cases.append(tuple(map(int, input().split())))
20
21
22
results = minimum_cloth_pieces(T, test_cases)
23
24
25
for result in results:
26
    print(result)
27",159,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870659
1386870656,dhanashrikuwar25,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        9
        // Read the number of test cases
10
        int T = scanner.nextInt();
11
        12
        // Loop through each test case
13
        while (T-- > 0) {
14
            // Read M, N, A for each test case
15
            long M = scanner.nextLong();
16
            long N = scanner.nextLong();
17
            long A = scanner.nextLong();
18
            19
            long rows = (M + A - 1) / A;  
20
            long cols = (N + A - 1) / A;  
21
            22
            // Total number of pieces
23
            long totalPieces = rows * cols;
24
            25
            // Output result for each test case
26
            System.out.println(totalPieces);
27
        }
28
}
29
}",159,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870656
1386870651,purvi_vishwakar1,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
    pieces_along_length = (M + A - 1) // A
3
    pieces_along_width = (N + A - 1) // A
4
    5
    total_pieces = pieces_along_length * pieces_along_width
6
7
    return total_pieces
8
9
if __name__ == ""__main__"":
10
    T = int(input())
11
12
    for _ in range(T):
13
        M, N, A = map(int, input().split())
14
        result = min_cloth_pieces(M, N, A)
15
        print(result)",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870651
1386870652,h1032221768,unknown,unknown,"1
2
def minimum_cloth_pieces(T, test_cases):
3
    results = []
4
    for t in range(T):
5
        M, N, A = test_cases[t]
6
    7
        tiles_length = (M + A - 1) // A  
8
        tiles_width = (N + A - 1) // A 
9
        results.append(tiles_length * tiles_width)
10
    return results
11
12
T = int(input())
13
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
14
15
16
results = minimum_cloth_pieces(T, test_cases)
17
for res in results:
18
    print(res)
19",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870652
1386870655,h1032231261,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
    """"""
3
    Calculates the minimum number of cloth pieces needed to cover an M x N land 
4
    using cloth pieces of size A x A.
5
6
    Args:
7
        M: Width of the land.
8
        N: Length of the land.
9
        A: Size of each cloth piece.
10
11
    Returns:
12
        The minimum number of cloth pieces needed.
13
    """"""
14
15
    # Calculate the number of cloth pieces needed along each dimension
16
    pieces_along_width = (M + A - 1) // A
17
    pieces_along_length = (N + A - 1) // A
18
19
    # Calculate the total number of cloth pieces needed
20
    total_pieces = pieces_along_width * pieces_along_length
21
22
    return total_pieces
23
24
if __name__ == ""__main__"":
25
    T = int(input())
26
27
    for _ in range(T):
28
        M, N, A = map(int, input().split())
29
        result = min_cloth_pieces(M, N, A)
30
        print(result)",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870655
1386870647,jayyprakashhyad1,unknown,unknown,"1
// Problem: Squarescaping
2
// Contest: HackerRank - TCET Shastra Coding Contest 1-A
3
// URL: https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping
4
// Memory Limit: 512 MB
5
// Time Limit: 4000 ms
6
// 
7
// Powered by CP Editor (https://cpeditor.org)
8
9
#include <bits/stdc++.h>
10
#include <ext/pb_ds/assoc_container.hpp>
11
#include <ext/pb_ds/tree_policy.hpp>
12
#include <ext/pb_ds/detail/standard_policies.hpp>
13
#include <cmath>
14
#define int long long int
15
#define pb push_back
16
/*---------------------------------------------------------------------------------------------------------------------------------*/
17
/*ASCII small case-> a-97 to z-122
18
upper case-> A-65 to Z-90*/
19
#define nl ""\n""
20
#define mp map<int, int>
21
#define all(v) v.begin(), v.end()
22
#define F first
23
#define S second
24
#define ump unordered_map<long long, int, custom_hash>
25
#define mstpi multiset<pair<int, int> >
26
#define mst multiset<int>
27
#define vec vector<int>
28
#define pi pair<int, int>
29
#define ld long double
30
#define vep vector<pair<int, int>>
31
#define ul unsigned long long
32
#define loop1 for (int i = 0; i < n; i++)
33
#define REP(i, a, b) for (int i = a; i <= b; i++)
34
#define NO cout << ""NO"" << endl
35
#define YES cout << ""YES"" << endl
36
using namespace std;
37
using namespace __gnu_pbds;
38
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set; //find_by_order, order_of_key, greater_equal<int> -> making it desc order
39
/*---------------------------------------------------------------------------------------------------------------------------------*/
40
const double PI = 3.1415926535;
41
const int inf = 1e18;
42
const int mod = 1000000007;
43
/*---------------------------------------------------------------------------------------------------------------------------------*/
44
int modmul(int a, int b, int m)
45
{
46
    a %= m;
47
    b %= m;
48
    return (a * b) % m;
49
}
50
int modexp(int n, int x)
51
{
52
    int ans = 1;
53
    while (n > 0)
54
    {
55
        if (n & 1)
56
        {
57
            ans = (ans * x) % mod;
58
        }
59
        n >>= 1;
60
        x = (x * x) % mod;
61
    }
62
    return ans;
63
}
64
/*---------------------------------------------------------------------------------------------------------------------------------*/
65
string add(string a, string b)
66
{
67
    string ans = """";
68
    int carry = 0;
69
    while (!a.empty() || !b.empty() || carry > 0)
70
    {
71
        int digitA = a.empty() ? 0 : a.back() - '0';
72
        int digitB = b.empty() ? 0 : b.back() - '0';
73
        int sum = digitA + digitB + carry;
74
        ans = to_string(sum % 10) + ans;
75
        carry = sum / 10;
76
        if (!a.empty())
77
            a.pop_back();
78
        if (!b.empty())
79
            b.pop_back();
80
    }
81
    return ans;
82
}
83
string ministrnum(string a, string b)
84
{
85
    if (a.length() > b.length())
86
        return b;
87
    else if (b.length() > a.length())
88
        return a;
89
    else
90
    {
91
        int n = a.length();
92
        for (int i = 0; i < n; i++)
93
        {
94
            if (a[i] > b[i])
95
                return b;
96
            else if (a[i] < b[i])
97
                return a;
98
        }
99
    }
100
    return a;
101
}
102
void solve()
103
{
104
    int n, m, a;
105
    cin>>n>>m>>a;
106
    int ans = (n + a - 1)/a * (m + a - 1)/a;
107
    cout<<ans<<endl;
108
}
109
int32_t main()
110
{
111
    ios_base ::sync_with_stdio(0);
112
    cin.tie(0);
113
    cout.tie(0);
114
    int t = 1;
115
    cin >> t;
116
    while (t--)
117
        solve();
118
}",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870647
1386870648,h1032220104,unknown,unknown,"1
import math
2
3
T = int(input())
4
5
for _ in range(T):
6
7
    M, N, A = map(int, input().split())
8
9
    print(math.ceil(M / A) * math.ceil(N / A))",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870648
1386870650,parshadk04,unknown,unknown,"1
def minimum_cloth_pieces(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        M, N, A = case
5
        rows = (M + A - 1) // A  
6
        cols = (N + A - 1) // A  
7
        results.append(rows * cols)
8
    return results
9
T = int(input())
10
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
11
12
output = minimum_cloth_pieces(T, test_cases)
13
for result in output:
14
    print(result)",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870650
1386870644,hardikj1511,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of pieces required in each dimension
8
        num_pieces_length = math.ceil(M / A)
9
        num_pieces_width = math.ceil(N / A)
10
        # Total number of pieces
11
        total_pieces = num_pieces_length * num_pieces_width
12
        results.append(total_pieces)
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    M, N, A = map(int, input().split())
20
    test_cases.append((M, N, A))
21
22
# Get the results
23
results = min_cloth_pieces(test_cases)
24
25
# Output results
26
for res in results:
27
    print(res)
28",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870644
1386870643,pandeyshreya358,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870643
1386870645,kerissapatel,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(test_cases):
4
    results = []
5
    for M, N, A in test_cases:
6
        # Calculate the number of cloth pieces needed in each dimension
7
        pieces_along_length = math.ceil(M / A)
8
        pieces_along_width = math.ceil(N / A)
9
        10
        # Total pieces needed
11
        results.append(pieces_along_length * pieces_along_width)
12
    return results
13
14
# Input
15
T = int(input())
16
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
17
18
# Compute results
19
results = min_cloth_pieces(test_cases)
20
21
# Output results
22
for res in results:
23
    print(res)
24",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870645
1386870642,upadhyaydhruv439,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
11
    int t; 
12
    cin >> t;  // Read the number of test cases
13
    14
    while (t--) {
15
        long long m, n, a;
16
        cin >> m >> n >> a;  // Read dimensions M, N and side length A
17
        18
        // Calculate the number of cloth pieces required
19
        long long lengthPieces = (m + a - 1) / a; // Equivalent to ceil(m / a)
20
        long long widthPieces = (n + a - 1) / a;  // Equivalent to ceil(n / a)
21
        long long result = lengthPieces * widthPieces;
22
        23
        // Output the result
24
        cout << result << endl;
25
    }
26
    return 0;
27
}
28",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870642
1386870635,nileshparmaroff1,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Squarescaping {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
10
        // Process each test case
11
        for (int t = 0; t < T; t++) {
12
            // Read dimensions of land (M x N) and cloth size (A x A)
13
            long M = scanner.nextLong();
14
            long N = scanner.nextLong();
15
            long A = scanner.nextLong();
16
17
            // Calculate the number of cloth pieces needed
18
            long numPieces = (long) Math.ceil((double) M / A) * (long) Math.ceil((double) N / A);
19
20
            // Output the result
21
            System.out.println(numPieces);
22
        }
23
24
        scanner.close();
25
    }
26
}
27",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870635
1386870636,amansharmaa1205,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870636
1386870638,Swarnimmungad,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
  3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870638
1386870631,nayaktanmayg,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
    import math
3
    return math.ceil(M / A) * math.ceil(N / A)
4
5
if __name__ == ""__main__"":
6
    T = int(input())
7
    for _ in range(T):
8
        M, N, A = map(int, input().split())
9
        print(min_cloth_pieces(M, N, A))
10",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870631
1386870633,h1032220736,unknown,unknown,"1
import sys
2
3
# Read all inputs
4
inputs = sys.stdin.read().strip().split(""\n"")
5
6
# Read the number of test cases
7
T = int(inputs[0])
8
results = []
9
10
# Process each test case
11
for i in range(1, T + 1):
12
    M, N, A = map(int, inputs[i].split())
13
    # Calculate number of squares needed for each dimension
14
    squares_length = (M + A - 1) // A
15
    squares_width = (N + A - 1) // A
16
    # Calculate total squares needed
17
    total_squares = squares_length * squares_width
18
    results.append(total_squares)
19
20
# Print all results
21
for result in results:
22
    print(result)
23",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870633
1386870634,antara4210,unknown,unknown,"1
import sys
2
import math
3
4
# Read the number of test cases
5
t = int(sys.stdin.readline().strip())
6
7
for _ in range(t):
8
    # Read M, N, and A
9
    M, N, A = map(int, sys.stdin.readline().strip().split())
10
11
    # Calculate the number of squares needed along M (length) and N (width)
12
    numLength = math.ceil(M / A)
13
    numWidth  = math.ceil(N / A)
14
15
    # Calculate the total number of cloth pieces
16
    total = numLength * numWidth
17
18
    # Output the result
19
    print(total)",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870634
1386870618,h1032221590,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed in both dimensions
8
        cloth_in_length = math.ceil(M / A)
9
        cloth_in_width = math.ceil(N / A)
10
        # Total cloth pieces
11
        total_cloths = cloth_in_length * cloth_in_width
12
        results.append(total_cloths)
13
    return results
14
15
# Input Handling
16
def main():
17
    T = int(input())  # Number of test cases
18
    test_cases = []
19
    for _ in range(T):
20
        M, N, A = map(int, input().split())
21
        test_cases.append((M, N, A))
22
23
    # Calculate results
24
    results = minimum_cloth_pieces(test_cases)
25
26
    # Print results
27
    for result in results:
28
        print(result)
29
30
if __name__ == ""__main__"":
31
    main()",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870618
1386870614,aryanshukla9004,unknown,unknown,"1
import math
2
3
# Input the number of test cases
4
T = int(input())
5
results = []
6
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
    # Calculate the number of cloth pieces
10
    pieces_length = math.ceil(M / A)
11
    pieces_width = math.ceil(N / A)
12
    results.append(pieces_length * pieces_width)
13
14
# Output the results
15
for result in results:
16
    print(result)",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870614
1386870630,amir_kamal09,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870630
1386870612,bhoganashish25,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed in both dimensions
8
        cloth_in_length = math.ceil(M / A)
9
        cloth_in_width = math.ceil(N / A)
10
        # Total cloth pieces
11
        total_cloths = cloth_in_length * cloth_in_width
12
        results.append(total_cloths)
13
    return results
14
15
# Input Handling
16
def main():
17
    T = int(input())  # Number of test cases
18
    test_cases = []
19
    for _ in range(T):
20
        M, N, A = map(int, input().split())
21
        test_cases.append((M, N, A))
22
23
    # Calculate results
24
    results = minimum_cloth_pieces(test_cases)
25
26
    # Print results
27
    for result in results:
28
        print(result)
29
30
if __name__ == ""__main__"":
31
    main()",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870612
1386870606,sg0802599,unknown,unknown,"1
import math
2
3
4
T = int(input())
5
6
for _ in range(T):
7
   8
    M, N, A = map(int, input().split())
9
10
    cloths_for_M = math.ceil(M / A)
11
    cloths_for_N = math.ceil(N / A)
12
    13
    result = cloths_for_M * cloths_for_N
14
15
    print(result)
16",162,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870606
1386870608,Rawat_vr44,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        pieces_length = math.ceil(M / A)
8
        pieces_width = math.ceil(N / A)
9
        results.append(pieces_length * pieces_width)
10
    return results
11
12
T = int(input())
13
test_cases = []
14
for _ in range(T):
15
    M, N, A = map(int, input().split())
16
    test_cases.append((M, N, A))
17
18
output = minimum_cloth_pieces(test_cases)
19
20
for result in output:
21
    print(result)
22",162,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870608
1386870609,tarang_rathod,unknown,unknown,"1
import sys
2
import math
3
4
# Read the number of test cases
5
t = int(sys.stdin.readline().strip())
6
7
for _ in range(t):
8
    # Read M, N, and A
9
    M, N, A = map(int, sys.stdin.readline().strip().split())
10
11
    # Calculate the number of squares needed along M (length) and N (width)
12
    numLength = math.ceil(M / A)
13
    numWidth  = math.ceil(N / A)
14
15
    # Calculate the total number of cloth pieces
16
    total = numLength * numWidth
17
18
    # Output the result
19
    print(total)",162,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870609
1386870593,psthefreak,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",162,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870593
