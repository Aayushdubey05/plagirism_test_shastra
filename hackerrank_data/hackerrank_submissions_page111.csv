submission_id,username,problem_name,language,code,page,url
1386871324,amir_kamal09,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871324
1386871326,aryanshukla9004,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871326
1386871327,drashtitalia,unknown,unknown,"1
# Read the number of test cases
2
T = int(input())
3
4
# Prepare results for all test cases
5
results = []
6
for _ in range(T):
7
    N = int(input())
8
    # Calculate the number of non-empty subsets
9
    results.append((2 ** N) - 1)
10
11
# Print all results, one per line
12
for result in results:
13
    print(result)
14",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871327
1386871321,tiwarikhushi907,unknown,unknown,"1
def can_partition_odd_product(N, arr):
2
    # Count odd and even numbers
3
    odd_count = sum(1 for x in arr if x % 2)
4
    even_count = N - odd_count
5
    6
    # If we have 0 or 1 odd number, impossible to get two odd sums
7
    if odd_count <= 1:
8
        return False
9
    10
    # If we have at least 2 odd numbers, we can always form two odd sums
11
    # Put one odd number in S1, another in S2, distribute rest to maintain non-empty
12
    return True
13
14
def solve():
15
    T = int(input())
16
    for _ in range(T):
17
        N = int(input())
18
        arr = list(map(int, input().split()))
19
        print(""YES"" if can_partition_odd_product(N, arr) else ""NO"")
20
21
if __name__ == ""__main__"":
22
    solve()",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871321
1386871322,sakshimashalkar1,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces required
4
def calculate_cloth_pieces(test_cases):
5
    results = []
6
    for M, N, A in test_cases:
7
        # Calculate the number of squares needed along the length and width
8
        length_covered = math.ceil(M / A)
9
        width_covered = math.ceil(N / A)
10
        # Total squares required
11
        total_squares = length_covered * width_covered
12
        results.append(total_squares)
13
    return results
14
15
# Taking input from the user
16
T = int(input())
17
test_cases = []
18
19
for _ in range(T):
20
    M, N, A = map(int, input().split())
21
    test_cases.append((M, N, A))
22
23
# Calculate and print the results for each test case
24
results = calculate_cloth_pieces(test_cases)
25
26
for result in results:
27
    print(result)",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871322
1386871323,singhyatharthsn,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
bool canPartitionWithOddProduct(const vector<int>& A) {
6
    int oddCount = 0;  // Count of odd numbers in the array
7
8
    // Count the number of odd numbers in the array
9
    for (int num : A) {
10
        if (num % 2 != 0) {
11
            oddCount++;
12
        }
13
    }
14
15
    // To form two partitions with an odd product, there must be at least one odd number
16
    // in each partition, which requires at least two odd numbers in total.
17
    return oddCount >= 2;
18
}
19
20
int main() {
21
    ios_base::sync_with_stdio(false);
22
    cin.tie(nullptr);
23
24
    int T; // Number of test cases
25
    cin >> T;
26
27
    while (T--) {
28
        int N; // Number of elements in the array
29
        cin >> N;
30
31
        vector<int> A(N);
32
        for (int i = 0; i < N; ++i) {
33
            cin >> A[i];
34
        }
35
36
        // Output ""YES"" if it's possible to partition, otherwise ""NO""
37
        if (canPartitionWithOddProduct(A)) {
38
            cout << ""YES\n"";
39
        } else {
40
            cout << ""NO\n"";
41
        }
42
    }
43
44
    return 0;
45
}",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871323
1386871318,h1032221642,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871318
1386871320,h1032221052,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int t;
10
    cin >> t;
11
    while (t--) {
12
        int n, ctr=0;
13
        cin >> n;
14
        int arr[n];
15
        for (int i=0; i<n; i++) {
16
            cin>>arr[i];
17
            if (arr[i]%2 != 0) {
18
                ctr++;
19
            }
20
        }
21
22
        if (ctr>=2) {
23
            cout << ""Yes"" << endl;
24
        } else {
25
            cout << ""No"" << endl;
26
        }
27
    }
28
    return 0;
29
}
30
31",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871320
1386871319,rudra07032004,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871319
1386871314,h1032221611,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871314
