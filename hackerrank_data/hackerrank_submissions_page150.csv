submission_id,username,problem_name,language,code,page,url
1386870804,mishrashashank31,unknown,unknown,"1
def min_cloth_pieces(test_cases):
2
    results = []
3
    for case in test_cases:
4
        M, N, A = case
5
        pieces = ((M + A - 1) // A) * ((N + A - 1) // A)
6
        results.append(pieces)
7
    return results
8
9
T = int(input())
10
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
11
12
results = min_cloth_pieces(test_cases)
13
14
for res in results:
15
    print(res)
16",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870804
1386870807,aaryatcet22,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(n):
3
    # Total subsets of a set with n elements = 2^n
4
    # Non-empty subsets = Total subsets - 1 (remove empty set)
5
    return (1 << n) - 1
6
7
# Input number of test cases
8
T = int(input())
9
10
# Process each test case
11
results = []
12
for _ in range(T):
13
    N = int(input())
14
    results.append(count_non_empty_subsets(N))
15
16
# Output the results
17
for result in results:
18
    print(result)
19",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870807
1386870806,sumeetshah107,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces needed
4
def minimum_cloth_pieces(T, test_cases):
5
    results = []
6
    for case in test_cases:
7
        M, N, A = case
8
        # Calculate the number of pieces needed for length and width
9
        num_pieces_length = math.ceil(M / A)
10
        num_pieces_width = math.ceil(N / A)
11
        # Total number of pieces is the product of pieces along length and width
12
        total_pieces = num_pieces_length * num_pieces_width
13
        results.append(total_pieces)
14
    return results
15
16
# Input reading
17
T = int(input())  # Number of test cases
18
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
19
20
# Process and output results
21
results = minimum_cloth_pieces(T, test_cases)
22
for result in results:
23
    print(result)
24",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870806
1386870801,h1032221736,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870801
1386870802,yansh985,unknown,unknown,"1
def minimum_cloth_pieces(M, N, A):
2
    pieces_length = (M + A - 1) // A
3
    pieces_width = (N + A - 1) // A
4
    return pieces_length * pieces_width
5
6
def main():
7
    T = int(input().strip())
8
    for _ in range(T):
9
        M, N, A = map(int, input().split())
10
        result = minimum_cloth_pieces(M, N, A)
11
        print(result)
12
13
if __name__ == ""__main__"":
14
    main()",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870802
1386870803,nj6097114,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    16
17
    18
    19
20
    int Neel;
21
22
    cin >> Neel;
23
24
    while (Neel--) {
25
26
        long long M, N, A;
27
28
        cin >> M >> N >> A; 
29
30
        long long pieces_along_length = (M + A - 1) / A;
31
32
        long long pieces_along_width = (N + A - 1) / A;
33
34
       35
36
        long long ansP= pieces_along_length * pieces_along_width;
37
38
 39
40
        cout << ansP<< endl;
41
42
    }
43
44
    45
46
    return 0;
47
48
}",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870803
1386870797,sanketsaha04,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
9
    while (T--) {
10
        int N;
11
        cin >> N;
12
13
        // Calculate the number of non-empty subsets
14
        long long nonEmptySubsets = (1LL << N) - 1;
15
16
        cout << nonEmptySubsets << endl;
17
    }
18
19
    return 0;
20
}
21",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870797
1386870799,adityapoojary07,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
7
        // Read the number of test cases
8
        int T = sc.nextInt();
9
10
        // Process each test case
11
        while (T-- > 0) {
12
            // Read the value of N
13
            int N = sc.nextInt();
14
15
            // Calculate the number of non-empty subsets using the formula: (2^N - 1)
16
            int result = (1 << N) - 1; // Efficient computation of 2^N - 1 using bit shifting
17
18
            // Print the result
19
            System.out.println(result);
20
        }
21
22
        sc.close();
23
    }
24
}
25",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870799
1386870800,jashbarot05,unknown,unknown,"1
def solve_case(M, N, A):
2
    # Calculate squares needed for length
3
    squares_length = (M + A - 1) // A
4
    5
    # Calculate squares needed for width
6
    squares_width = (N + A - 1) // A
7
    8
    # Total squares needed is product of both dimensions
9
    return squares_length * squares_width
10
11
# Reading number of test cases
12
T = int(input(""""))
13
14
# Process each test case
15
for _ in range(T):
16
    # Read M, N, A for this test case
17
    M, N, A = map(int, input().split())
18
    result = solve_case(M, N, A)
19
    print(result)",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870800
1386870796,shivam_r_mishra1,unknown,unknown,"1
def count_non_empty_subsets():
2
    # Number of test cases
3
    test_cases = int(input(""Enter the number of test cases: ""))
4
    outputs = []
5
    6
    for _ in range(test_cases):
7
        # Input the size of the set
8
        size = int(input(""Enter the size of the set: ""))
9
        # Compute the count of non-empty subsets as 2^size - 1
10
        outputs.append(2**size - 1)
11
    12
    # Print results for all test cases
13
    print(""Non-empty subsets for each test case:"")
14
    for result in outputs:
15
        print(result)
16
17
# Call the function
18
count_non_empty_subsets()
19",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870796
