submission_id,username,problem_name,language,code,page,url
1386871181,harshy8013698,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871181
1386871183,shaunaksinkar,unknown,unknown,"1
def num_non_empty_subsets(n):
2
    """"""
3
    Calculates the number of non-empty subsets for a set of n elements.
4
5
    Args:
6
        n: The number of elements in the set.
7
8
    Returns:
9
        The number of non-empty subsets.
10
    """"""
11
    return 2**n - 1  # Total subsets (2^n) minus the empty set
12
13
if __name__ == ""__main__"":
14
    T = int(input())
15
16
    for _ in range(T):
17
        N = int(input())
18
        result = num_non_empty_subsets(N)
19
        print(result)",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871183
1386871182,prathameshjanug1,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt();
8
        9
        for (int t = 0; t < T; t++) {
10
            long M = scanner.nextLong();
11
            long N = scanner.nextLong();
12
            long A = scanner.nextLong();
13
            14
            System.out.println(calculateMinClothPieces(M, N, A));
15
        }
16
    }
17
    18
    private static long calculateMinClothPieces(long M, long N, long A) {
19
        long horizontalPieces = (M + A - 1) / A;
20
        long verticalPieces = (N + A - 1) / A;
21
        return horizontalPieces * verticalPieces;
22
    }
23
}
24
25",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871182
1386871177,h1032220732,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        rows = (M + A - 1) // A
6
        cols = (N + A - 1) // A
7
        results.append(rows * cols)
8
    return results
9
10
T = int(input())
11
inputs = [tuple(map(int, input().split())) for _ in range(T)]
12
results = squarescaping(inputs)
13
14
for result in results:
15
    print(result)
16",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871177
1386871178,rudra07032004,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871178
1386871180,kothareprateek,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871180
1386871174,ks4556737,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
5
public class Solution {
6
    public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        int T = scanner.nextInt();
9
        for (int t = 0; t < T; t++) {
10
            long M = scanner.nextLong();
11
            long N = scanner.nextLong();
12
            long A = scanner.nextLong();
13
            long lengthPieces = (M + A - 1) / A;
14
            long widthPieces = (N + A - 1) / A;
15
            System.out.println(lengthPieces * widthPieces);
16
        }
17
        scanner.close();
18
    }
19
}",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871174
1386871175,anuragt1604,unknown,unknown,"1
def can_partition(arr):
2
    n = len(arr)
3
    total_sum = sum(arr)
4
    5
    for mask in range(1, (1 << n) - 1):
6
        sum1 = 0
7
        for i in range(n):
8
            if mask & (1 << i):
9
                sum1 += arr[i]
10
        sum2 = total_sum - sum1
11
        if sum1 * sum2 % 2 == 1:
12
            return True
13
    return False
14
15
def main():
16
    t = int(input())
17
    for _ in range(t):
18
        n = int(input())
19
        arr = list(map(int, input().split()))
20
        print(""YES"" if can_partition(arr) else ""NO"")
21
22
if __name__ == ""__main__"":
23
    main()",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871175
1386871176,dipanjaliprajap1,unknown,unknown,"1
def solve():
2
    T = int(input())  # Read the number of test cases
3
    for _ in range(T):
4
        N = int(input())  # Read the number of elements in the array
5
        A = list(map(int, input().split()))  # Read the array elements
6
        7
        # Count how many odd numbers are in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # If there are at least two odd numbers, we can partition into two odd-sum subsequences
11
        if odd_count >= 2:
12
            print(""YES"")
13
        else:
14
            print(""NO"")
15
16
# Calling the solve function to execute
17
solve()
18
19",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871176
1386871173,tripathiayush161,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",122,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871173
