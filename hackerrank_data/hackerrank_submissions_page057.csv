submission_id,username,problem_name,language,code,page,url
1386872033,avsingh02as02,unknown,unknown,"1
def calculate_non_empty_subsets(t, test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Calculate the number of non-empty subsets
5
        results.append((1 << N) - 1)  # Equivalent to 2^N - 1
6
    return results
7
8
# Input handling
9
t = int(input().strip())  # Number of test cases
10
test_cases = [int(input().strip()) for _ in range(t)]
11
12
# Calculate results
13
results = calculate_non_empty_subsets(t, test_cases)
14
15
# Print results
16
for result in results:
17
    print(result)",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872033
1386872034,harshitsingh9003,unknown,unknown,"1
def can_partition_to_odd_products(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, array = case
5
        # Count the number of odd numbers in the array
6
        odd_count = sum(1 for x in array if x % 2 == 1)
7
        # If there are at least 2 odd numbers, the answer is ""YES""
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input reading and processing
15
import sys
16
input = sys.stdin.read
17
data = input().split()
18
19
T = int(data[0])
20
test_cases = []
21
index = 1
22
for _ in range(T):
23
    n = int(data[index])
24
    index += 1
25
    array = list(map(int, data[index:index + n]))
26
    index += n
27
    test_cases.append((n, array))
28
29
# Solve and output results
30
answers = can_partition_to_odd_products(test_cases)
31
sys.stdout.write(""\n"".join(answers) + ""\n"")
32",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872034
1386872036,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N = test_cases[t][0]
5
        A = test_cases[t][1]
6
        7
        # Count the odd numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # At least 2 odd numbers are required
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())  # Number of test cases
20
test_cases = []
21
for _ in range(T):
22
    N = int(input())  # Number of integers
23
    A = list(map(int, input().split()))  # The array
24
    test_cases.append((N, A))
25
26
# Solve and output results
27
results = can_partition_to_odd_product(T, test_cases)
28
for result in results:
29
    print(result)
30",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872036
1386872030,fatima_A17,unknown,unknown,"1
import math
2
T = int(input())
3
for _ in range(T):
4
    N = int(input())
5
    print((1<<N)-1)",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872030
1386872031,anuragt1604,unknown,unknown,"1
def count_non_empty_subsets(t, test_cases):
2
    results = []
3
    for n in test_cases:
4
        results.append((1 << n) - 1)
5
    return results
6
7
t = int(input())
8
test_cases = [int(input()) for _ in range(t)]
9
10
results = count_non_empty_subsets(t, test_cases)
11
print(""\n"".join(map(str, results)))",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872031
1386872032,h1032220730,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        9
        # If total sum is odd, it's impossible to split into two subsequences with odd product
10
        if total_sum % 2 == 1:
11
            results.append(""NO"")
12
            continue
13
        14
        # Count the number of odd and even numbers
15
        odd_count = sum(1 for num in arr if num % 2 != 0)
16
        even_count = N - odd_count
17
        18
        # Check for partition possibility
19
        if odd_count > 0 and even_count > 0:
20
            results.append(""YES"")
21
        else:
22
            results.append(""NO"")
23
    24
    return results
25
26
# Input handling
27
T = int(input())
28
test_cases = []
29
for _ in range(T):
30
    N = int(input())
31
    arr = list(map(int, input().split()))
32
    test_cases.append((N, arr))
33
34
output = can_partition_odd_sum(T, test_cases)
35
for res in output:
36
    print(res)
37",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872032
1386872027,h1032221064,unknown,unknown,"1
def count_non_empty_subsets(t, test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Calculate total non-empty subsets
5
        results.append((1 << n) - 1)  # Equivalent to 2^n - 1
6
    return results
7
8
# Input
9
t = int(input())
10
test_cases = [int(input()) for _ in range(t)]
11
12
# Solve and Output
13
results = count_non_empty_subsets(t, test_cases)
14
print(""\n"".join(map(str, results)))",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872027
1386872028,anushkambtech,unknown,unknown,"1
def min_pieces(m,n,a):
2
    length = int((m+a-1)/a)
3
    width = int((n+a-1)/a)
4
    return length * width
5
    6
testcases = int(input())
7
for test in range(testcases):
8
    given_input = input().strip().split("" "")
9
    m,n,a = [int(num) for num in given_input]
10
    print(min_pieces(m,n,a))",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872028
1386872029,jharishabh2k3,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
3
i = int(input())
4
5
while i:
6
    useless = input()
7
    j = list(map(int, input().split()))
8
    if sum(j) % 2 != 0: 
9
        print(""NO"")
10
    else:
11
        tot = [1 for x in j if x % 2 != 0]
12
13
        if sum(tot) >= 2:
14
            print(""YES"")
15
        else:
16
            print(""NO"")
17
            18
    i-= 1",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872029
1386872026,sagarkanekar2004,unknown,unknown,"1
import math
2
def minimum_cloth_pieces(T, test_cases):
3
    results = []
4
    for case in test_cases:
5
        M, N, A = case
6
        num_squares_length = math.ceil(M / A)
7
        num_squares_width = math.ceil(N / A)
8
        total_squares = num_squares_length * num_squares_width
9
        results.append(total_squares)
10
    return results
11
T = int(input(""""))
12
test_cases = []
13
for _ in range(T):
14
    test_cases.append(tuple(map(int, input().split())))
15
results = minimum_cloth_pieces(T, test_cases)
16
for result in results:
17
    print(result)",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872026
