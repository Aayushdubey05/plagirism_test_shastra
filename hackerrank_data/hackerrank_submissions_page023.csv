submission_id,username,problem_name,language,code,page,url
1386872543,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())  # Size of array
7
        A = list(map(int, input().split()))  # Array elements
8
        9
        # Count odd numbers
10
        odd_count = sum(1 for x in A if x % 2 == 1)
11
        12
        # For the product of sums to be odd, we need:
13
        # 1. Each subsequence must have odd sum
14
        # 2. Need to be able to partition the odd numbers between subsequences
15
        16
        # If there's only 1 odd number, impossible to make both sums odd
17
        # If there are 2 odd numbers, impossible to make both sums odd (one subsequence would get even sum)
18
        # With 3 or more odd numbers, we can always partition to get odd sums:
19
        # - For odd count of odds (3,5,7..): put 1 in one subsequence, remainder in other
20
        # - For even count of odds (4,6,8..): split evenly between subsequences
21
        22
        can_partition = odd_count >= 3
23
        results.append(""YES"" if can_partition else ""NO"")
24
    25
    # Print results
26
    print(""\n"".join(results))
27
28
if __name__ == ""__main__"":
29
    solve()",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872543
1386872544,rathodlucky12k,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd numbers
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        7
        # Check for a valid partition:
8
        # - At least two odd numbers
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
import sys
16
17
def main():
18
    input = sys.stdin.read
19
    data = input().split()
20
    21
    T = int(data[0])  # Number of test cases
22
    test_cases = []
23
    index = 1
24
    25
    for _ in range(T):
26
        N = int(data[index])  # Size of the array
27
        index += 1
28
        A = map(int, data[index:index + N])  # Map input directly
29
        index += N
30
        test_cases.append((N, A))
31
    32
    # Solve and collect results
33
    results = can_partition_odd_product(test_cases)
34
    35
    # Output the results efficiently
36
    sys.stdout.write(""\n"".join(results) + ""\n"")
37
38
if __name__ == ""__main__"":
39
    main()
40",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872544
1386872542,h1032231295,unknown,unknown,"1
def solve_test_cases(M, N, A):
2
    squares_lengths = (M + A - 1) // A  
3
    squares_widths = (N + A - 1) // A   
4
    5
    return squares_lengths * squares_widths
6
7
T = int(input())
8
9
for _ in range(T):
10
    M, N, A = map(int, input().split())
11
    results = solve_test_cases(M, N, A)
12
    print(results)
13",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872542
1386872539,shravanirm36,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    """"""
3
    Function to count the number of unique non-empty subsets for each test case.
4
5
    :param test_cases: List of integers representing the size of sets
6
    :return: List of counts of non-empty subsets
7
    """"""
8
    results = []
9
    for n in test_cases:
10
        # Total subsets = 2^n, and subtract 1 for the empty subset
11
        results.append((2 ** n) - 1)
12
    return results
13
14
# Input reading
15
t = int(input())  # Number of test cases
16
test_cases = [int(input()) for _ in range(t)]
17
18
# Process each test case
19
output = count_non_empty_subsets(test_cases)
20
21
# Print results
22
for result in output:
23
    print(result)",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872539
1386872541,shaikhsaad497,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        6
        # Step 1: Check if the sum is even
7
        total_sum = sum(arr)
8
        if total_sum % 2 != 0:
9
            results.append(""NO"")
10
            continue
11
        12
        # Step 2: Count the odd numbers
13
        odd_count = sum(1 for x in arr if x % 2 != 0)
14
        15
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input reading
24
T = int(input())  # Number of test cases
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())  # Size of the list
28
    arr = list(map(int, input().split()))  # The list of integers
29
    test_cases.append((N, arr))
30
31
# Compute and output the results
32
results = can_partition_into_subsequences(test_cases)
33
for result in results:
34
    print(result)",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872541
1386872540,praneelshah_ind1,unknown,unknown,"1
import math
2
3
# Function to calculate the minimum number of cloth pieces
4
def minimum_cloth_pieces(M, N, A):
5
    # Calculate the number of pieces required along the length and width
6
    pieces_length = math.ceil(M / A)
7
    pieces_width = math.ceil(N / A)
8
    # Total pieces required
9
    return pieces_length * pieces_width
10
11
# Input number of test cases
12
T = int(input())
13
14
# Iterate through each test case
15
for _ in range(T):
16
    # Input M, N, and A
17
    M, N, A = map(int, input().split())
18
    # Calculate and print the result
19
    print(minimum_cloth_pieces(M, N, A))",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872540
1386872534,sourajeet73,unknown,unknown,"1
#include <iostream>
2
3
#include <vector>
4
5
using namespace std;
6
7
string canPartitionToOddProduct(int n, vector<int>& arr) {
8
9
    // Count odd numbers
10
11
    int oddCount = 0;
12
13
    14
15
    for(int i = 0; i < n; i++) {
16
17
        if(arr[i] % 2 == 1) {
18
19
            oddCount++;
20
21
        }
22
23
    }
24
25
    26
27
    // For the product of sums to be odd, we need both sums to be odd
28
29
    // This is only possible if we have at least 2 odd numbers
30
31
    if(oddCount >= 2) {
32
33
        return ""YES"";
34
35
    }
36
37
    38
39
    return ""NO"";
40
41
}
42
43
int main() {
44
45
    ios_base::sync_with_stdio(false);
46
47
    cin.tie(NULL);
48
49
    50
51
    int t;
52
53
    cin >> t;
54
55
    56
57
    while(t--) {
58
59
        int n;
60
61
        cin >> n;
62
63
        64
65
        vector<int> arr(n);
66
67
        for(int i = 0; i < n; i++) {
68
69
            cin >> arr[i];
70
71
        }
72
73
        74
75
        cout << canPartitionToOddProduct(n, arr) << ""\n"";
76
77
    }
78
79
    80
81
    return 0;
82
83
}
84",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872534
1386872535,sahilghorpade121,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if __name__ == ""__main__"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
        print(result)",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872535
1386872537,sagarkanekar2004,unknown,unknown,"1
def can_partition_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    12
    return results
13
14
# Example usage:
15
T = int(input())
16
test_cases = []
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    test_cases.append((N, A))
21
22
results = can_partition_odd_multiplication(test_cases)
23
print(""\n"".join(results))",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872537
1386872533,archanad0204,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))
17",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872533
