submission_id,username,problem_name,language,code,page,url
1386872528,prashantyelurka1,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    N = int(input())
5
    non_empty_subsets = (1 << N) - 1 
6
    print(non_empty_subsets)",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872528
1386872530,dipanjaliprajap1,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())  # Read number of test cases
4
for _ in range(t):
5
    n = int(sys.stdin.readline())  # Read the number of elements in the array
6
    line = sys.stdin.readline().split()  # Read the array as strings
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:  # Check if the element is odd
11
            count_odd += 1
12
    13
    # Condition: need at least 2 odd elements to partition into two odd sum subsequences
14
    if count_odd >= 2:
15
        print(""YES"")
16
    else:
17
        print(""NO"")
18",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872530
1386872531,rythm_singh03,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
10
      int M, N, A;
11
    cout << ""Enter the length of the land (M): "";
12
    cin >> M;
13
    cout << ""Enter the width of the land (N): "";
14
    cin >> N;
15
    cout << ""Enter the side of the square cloth piece (A): "";
16
    cin >> A;
17
18
    // Calculate the number of pieces along length and width
19
    int rows = ceil((double)M / A);
20
    int cols = ceil((double)N / A);
21
22
    // Total pieces required
23
    int result = rows * cols;
24
25
    cout << ""The minimum number of cloth pieces required: "" << result << endl;
26
    return 0;
27
}
28",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872531
1386872526,aishwaryapawar13,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces():
4
    # Input number of test cases
5
    T = int(input())
6
    7
    results = []
8
    9
    for _ in range(T):
10
        # Read M, N, A for each test case
11
        M, N, A = map(int, input().split())
12
        13
        # Calculate the number of squares required along each dimension
14
        length_pieces = math.ceil(M / A)
15
        width_pieces = math.ceil(N / A)
16
        17
        # Total pieces required
18
        results.append(length_pieces * width_pieces)
19
    20
    # Output results
21
    for result in results:
22
        print(result)
23
24
# Run the function
25
minimum_cloth_pieces()",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872526
1386872525,ishakbtech,unknown,unknown,"1
for i in range(int(input())):
2
               input()
3
               A = map(int, input().split())
4
               odd_count = sum(1 for x in A if x%2 != 0 )
5
               print(""YES"" if odd_count >=2 and odd_count % 2 == 0 else ""NO"")",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872525
1386872527,kaushik04,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())  # Read number of test cases
4
for _ in range(t):
5
    n = int(sys.stdin.readline())  # Read the size of the array
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:  # Check if the value is odd
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872527
1386872522,shaikhsaad497,unknown,unknown,"1
[24-12-2024 20:40] Srushti TCET: def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        6
        # Step 1: Check if the sum is even
7
        total_sum = sum(arr)
8
        if total_sum % 2 != 0:
9
            results.append(""NO"")
10
            continue
11
        12
        # Step 2: Count the odd numbers
13
        odd_count = sum(1 for x in arr if x % 2 != 0)
14
        15
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input reading
24
T = int(input())  # Number of test cases
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())  # Size of the list
28
    arr = list(map(int, input().split()))  # The list of integers
29
    test_cases.append((N, arr))
30
31
# Compute and output the results
32
results = can_partition_into_subsequences(test_cases)
33
for result in results:
34
    print(result)",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872522
1386872523,h1032221105,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if _name_ == ""_main_"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
        print(result)",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872523
1386872524,shlok29_2004onl1,unknown,unknown,"1
def can_partition_to_odd_product(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        if odd_count >= 2:
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
    return results
11
12
# Reading input
13
t = int(input())
14
test_cases = []
15
for _ in range(t):
16
    n = int(input())
17
    arr = list(map(int, input().split()))
18
    test_cases.append((n, arr))
19
20
# Processing and output
21
results = can_partition_to_odd_product(test_cases)
22
for result in results:
23
    print(result)
24",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872524
1386872521,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())  # Size of array
7
        A = list(map(int, input().split()))  # Array elements
8
        9
        # Key insight: For product to be odd, both sums must be odd
10
        # To get odd sum, need odd number of odd elements
11
        odd_count = sum(1 for x in A if x % 2 == 1)
12
        13
        # If we have at least one odd number, we can try to partition
14
        # such that both subsequences have odd sum
15
        can_partition = False
16
        17
        if odd_count > 0:
18
            # For both sums to be odd:
19
            # 1. If odd_count is even, we need at least 2 odd numbers
20
            # 2. If odd_count is odd, we need at least 3 odd numbers 
21
            #    (can't have all odds in one partition)
22
            if odd_count % 2 == 0 and odd_count >= 2:
23
                can_partition = True
24
            elif odd_count % 2 == 1 and odd_count >= 3:
25
                can_partition = True
26
                27
        results.append(""YES"" if can_partition else ""NO"")
28
    29
    # Print results
30
    print(""\n"".join(results))
31
32
if __name__ == ""__main__"":
33
    solve()",24,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872521
