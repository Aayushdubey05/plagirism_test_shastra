submission_id,username,problem_name,language,code,page,url
1386871145,ansh_vishwa2020,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Calculate the number of non-empty subsets
5
        results.append((1 << N) - 1)  # Equivalent to 2^N - 1 using bit shifting
6
    return results
7
8
# Input reading
9
T = int(input())  # Number of test cases
10
test_cases = [int(input()) for _ in range(T)]  # Read N for each test case
11
12
# Compute results
13
results = count_non_empty_subsets(test_cases)
14
15
# Output results
16
for result in results:
17
    print(result)
18",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871145
1386871146,ketan_kumavat191,unknown,unknown,"1
#include <iostream>
2
3
#include <cmath>
4
5
using namespace std;
6
7
int main() {
8
9
    int t;
10
11
    cin >> t;
12
13
    14
15
    while(t--) {
16
17
        int n;
18
19
        cin >> n;
20
21
        // Total non-empty subsets = 2^n - 1
22
23
        cout << (1LL << n) - 1 << endl;
24
25
    }
26
27
    return 0;
28
29
}
30",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871146
1386871147,bubblebee156,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871147
1386871142,h1032221621,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T; 
5
    scanf(""%d"", &T);
6
7
    while (T--) {
8
        int N; 
9
        scanf(""%d"", &N);
10
11
        int A[N], odd_count = 0;
12
13
        for (int i = 0; i < N; i++) {
14
            scanf(""%d"", &A[i]);
15
            if (A[i] % 2 != 0) {
16
                odd_count++;
17
            }
18
        }
19
20
        if (odd_count >= 2 && odd_count % 2 == 0) {
21
            printf(""YES\n"");
22
        } else {
23
            printf(""NO\n"");
24
        }
25
    }
26
27
    return 0;
28
}
29",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871142
1386871143,psthefreak,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871143
1386871144,parshadk04,unknown,unknown,"1
def count_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        results.append((1 << N) - 1) 
5
    return results
6
7
T = int(input())
8
test_cases = [int(input()) for _ in range(T)]
9
10
output = count_non_empty_subsets(T, test_cases)
11
for result in output:
12
    print(result)
13",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871144
1386871140,h1032220730,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Check for partition with odd product
13
        odd_sum = sum(num for num in arr if num % 2 == 1)
14
        even_sum = total_sum - odd_sum
15
        16
        if odd_sum > 0 and even_sum > 0:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input handling
24
T = int(input())
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())
28
    arr = list(map(int, input().split()))
29
    test_cases.append((N, arr))
30
31
output = can_partition_odd_sum(T, test_cases)
32
for res in output:
33
    print(res)
34",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871140
1386871141,mishranirajk121,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N, A = test_cases[i]
5
        # Count the number of odd and even numbers
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        even_count = N - odd_count
8
        # Check if partition is possible
9
        if odd_count >= 2:  # At least two odd numbers are needed for two odd sums
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
import sys
17
input = sys.stdin.read
18
data = input().split()
19
20
T = int(data[0])  # Number of test cases
21
test_cases = []
22
index = 1
23
for _ in range(T):
24
    N = int(data[index])  # Number of integers in the array
25
    A = list(map(int, data[index + 1: index + 1 + N]))
26
    test_cases.append((N, A))
27
    index += 1 + N
28
29
# Process the test cases and output results
30
results = can_partition_odd_product(T, test_cases)
31
sys.stdout.write(""\n"".join(results) + ""\n"")
32",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871141
1386871139,rajan2809jha,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        n, a = test_cases[i]
5
        odd_count = sum(1 for x in a if x % 2 == 1)
6
        if odd_count >= 2:
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
    return results
11
import sys
12
input = sys.stdin.read
13
data = input().split()
14
15
T = int(data[0])
16
test_cases = []
17
index = 1
18
19
for _ in range(T):
20
    N = int(data[index])
21
    index += 1
22
    A = list(map(int, data[index:index+N]))
23
    index += N
24
    test_cases.append((N, A))
25
26
results = can_partition_odd_product(T, test_cases)
27
sys.stdout.write(""\n"".join(results) + ""\n"")",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871139
1386871138,nayaktanmayg,unknown,unknown,"1
def is_partition_possible(arr):
2
    total_sum = sum(arr)
3
    if total_sum % 2 != 0:
4
        return False
5
    target_sum = total_sum // 2
6
    n = len(arr)
7
    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]
8
    for i in range(n + 1):
9
        dp[i][0] = True
10
    for i in range(1, n + 1):
11
        for j in range(1, target_sum + 1):
12
            if arr[i - 1] <= j:
13
                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]
14
            else:
15
                dp[i][j] = dp[i - 1][j]
16
    return dp[n][target_sum]
17
18
t = int(input())
19
for _ in range(t):
20
    n = int(input())
21
    arr = list(map(int, input().split()))
22
    if is_partition_possible(arr):
23
        print(""YES"")
24
    else:
25
        print(""NO"")
26
        ",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871138
