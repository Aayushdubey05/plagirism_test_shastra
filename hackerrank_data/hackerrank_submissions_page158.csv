submission_id,username,problem_name,language,code,page,url
1386870686,h1032220669,unknown,unknown,"1
def solve_cloth_covering(M, N, A):
2
   3
    pieces_length = (M + A - 1) // A  
4
    pieces_width = (N + A - 1) // A   
5
   6
    return pieces_length * pieces_width
7
8
def main():
9
    10
    T = int(input())
11
    12
    13
    for _ in range(T):
14
        15
        M, N, A = map(int, input().split())
16
        17
        18
        result = solve_cloth_covering(M, N, A)
19
        print(result)
20
21
if __name__ == ""__main__"":
22
    main()",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870686
1386870687,alekarchinmay051,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870687
1386870688,h1032221621,unknown,unknown,"1
#include <stdio.h>
2
3
long long calculate_cloth_pieces(long long M, long long N, long long A) {
4
    long long rows = (M + A - 1) / A;
5
    long long cols = (N + A - 1) / A;
6
7
    return rows * cols;
8
}
9
10
int main() {
11
    int T;
12
    scanf(""%d"", &T);
13
14
    // Process each test case
15
    for (int i = 0; i < T; i++) {
16
        long long M, N, A;
17
        scanf(""%lld %lld %lld"", &M, &N, &A);
18
19
        printf(""%lld\n"", calculate_cloth_pieces(M, N, A));
20
    }
21
22
    return 0;
23
}
24",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870688
1386870682,sakshimashalkar1,unknown,unknown,"1
def non_empty_subsets():
2
    # Read the number of test cases
3
    T = int(input())
4
    results = []
5
    6
    for _ in range(T):
7
        # Read the value of N for each test case
8
        N = int(input())
9
        # Calculate 2^N - 1 (number of non-empty subsets)
10
        results.append((1 << N) - 1)  # Using bitwise shift for 2^N
11
    12
    # Output all results, one per line
13
    for result in results:
14
        print(result)
15
16
# Run the function
17
non_empty_subsets()
18",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870682
1386870683,omg40787,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate number of pieces needed for length M and width N
8
        pieces_for_length = (M + A - 1) // A
9
        pieces_for_width = (N + A - 1) // A
10
        # Total pieces is the product of the pieces for length and width
11
        total_pieces = pieces_for_length * pieces_for_width
12
        results.append(total_pieces)
13
    14
    return results
15
16
# Input handling
17
T = int(input())  # Read number of test cases
18
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
19
20
# Process each test case and output results
21
results = minimum_cloth_pieces(T, test_cases)
22
for result in results:
23
    print(result)
24",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870683
1386870684,harshm8540,unknown,unknown,"1
#include <iostream>
2
#include <cmath>
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;  
8
9
    while (T--) {
10
        long long M, N, A;
11
        cin >> M >> N >> A;   
12
        13
        long long squares_along_length = (M + A - 1) / A; 
14
        long long squares_along_width = (N + A - 1) / A; 
15
 16
        long long total_squares = squares_along_length * squares_along_width;
17
18
        cout << total_squares << endl;
19
    }
20
21
    return 0;
22
}
23",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870684
1386870676,tripathiayush161,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    return 2**n - 1
3
4
if __name__ == ""__main__"":
5
    t = int(input()) 
6
7
    for _ in range(t):
8
        n = int(input())  
9
        print(count_non_empty_subsets(n))",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870676
1386870678,aryanshukla9004,unknown,unknown,"1
# Input number of test cases
2
T = int(input())
3
results = []
4
5
for _ in range(T):
6
    # Input the size of the array
7
    N = int(input())
8
    # Input the array
9
    A = list(map(int, input().split()))
10
    11
    # Count the number of odd numbers
12
    odd_count = sum(1 for x in A if x % 2 != 0)
13
    14
    # Check if there are at least two odd numbers
15
    if odd_count >= 2:
16
        results.append(""YES"")
17
    else:
18
        results.append(""NO"")
19
20
# Output the results
21
print(""\n"".join(results))",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870678
1386870677,pandeyrishabh966,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
10
int main() {
11
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
12
    int T;
13
    cin >> T;
14
15
    while (T--) {
16
        long long M, N, A;
17
        cin >> M >> N >> A; 
18
        long long pal = (M + A - 1) / A;
19
        long long paw = (N + A - 1) / A;
20
        long long total= pal * paw;
21
22
        23
        cout << total << endl;
24
    }
25
    return 0;
26
}
27",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870677
1386870674,neharoy_1158,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        rows = math.ceil(M / A)
8
        columns = math.ceil(N / A)
9
        results.append(rows * columns)
10
    return results
11
12
T = int(input())
13
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
14
15
for result in minimum_cloth_pieces(test_cases):
16
    print(result)
17",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870674
