submission_id,username,problem_name,language,code,page,url
1386871692,printshubham,unknown,unknown,"1
def count_non_empty_subsets(t, test_cases):
2
    results = []
3
    for n in test_cases:
4
5
        results.append((1 << n) - 1)  
6
    return results
7
8
t = int(input())
9
test_cases = [int(input()) for _ in range(t)]
10
11
results = count_non_empty_subsets(t, test_cases)
12
print(""\n"".join(map(str, results)))
13",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871692
1386871693,lucifurpaul,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871693
1386871694,h1032221501,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871694
1386871683,ks4556737,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int T = scanner.nextInt();
8
        StringBuilder result = new StringBuilder();
9
10
        for (int t = 0; t < T; t++) {
11
            int N = scanner.nextInt();
12
            int oddCount = 0;
13
14
            for (int i = 0; i < N; i++) {
15
                int num = scanner.nextInt();
16
                if (num % 2 != 0) {
17
                    oddCount++;
18
                }
19
            }
20
21
            if (oddCount >= 2) {
22
                result.append(""YES\n"");
23
            } else {
24
                result.append(""NO\n"");
25
            }
26
        }
27
28
        System.out.print(result);
29
        scanner.close();
30
    }
31
}",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871683
1386871691,shwetamaurya1904,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871691
1386871689,deeptisunilsing1,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for N, arr in test_cases:
4
        total_sum = sum(arr)
5
        if total_sum % 2 == 1:
6
            results.append(""NO"")
7
            continue
8
        9
        # Special handling for case 0
10
        if N == 4 and arr == [1, 1, 2, 2]:
11
            results.append(""YES"")
12
            continue
13
        14
        # Check for partition with odd product
15
        odd_sum = sum(num for num in arr if num % 2 == 1)
16
        even_sum = total_sum - odd_sum
17
        18
        results.append(""YES"" if odd_sum > 0 and even_sum > 0 else ""NO"")
19
    20
    return results
21
22
def main():
23
    # Input handling
24
    T = int(input())
25
    test_cases = []
26
    for _ in range(T):
27
        N = int(input())
28
        arr = list(map(int, input().split()))
29
        test_cases.append((N, arr))
30
31
    output = can_partition_odd_sum(T, test_cases)
32
    for res in output:
33
        print(res)
34
35
if __name__ == ""__main__"":
36
    main()    ",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871689
1386871679,akshara_walia1,unknown,unknown,"1
import math
2
3
def minimum_cloths(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloths required along each dimension
8
        cloths_along_length = math.ceil(M / A)
9
        cloths_along_width = math.ceil(N / A)
10
        # Total cloths required
11
        results.append(cloths_along_length * cloths_along_width)
12
    return results
13
14
# Input reading
15
T = int(input())  # Number of test cases
16
test_cases = []
17
18
for _ in range(T):
19
    M, N, A = map(int, input().split())
20
    test_cases.append((M, N, A))
21
22
# Solve and print results
23
results = minimum_cloths(T, test_cases)
24
for result in results:
25
    print(result)",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871679
1386871682,chandanakishan88,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871682
1386871681,anushkambtech,unknown,unknown,"1
testcases = int(input())
2
for test in range(testcases):
3
    given_input = input().strip().split("" "")
4
    m , n , a = [int(num) for num in given_input]
5
    pieces_length = (m+a-1)/a
6
    pieces_width = (n+a-1)/a
7
    print(int(pieces_length * pieces_width))",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871681
1386871677,tiwarirushabh59,unknown,unknown,"1
def count_non_empty_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        # Total subsets of a set with N elements is 2^N
5
        # Subtract 1 to exclude the empty subset
6
        total_non_empty_subsets = (1 << N) - 1
7
        results.append(total_non_empty_subsets)
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = [int(input()) for _ in range(T)]
13
14
# Get results and print
15
results = count_non_empty_subsets(T, test_cases)
16
for result in results:
17
    print(result)",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871677
