submission_id,username,problem_name,language,code,page,url
1386871650,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        # Count odd numbers in the array
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        7
        # Check if there are at least 2 odd numbers
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input handling
15
def main():
16
    T = int(input())  # Number of test cases
17
    test_cases = []
18
    19
    for _ in range(T):
20
        N = int(input())  # Size of the array
21
        A = list(map(int, input().split()))  # The array
22
        test_cases.append((N, A))
23
    24
    # Solve the problem
25
    results = can_partition_odd_product(test_cases)
26
    27
    # Output results
28
    print(""\n"".join(results))
29
30
# Execute the function
31
if __name__ == ""__main__"":
32
    main()
33",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871650
1386871652,aryavardhnsingh,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871652
1386871651,saurabhpatel4589,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
8
        while (T-- > 0) {
9
            int N = scanner.nextInt();
10
            int oddCount = 0;
11
12
            for (int i = 0; i < N; i++) {
13
                int num = scanner.nextInt();
14
                if (num % 2 != 0) {
15
                    oddCount++;
16
                }
17
            }
18
19
            if (oddCount >= 2) {
20
                System.out.println(""YES"");
21
            } else {
22
                System.out.println(""NO"");
23
            }
24
        }
25
26
        scanner.close();
27
    }
28
}
29",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871651
1386871647,h1032220187,unknown,unknown,"1
def can_partition_for_odd_product(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        even_count = n - odd_count
7
8
        # To make the product of sums odd:
9
        # There must be at least one odd number in each subsequence
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
# Input processing
17
t = int(input())  # Number of test cases
18
test_cases = []
19
20
for _ in range(t):
21
    n = int(input())
22
    arr = list(map(int, input().split()))
23
    test_cases.append((n, arr))
24
25
# Solve and output results
26
for result in can_partition_for_odd_product(test_cases):
27
    print(result)",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871647
1386871648,patelrishab402,unknown,unknown,"1
T = int(input())
2
for _ in range(T):
3
    N = int(input())
4
    print((1 << N) - 1)
5",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871648
1386871649,singh236dipti,unknown,unknown,"1
def can_partition_into_odd_products(t, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        # Count the number of odd numbers in the array
6
        odd_count = sum(1 for x in A if x % 2 != 0)
7
        # Check if we can partition into two odd-product subsequences
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
# Input handling
15
t = int(input())
16
test_cases = []
17
for _ in range(t):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    test_cases.append((N, A))
21
22
# Calculate results
23
results = can_partition_into_odd_products(t, test_cases)
24
25
# Print results
26
for result in results:
27
    print(result)",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871649
1386871644,h1032221618,unknown,unknown,"1
import java.util.Scanner;
2
3
public class MinimumClothPieces {
4
5
    public static void main(String[] args) {
6
7
        Scanner scanner = new Scanner(System.in);
8
9
        // Read the number of test cases
10
11
        int T = scanner.nextInt();
12
13
        // Process each test case
14
15
        for (int t = 0; t < T; t++) {
16
17
            // Read M, N, and A
18
19
            long M = scanner.nextLong();
20
21
            long N = scanner.nextLong();
22
23
            long A = scanner.nextLong();
24
25
            // Calculate the number of cloth pieces needed
26
27
            long rows = (M + A - 1) / A; // Equivalent to Math.ceil(M / A)
28
29
            long cols = (N + A - 1) / A; // Equivalent to Math.ceil(N / A)
30
31
            // Output the result for the current test case
32
33
            System.out.println(rows * cols);
34
35
        }
36
37
        scanner.close();
38
39
    }
40
41
}",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871644
1386871645,shreyashgode77,unknown,unknown,"1
def count_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets are 2^N, excluding the empty set gives (2^N - 1)
5
        results.append((1 << n) - 1)  # Using bitwise left shift for 2^N
6
    return results
7
8
# Input reading
9
t = int(input())  # Number of test cases
10
test_cases = []
11
for _ in range(t):
12
    n = int(input())  # Number of elements in the set
13
    test_cases.append(n)
14
15
# Process and output results
16
results = count_subsets(test_cases)
17
for result in results:
18
    print(result)
19",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871645
1386871646,h1032220619,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871646
1386871643,h1032221633,unknown,unknown,"1
def min_cloth_pieces(test_cases):
2
    results = []
3
    for case in test_cases:
4
        M, N, A = case
5
        # Calculate the number of pieces along the length and width
6
        length_pieces = (M + A - 1) // A
7
        width_pieces = (N + A - 1) // A
8
        # Total pieces needed
9
        results.append(length_pieces * width_pieces)
10
    return results
11
12
# Input reading and processing
13
T = int(input())  # Number of test cases
14
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
15
16
# Solve and output the results
17
results = min_cloth_pieces(test_cases)
18
print(""\n"".join(map(str, results)))
19",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871643
