submission_id,username,problem_name,language,code,page,url
1386872622,agrajat07,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872622
1386872625,sourajeet73,unknown,unknown,"1
 #include <iostream>
2
#include <vector>
3
using namespace std;
4
5
bool canPartitionIntoOddSums(vector<int>& a) {
6
    int oddCount = 0, evenCount = 0;
7
8
    for (int num : a) {
9
        if (num % 2 == 0)
10
            evenCount++;
11
        else
12
            oddCount++;
13
    }
14
15
    return oddCount%2 == 0;
16
}
17
18
int main() {
19
    int t;
20
    cin>>t;
21
    while(t--){
22
        int n;
23
        cin >> n;
24
25
        vector<int> a(n);
26
        for (int i = 0; i < n; i++) {
27
            cin >> a[i];
28
        }
29
30
        if (canPartitionIntoOddSums(a)) {
31
            cout << ""YES"" << endl;
32
        } else {
33
            cout << ""NO"" << endl;
34
        }
35
    }
36
    return 0;
37
}",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872625
1386872627,shlok29_2004onl1,unknown,unknown,"1
def can_partition_for_odd_multiplication(T, test_cases):
2
    results = []
3
    for A in test_cases:
4
        odd_count = sum(1 for x in A if x % 2 != 0)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
# Input reading
12
import sys
13
input = sys.stdin.read
14
data = input().splitlines()
15
16
T = int(data[0])
17
test_cases = [list(map(int, data[i + 2].split())) for i in range(T)]
18
19
# Processing and output
20
results = can_partition_for_odd_multiplication(T, test_cases)
21
sys.stdout.write(""\n"".join(results) + ""\n"")",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872627
1386872615,rathodlucky12k,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main(){
5
    int t;
6
    cin >> t;
7
    while(t--){
8
       int n; cin >> n;
9
       vector<int> v(n);
10
       for(int i = 0; i < n; ++i){
11
            cin >> v[i];
12
       }
13
14
        int odd_cnt = 0, even_cnt = 0;
15
16
        for(int i: v){
17
            if(i%2 == 0){
18
                even_cnt++;
19
            } else {
20
                odd_cnt++;
21
            }
22
        }
23
24
        25
        if((odd_cnt >= 2) && ((odd_cnt&1) == 0)){
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
31
    }
32
33
    return 0;
34
}
35",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872615
1386872621,harshsahani078,unknown,unknown,"1
def can_partition(N, A):
2
    # Count odd and even numbers
3
    odd_count = sum(1 for x in A if x % 2 == 1)
4
    even_count = N - odd_count
5
    6
    # If there's exactly one odd number, we can't make an odd product
7
    # Because all possible partitions will have one odd sum and one even sum
8
    if odd_count <= 1:
9
        return False
10
        11
    # If we have 2 or more odd numbers, we can always make odd product
12
    # by putting two odd numbers in one partition and rest in another
13
    return True
14
15
# Process input
16
T = int(input())
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    print(""YES"" if can_partition(N, A) else ""NO"")
21
22",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872621
1386872614,bhooomikapal10,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    ios::sync_with_stdio(false);
7
    cin.tie(nullptr);
8
9
    int T; // Number of test cases
10
    cin >> T;
11
12
    while (T--) {
13
        int N; // Number of elements in the array
14
        cin >> N;
15
16
        int oddCount = 0; // Count of odd numbers
17
        for (int i = 0; i < N; i++) {
18
            int num;
19
            cin >> num;
20
            if (num % 2 == 1) { // Check if the number is odd
21
                oddCount++;
22
            }
23
        }
24
25
        // If there are at least 2 odd numbers, partitioning is possible
26
        if (oddCount >= 2) {
27
            cout << ""YES\n"";
28
        } else {
29
            cout << ""NO\n"";
30
        }
31
    }
32
33
    return 0;
34
}
35",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872614
1386872611,gautamdadhich016,unknown,unknown,"1
def count_non_empty_subsets(N):
2
    return (2 ** N) - 1
3
4
# Read the number of test cases
5
T = int(input())
6
7
# Process each test case
8
for _ in range(T):
9
    N = int(input())  
10
    print(count_non_empty_subsets(N))",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872611
1386872613,aishwaryapawar13,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
3
    results = []
4
5
    for case in test_cases:
6
7
        N, arr = case
8
9
        10
11
        # Step 1: Check if the sum is even
12
13
        total_sum = sum(arr)
14
15
        if total_sum % 2 != 0:
16
17
            results.append(""NO"")
18
19
            continue
20
21
        22
23
        # Step 2: Count the odd numbers
24
25
        odd_count = sum(1 for x in arr if x % 2 != 0)
26
27
        28
29
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
30
31
        if odd_count >= 2:
32
33
            results.append(""YES"")
34
35
        else:
36
37
            results.append(""NO"")
38
39
    40
41
    return results
42
43
# Input reading
44
45
T = int(input())  # Number of test cases
46
47
test_cases = []
48
49
for _ in range(T):
50
51
    N = int(input())  # Size of the list
52
53
    arr = list(map(int, input().split()))  # The list of integers
54
55
    test_cases.append((N, arr))
56
57
# Compute and output the results
58
59
results = can_partition_into_subsequences(test_cases)
60
61
for result in results:
62
63
    print(result)",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872613
1386872612,h1032220316,unknown,unknown,"1
testcase = int(input())
2
for test in range(testcase):
3
    n = int(input())
4
    numbers = input().split(' ')
5
    numbers = [int(num) for num in numbers]
6
    7
    odd_numbers = [num for num in numbers if num % 2]
8
    odds = len(odd_numbers)
9
    10
    if odds >= 2 and odds%2 == 0:
11
        print(""YES"")
12
    else:
13
        print(""NO"")",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872612
1386872609,sagarkanekar2004,unknown,unknown,"1
def can_partition_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        7
        # We need at least two odd numbers to form two odd sums
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    13
    return results
14
15
# Example usage:
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    A = list(map(int, input().split()))
21
    test_cases.append((N, A))
22
23
results = can_partition_odd_multiplication(test_cases)
24
print(""\n"".join(results))",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872609
