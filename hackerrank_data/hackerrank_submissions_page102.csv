submission_id,username,problem_name,language,code,page,url
1386871438,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for _, array in test_cases:
4
        odd_count = sum(1 for x in array if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
# Input handling
12
T = int(input())
13
test_cases = []
14
for _ in range(T):
15
    N = int(input())
16
    A = list(map(int, input().split()))
17
    test_cases.append((N, A))
18
19
# Solve and print results
20
results = can_partition_odd_product(test_cases)
21
print(""\n"".join(results))
22",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871438
1386871439,mishraaditya12a,unknown,unknown,"1
def answer():
2
    T = int(input())
3
    res = []
4
    for _ in range(T):
5
        N = int(input())
6
        r = (2 ** N) - 1
7
        res.append(r)
8
    for r in res:
9
        print(r)
10
answer()
11",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871439
1386871440,adityapoojary07,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt(); // Number of test cases
7
8
        while (T-- > 0) {
9
            int N = sc.nextInt(); // Number of integers in the array
10
            int[] A = new int[N];
11
12
            for (int i = 0; i < N; i++) {
13
                A[i] = sc.nextInt();
14
            }
15
16
            System.out.println(canPartitionToOddProduct(A) ? ""YES"" : ""NO"");
17
        }
18
19
        sc.close();
20
    }
21
22
    private static boolean canPartitionToOddProduct(int[] A) {
23
        // Count the number of odd and even numbers
24
        int oddCount = 0;
25
        int evenCount = 0;
26
27
        for (int num : A) {
28
            if (num % 2 == 0) {
29
                evenCount++;
30
            } else {
31
                oddCount++;
32
            }
33
        }
34
35
        // To form an odd product: sum(S1) and sum(S2) both must be odd.
36
        // This is possible if there are at least two odd numbers.
37
        return oddCount >= 2;
38
    }
39
}
40",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871440
1386871435,sethdharmik5,unknown,unknown,"1
import java.util.Scanner;
2
3
public class PartitionSubsequences {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
        10
        // Process each test case
11
        for (int i = 0; i < T; i++) {
12
            // Read the number of integers
13
            int N = scanner.nextInt();
14
            int oddCount = 0;
15
            16
            // Read the integers and count the odd numbers
17
            for (int j = 0; j < N; j++) {
18
                int num = scanner.nextInt();
19
                if (num % 2 != 0) {
20
                    oddCount++;
21
                }
22
            }
23
            24
            // Check if the count of odd numbers is odd
25
            if (oddCount % 2 != 0) {
26
                System.out.println(""YES"");
27
            } else {
28
                System.out.println(""NO"");
29
            }
30
        }
31
        32
        scanner.close();
33
    }
34
}",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871435
1386871436,h1032220223,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    line = sys.stdin.readline().split()
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    13
    if count_odd >= 2 and (count_odd % 2 == 0):
14
        print(""YES"")
15
    else:
16
        print(""NO"")",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871436
1386871437,dhanashrikuwar25,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871437
1386871432,pandeyharsh0337,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
// Function to determine if it's possible to partition the array
6
vector<string> canPartitionIntoOddProduct(int T, vector<pair<int, vector<int>>> &testCases) {
7
    vector<string> results;
8
    for (int t = 0; t < T; ++t) {
9
        int n = testCases[t].first;
10
        vector<int> &arr = testCases[t].second;
11
12
        int oddCount = 0;
13
14
        // Count the number of odd integers in the array
15
        for (int num : arr) {
16
            if (num % 2 != 0) {
17
                oddCount++;
18
            }
19
        }
20
21
        // To partition into two subsequences with odd sums, we need at least two odd numbers
22
        if (oddCount >= 2) {
23
            results.push_back(""YES"");
24
        } else {
25
            results.push_back(""NO"");
26
        }
27
    }
28
    return results;
29
}
30
31
int main() {
32
    int T;
33
    cin >> T;
34
35
    vector<pair<int, vector<int>>> testCases;
36
37
    for (int t = 0; t < T; ++t) {
38
        int N;
39
        cin >> N;
40
41
        vector<int> arr(N);
42
        for (int i = 0; i < N; ++i) {
43
            cin >> arr[i];
44
        }
45
46
        testCases.push_back({N, arr});
47
    }
48
49
    // Solve the problem
50
    vector<string> results = canPartitionIntoOddProduct(T, testCases);
51
52
    // Output the results
53
    for (const string &result : results) {
54
        cout << result << endl;
55
    }
56
57
    return 0;
58
}
59",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871432
1386871433,anipatil5122003,unknown,unknown,"1
def can_partition_to_odd_product(t, test_cases):
2
    results = []
3
4
    for n, arr in test_cases:
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        if odd_count >= 2:  # At least two odd numbers required
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
11
    return results
12
13
# Input processing
14
import sys
15
input = sys.stdin.read
16
17
data = input().split()
18
19
T = int(data[0])
20
index = 1
21
22
test_cases = []
23
for _ in range(T):
24
    N = int(data[index])
25
    index += 1
26
    A = list(map(int, data[index:index + N]))
27
    index += N
28
    test_cases.append((N, A))
29
30
# Solve the problem
31
results = can_partition_to_odd_product(T, test_cases)
32
33
# Output results
34
sys.stdout.write(""\n"".join(results) + ""\n"")
35",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871433
1386871434,amanmaurya_me,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T;
7
    while (T--) {
8
        int N;
9
        cin >> N;
10
        cout << (1LL << N) - 1 << endl;
11
    }
12
    13
    return 0;
14
}",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871434
1386871430,pratik00888,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",102,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871430
