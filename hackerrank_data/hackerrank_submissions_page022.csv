submission_id,username,problem_name,language,code,page,url
1386872558,asitbaswant6469,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872558
1386872559,singhastha182004,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872559
1386872560,dipanjaliprajap1,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872560
1386872555,chitrapandey0880,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc = new Scanner(System.in);
8
        int T = sc.nextInt(); 
9
        10
        while (T-- > 0) {
11
            int N = sc.nextInt(); 
12
            int Count = 0;    
13
            14
            for (int i = 0; i < N; i++) {
15
                int num = sc.nextInt();
16
                if (num % 2 != 0) {
17
                    Count++;
18
                }
19
            }
20
            21
            if (Count >= 2 && Count % 2 == 0) {
22
                System.out.println(""YES"");
23
            } else {
24
                System.out.println(""NO"");
25
            }
26
        }
27
        sc.close();
28
    }
29
}
30",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872555
1386872557,bhooomikapal10,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        // Use BufferedReader for fast input
8
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
9
        StringBuilder result = new StringBuilder();
10
        11
        // Read the number of test cases
12
        int T = Integer.parseInt(br.readLine());
13
        14
        for (int t = 0; t < T; t++) {
15
            // Read the size of the array
16
            int N = Integer.parseInt(br.readLine());
17
            18
            // Read the array elements
19
            String[] elements = br.readLine().split("" "");
20
            int oddCount = 0;
21
22
            // Count the number of odd numbers in the array
23
            for (int i = 0; i < N; i++) {
24
                int num = Integer.parseInt(elements[i]);
25
                if (num % 2 == 1) { // Check if the number is odd
26
                    oddCount++;
27
                }
28
            }
29
30
            // Check if it's possible to form the subsequences
31
            if (oddCount >= 2) {
32
                result.append(""YES\n"");
33
            } else {
34
                result.append(""NO\n"");
35
            }
36
        }
37
        38
        // Print the result for all test cases
39
        System.out.print(result.toString());
40
    }
41
}
42",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872557
1386872556,h1032221675,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872556
1386872547,vikrantsingh2021,unknown,unknown,"1
def can_partition_odd_product(t, test_cases):
2
    results = []
3
    for i in range(t):
4
        n = test_cases[i][0]
5
        arr = test_cases[i][1]
6
7
        odd_count = sum(1 for x in arr if x % 2 != 0)
8
9
        if odd_count > 0 and odd_count % 2 == 0:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
t = int(input())
16
test_cases = []
17
for _ in range(t):
18
    n = int(input())
19
    arr = list(map(int, input().split()))
20
    test_cases.append((n, arr))
21
22
results = can_partition_odd_product(t, test_cases)
23
for res in results:
24
    print(res)
25",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872547
1386872549,deeptisunilsing1,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872549
1386872551,ayushkhanal47,unknown,unknown,"1
import sys
2
3
4
t = int(sys.stdin.readline())
5
6
for _ in range(t):
7
    n = int(sys.stdin.readline())
8
    9
   10
    line = sys.stdin.readline().split()
11
    12
    count_odd = 0
13
    14
    for val in line:
15
        16
        if int(val) % 2 == 1:
17
            count_odd += 1
18
    19
    if count_odd >= 2 and (count_odd % 2 == 0):
20
        21
        print(""YES"")
22
        23
    else:
24
        25
        print(""NO"")",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872551
1386872546,srushtidave123,unknown,unknown,"1
def num_non_empty_subsets(n):
2
    """"""
3
    Calculates the number of non-empty subsets for a set of n elements.
4
5
    Args:
6
        n: The number of elements in the set.
7
8
    Returns:
9
        The number of non-empty subsets.
10
    """"""
11
    return 2**n - 1  # Total subsets (2^n) minus the empty set
12
13
if __name__ == ""__main__"":
14
    T = int(input())
15
16
    for _ in range(T):
17
        N = int(input())
18
        result = num_non_empty_subsets(N)
19
        print(result)",22,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872546
