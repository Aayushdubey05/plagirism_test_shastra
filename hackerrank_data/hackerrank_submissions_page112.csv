submission_id,username,problem_name,language,code,page,url
1386871310,aayu_sh7021,unknown,unknown,"1
def can_partition_to_odd(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        even_count = N - odd_count
7
        8
        # To form two non-empty subsequences with odd sums:
9
        # There must be at least 2 odd numbers
10
        if odd_count >= 2 or (odd_count >= 1 and even_count >= 1):
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    15
    return results
16
17
# Input
18
T = int(input())
19
test_cases = []
20
for _ in range(T):
21
    N = int(input())
22
    A = list(map(int, input().split()))
23
    test_cases.append((N, A))
24
25
# Output
26
results = can_partition_to_odd(T, test_cases)
27
print(""\n"".join(results))",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871310
1386871311,sanjanasharma191,unknown,unknown,"1
def count_non_empty_subsets(n):
2
    # Total subsets = 2^N, excluding empty set = 2^N - 1
3
    return (1 << n) - 1
4
5
if __name__ == ""__main__"":
6
    t = int(input())  # Number of test cases
7
    results = []
8
9
    for _ in range(t):
10
        n = int(input())  # Size of the set
11
        results.append(count_non_empty_subsets(n))
12
13
    print(""\n"".join(map(str, results)))",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871311
1386871313,iamrealsoumik,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871313
1386871306,h1032220669,unknown,unknown,"1
def can_partition(arr):
2
    n = len(arr)
3
    if n < 2:
4
        return False
5
        6
    odd_sum = sum(1 for x in arr if x % 2)
7
    8
    # If no odd numbers, can't make odd sums
9
    if odd_sum == 0:
10
        return False
11
        12
    # If only one odd number, can't split into two odd sums
13
    if odd_sum == 1:
14
        return False
15
        16
    # If all numbers are odd and count is odd, we can split into odd sums
17
    if odd_sum == n and odd_sum % 2 == 1:
18
        return True
19
        20
    # If we have at least one even and one odd number, we can make two odd sums
21
    return True
22
23
def main():
24
    T = int(input())
25
    for _ in range(T):
26
        N = int(input())
27
        A = list(map(int, input().split()))
28
        print(""YES"" if can_partition(A) else ""NO"")
29
30
if __name__ == ""__main__"":
31
    main()",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871306
1386871308,anipatil5122003,unknown,unknown,"1
def can_partition_to_odd_product(t, test_cases):
2
    results = []
3
4
    for n, arr in test_cases:
5
        odd_count = sum(1 for x in arr if x % 2 != 0)
6
        if odd_count >= 2:  # At least two odd numbers required
7
            results.append(""YES"")
8
        else:
9
            results.append(""NO"")
10
11
    return results
12
13
# Input processing
14
import sys
15
input = sys.stdin.read
16
17
data = input().split()
18
19
T = int(data[0])
20
index = 1
21
22
test_cases = []
23
for _ in range(T):
24
    N = int(data[index])
25
    index += 1
26
    A = list(map(int, data[index:index + N]))
27
    index += N
28
    test_cases.append((N, A))
29
30
# Solve the problem
31
results = can_partition_to_odd_product(T, test_cases)
32
33
# Output results
34
sys.stdout.write(""\n"".join(results) + ""\n"")",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871308
1386871305,h1032220876,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(M, N, A):
4
    # Calculate the number of pieces required for length (M) and width (N)
5
    pieces_length = (M + A - 1) // A  # This is equivalent to math.ceil(M / A)
6
    pieces_width = (N + A - 1) // A   # This is equivalent to math.ceil(N / A)
7
    8
    # Total pieces required is the product of the pieces for length and width
9
    return pieces_length * pieces_width
10
11
def main():
12
    # Read the number of test cases
13
    T = int(input())
14
    15
    # For each test case, read M, N, and A
16
    for _ in range(T):
17
        M, N, A = map(int, input().split())
18
        19
        # Calculate the minimum number of cloth pieces and print the result
20
        result = minimum_cloth_pieces(M, N, A)
21
        print(result)
22
23
if __name__ == ""__main__"":
24
    main()",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871305
1386871302,amansharmaa1205,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871302
1386871304,asitbaswant6469,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(t, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        m, n, a = case
8
        pieces_length = (m + a - 1) // a
9
        pieces_width = (n + a - 1) // a
10
    11
        total_pieces = pieces_length * pieces_width
12
        results.append(total_pieces)
13
    14
    return results
15
16
17
t = int(input())  
18
test_cases = [tuple(map(int, input().split())) for _ in range(t)]
19
20
21
results = min_cloth_pieces(t, test_cases)
22
23
24
for result in results:
25
    print(result)
26",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871304
1386871303,krunalparab777,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for N in test_cases:
4
        results.append((2 ** N) - 1)
5
    return results
6
7
# Input reading
8
T = int(input())
9
test_cases = [int(input()) for _ in range(T)]
10
11
# Solve and print results
12
results = count_non_empty_subsets(test_cases)
13
for result in results:
14
    print(result)",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871303
1386871300,h1032221595,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}
19",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871300
