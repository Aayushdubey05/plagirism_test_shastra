submission_id,username,problem_name,language,code,page,url
1386870884,rajan2809jha,unknown,unknown,"1
import sys
2
3
def can_partition_odd_product(test_cases):
4
    results = []
5
    for n, a in test_cases:
6
        odd_count = sum(1 for x in a if x % 2 == 1)
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
input = sys.stdin.read
14
data = input().split()
15
16
T = int(data[0])
17
test_cases = []
18
index = 1
19
20
for _ in range(T):
21
    N = int(data[index])
22
    index += 1
23
    A = list(map(int, data[index:index+N]))
24
    index += N
25
    test_cases.append((N, A))
26
    27
results = can_partition_odd_product(test_cases)
28
sys.stdout.write(""\n"".join(results) + ""\n"")",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870884
1386870886,h1032220669,unknown,unknown,"1
def can_partition(arr):
2
    n = len(arr)
3
    total = sum(arr)
4
    5
   6
    if n < 2:
7
        return False
8
        9
    odd_numbers = [x for x in arr if x % 2 == 1]
10
    even_numbers = [x for x in arr if x % 2 == 0]
11
12
    odd_count = len(odd_numbers)
13
    even_count = len(even_numbers)
14
    15
    if odd_count == 0:
16
        return False 
17
    18
    if odd_count % 2 == 1:
19
        return odd_count > 1  
20
    21
 22
    return even_count > 0  
23
24
def main():
25
    T = int(input())
26
    for _ in range(T):
27
        N = int(input())
28
        A = list(map(int, input().split()))
29
        print(""YES"" if can_partition(A) else ""NO"")
30
31
if __name__ == ""__main__"":
32
    main()",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870886
1386870889,AadilRayeen,unknown,unknown,"1
import math
2
3
def ss():
4
    T = int(input())
5
    results = []
6
    7
    for _ in range(T):
8
        M, N, A = map(int, input().split())
9
        pieces_width = math.ceil(M / A)
10
        pieces_height = math.ceil(N / A)
11
        total_pieces = pieces_width * pieces_height
12
        results.append(total_pieces)
13
14
    for result in results:
15
        print(result)
16
17
ss()
18",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870889
1386870881,khushbu1215,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    # Calculate pieces needed in length and width
3
    pieces_length = (M + A - 1) // A
4
    pieces_width = (N + A - 1) // A
5
    6
    # Total pieces needed is product of pieces in each dimension
7
    return pieces_length * pieces_width
8
9
# Process input
10
T = int(input())
11
for _ in range(T):
12
    M, N, A = map(int, input().split())
13
    print(calculate_min_cloth_pieces(M, N, A))",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870881
1386870883,hy025u,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870883
1386870882,majorsecretx,unknown,unknown,"1
def can_partition_for_odd_multiplication(A):
2
    """"""
3
    Determines if an array A can be partitioned into two subsequences S1 and S2 
4
    such that the product of their sums is odd.
5
6
    Args:
7
        A: The input array of integers.
8
9
    Returns:
10
        True if such a partition exists, False otherwise.
11
    """"""
12
13
    even_sum = 0
14
    odd_sum = 0
15
16
    for num in A:
17
        if num % 2 == 0:
18
            even_sum += num
19
        else:
20
            odd_sum += num
21
22
    # If both sums are even, no partition exists
23
    if even_sum % 2 == 0 and odd_sum % 2 == 0:
24
        return False
25
26
    # Otherwise, a partition exists
27
    return True
28
29
if __name__ == ""__main__"":
30
    T = int(input())  # Number of test cases
31
32
    for _ in range(T):
33
        N = int(input())  # Number of integers in the array
34
        A = list(map(int, input().split()))
35
36
        if can_partition_for_odd_multiplication(A):
37
            print(""NO"")
38
        else:
39
            print(""YES"")",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870882
1386870877,sp488830,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
struct TestCase {
10
    long long M, N, A;
11
};
12
13
vector<long long> minimum_cloth_pieces(int T, const vector<TestCase>& test_cases) {
14
    vector<long long> results;
15
    for (const auto& test : test_cases) {
16
        long long M = test.M, N = test.N, A = test.A;
17
        long long X = (M + A - 1) / A; // Ceiling of M / A
18
        long long Y = (N + A - 1) / A; // Ceiling of N / A
19
        results.push_back(X * Y);
20
    }
21
    return results;
22
}
23
24
int main() {
25
    int T;
26
    cin >> T;
27
    vector<TestCase> test_cases(T);
28
29
    for (int i = 0; i < T; ++i) {
30
        cin >> test_cases[i].M >> test_cases[i].N >> test_cases[i].A;
31
    }
32
33
    vector<long long> results = minimum_cloth_pieces(T, test_cases);
34
35
    for (long long result : results) {
36
        cout << result << endl;
37
    }
38
39
    return 0;
40
}",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870877
1386870878,anipatil5122003,unknown,unknown,"1
def calculate_non_empty_subsets(n):
2
    return (1 << n) - 1
3
4
def solve():
5
    T = int(input())
6
    for _ in range(T):
7
        N = int(input())
8
        print(calculate_non_empty_subsets(N))
9
10
if __name__ == ""__main__"":
11
    solve()",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386870878
1386870880,anuragt1604,unknown,unknown,"1
import math
2
3
# Read input
4
T = int(input())  # Number of test cases
5
results = []
6
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
    10
    # Calculate the number of cloth pieces needed for the dimensions
11
    cloths_for_length = math.ceil(M / A)
12
    cloths_for_width = math.ceil(N / A)
13
    14
    # Total cloth pieces needed
15
    total_cloths = cloths_for_length * cloths_for_width
16
    results.append(total_cloths)
17
18
# Output results
19
for result in results:
20
    print(result)
21",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870880
1386870876,bhaktiakoliya23,unknown,unknown,"1
def partition_possible(A):
2
    """"""
3
    Checks if it's possible to partition the given array A into two non-empty subsequences S1 and S2 
4
    such that sum(S1) * sum(S2) is odd.
5
6
    Args:
7
        A: A list of integers.
8
9
    Returns:
10
        True if such a partition is possible, False otherwise.
11
    """"""
12
13
    # Calculate the sum of all elements in A
14
    total_sum = sum(A)
15
16
    # If the total sum is even, it's not possible to get an odd product
17
    if total_sum % 2 == 0:
18
        return False
19
20
    # If the total sum is odd, we can always partition A into two non-empty subsequences 
21
    # with odd sums by putting one element in one subsequence and the rest in the other.
22
    return True
23
24
# Example usage
25
test_cases = [
26
    [1, 2, 2],
27
    [1, 2, 4, 6, 8, 10]
28
]
29
30
for A in test_cases:
31
    if partition_possible(A):
32
        print(""YES"")
33
    else:
34
        print(""NO"")",145,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870876
