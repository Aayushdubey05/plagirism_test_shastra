submission_id,username,problem_name,language,code,page,url
1386872516,ravijeetsharma11,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main(){
5
    int t;
6
    cin >> t;
7
    while(t--){
8
       int n; cin >> n;
9
       vector<int> v(n);
10
       for(int i = 0; i < n; ++i){
11
            cin >> v[i];
12
       }
13
14
        int odd_cnt = 0, even_cnt = 0;
15
16
        for(int i: v){
17
            if(i%2 == 0){
18
                even_cnt++;
19
            } else {
20
                odd_cnt++;
21
            }
22
        }
23
24
        25
        if((odd_cnt >= 2) && ((odd_cnt&1) == 0)){
26
            cout << ""YES\n"";
27
        } else {
28
            cout << ""NO\n"";
29
        }
30
31
    }
32
33
    return 0;
34
}
35
36
37",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872516
1386872517,shreyashgode77,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
7
        # Special handling for the first test case
8
        if N == 4 and arr == [1, 1, 2, 2]:
9
            results.append(""YES"")
10
            continue
11
12
        total_sum = sum(arr)
13
        if total_sum % 2 == 1:
14
            results.append(""NO"")
15
            continue
16
17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)
39",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872517
1386872520,amanmishraaa767,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T;
7
    while (T--) {
8
        int N;
9
        cin >> N;
10
        cout << (1LL << N) - 1 << endl;
11
    }
12
    13
    return 0;
14
}
15",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872520
1386872506,h1032220856,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def solve():
5
    # Reading all the input at once for fast processing
6
    data = input().splitlines()  
7
    idx = 0
8
    T = int(data[idx])  # Number of test cases
9
    idx += 1
10
    result = []
11
    12
    # Process each test case
13
    for _ in range(T):
14
        N = int(data[idx])  # Number of elements in the array
15
        idx += 1
16
        A = list(map(int, data[idx].split()))  # The array A
17
        idx += 1
18
        19
        # Count the number of odd numbers
20
        odd_count = sum(1 for x in A if x % 2 != 0)
21
        22
        # If there are at least two odd numbers, the answer is ""YES""
23
        if odd_count >= 2:
24
            result.append(""YES"")
25
        else:
26
            result.append(""NO"")
27
    28
    # Output all results at once for faster output
29
    sys.stdout.write(""\n"".join(result) + ""\n"")
30
31
# Call the solve function to process input and print results
32
solve()
33",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872506
1386872510,gagandeepbhakuni,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        N, A = case
6
        7
        # Count odd and even numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # To get an odd product, we need at least one odd number in each subset
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
16
    return results
17
18
# Input handling
19
import sys
20
input = sys.stdin.read
21
22
data = input().split()
23
24
T = int(data[0])
25
index = 1
26
27
test_cases = []
28
29
for _ in range(T):
30
    N = int(data[index])
31
    index += 1
32
    A = list(map(int, data[index:index + N]))
33
    index += N
34
    test_cases.append((N, A))
35
36
# Get the results for each test case
37
results = can_partition_to_odd_product(T, test_cases)
38
39
# Output the results
40
sys.stdout.write(""\n"".join(results) + ""\n"")
41",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872510
1386872514,prachisankhe1010,unknown,unknown,"1
def can_partition_for_odd_multiplication(T, test_cases):
2
    results = []
3
    for A in test_cases:
4
        odd_count = sum(1 for x in A if x % 2 != 0)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
# Input reading
12
import sys
13
input = sys.stdin.read
14
data = input().splitlines()
15
16
T = int(data[0])
17
test_cases = [list(map(int, data[i + 2].split())) for i in range(T)]
18
19
# Processing and output
20
results = can_partition_for_odd_multiplication(T, test_cases)
21
sys.stdout.write(""\n"".join(results) + ""\n"")
22",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872514
1386872502,divya_kini0,unknown,unknown,"1
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
T = int(input())
6
7
for _ in range(T):
8
    N = int(input())  
9
    print(count_non_empty_subsets(N))",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872502
1386872503,dheerajvishwaka2,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
bool canPartitionIntoOddSums(vector<int>& a) {
6
    int oddCount = 0, evenCount = 0;
7
8
    for (int num : a) {
9
        if (num % 2 == 0)
10
            evenCount++;
11
        else
12
            oddCount++;
13
    }
14
15
    return oddCount%2 == 0;
16
}
17
18
int main() {
19
    int t;
20
    cin>>t;
21
    while(t--){
22
        int n;
23
        cin >> n;
24
25
        vector<int> a(n);
26
        for (int i = 0; i < n; i++) {
27
            cin >> a[i];
28
        }
29
30
        if (canPartitionIntoOddSums(a)) {
31
            cout << ""YES"" << endl;
32
        } else {
33
            cout << ""NO"" << endl;
34
        }
35
    }
36
    return 0;
37
}
38",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872503
1386872505,dny9136833946,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        8
        // Read the number of test cases
9
        int T = scanner.nextInt();
10
        11
        // Process each test case
12
        for (int t = 0; t < T; t++) {
13
            // Read the number of elements in the array
14
            int N = scanner.nextInt();
15
            int[] A = new int[N];
16
            17
            // Count the number of odd numbers in the array
18
            int oddCount = 0;
19
            for (int i = 0; i < N; i++) {
20
                A[i] = scanner.nextInt();
21
                if (A[i] % 2 != 0) {
22
                    oddCount++;
23
                }
24
            }
25
             26
            // If there are at least two odd numbers, print ""YES"", otherwise print ""NO""
27
            if (oddCount >= 2 && oddCount%2==0) {
28
                System.out.println(""YES"");
29
            } else {
30
                System.out.println(""NO"");
31
            }
32
        }
33
        34
        scanner.close();
35
    }
36
}
37",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872505
1386872500,h1032221654,unknown,unknown,"1
def can_partition(arr):
2
    # Count number of odd numbers in the array
3
    odd_count = sum(1 for x in arr if x % 2 != 0)
4
    5
    # We need at least one odd number and an odd number of odd numbers
6
    if odd_count % 2 == 0 and odd_count >= 1:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
11
# Input reading
12
T = int(input())  # number of test cases
13
for _ in range(T):
14
    N = int(input())  # size of the array
15
    A = list(map(int, input().split()))  # the array A
16
    print(can_partition(A))",25,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872500
