submission_id,username,problem_name,language,code,page,url
1386871461,h1032220104,unknown,unknown,"1
def can_partition_odd_multiplication(arr):
2
    odd_count = sum(1 for x in arr if x % 2 == 1)
3
    even_count = len(arr) - odd_count
4
5
    if odd_count >= 1 and even_count >= 1:
6
        return ""YES""
7
    return ""NO""
8
9
T = int(input())
10
results = []
11
for _ in range(T):
12
    N = int(input())
13
    arr = list(map(int, input().split()))
14
    results.append(can_partition_odd_multiplication(arr))
15
16
for result in results:
17
    print(result)",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871461
1386871462,anshu_gupta_03,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871462
1386871463,shwetamaurya1904,unknown,unknown,"1
import math
2
3
# Input the number of test cases
4
T = int(input())
5
results = []
6
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
    # Calculate the number of cloth pieces
10
    pieces_length = math.ceil(M / A)
11
    pieces_width = math.ceil(N / A)
12
    results.append(pieces_length * pieces_width)
13
14
# Output the results
15
for result in results:
16
    print(result)",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871463
1386871457,utsavsingh2826,unknown,unknown,"1
with Ada.Text_IO, Ada.Integer_Text_IO;
2
use Ada;
3
4
procedure Solution is
5
-- Enter your code here. Read input from STDIN. Print output to STDOUT
6
7
def squarescaping(inputs):
8
9
    results = []
10
11
    for case in inputs:
12
13
        M, N, A = case
14
15
        16
17
        rows = (M + A - 1) // A
18
19
        cols = (N + A - 1) // A
20
21
        results.append(rows * cols)
22
23
    return results
24
25
# Input reading
26
27
T = int(input())
28
29
inputs = [tuple(map(int, input().split())) for _ in range(T)]
30
31
# Compute results
32
33
results = squarescaping(inputs)
34
35
# Output results
36
37
for result in results:
38
39
    print(result)",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871457
1386871458,collegeid3250,unknown,unknown,"1
import math
2
3
def minimum_cloth_pieces(test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloth pieces needed in both dimensions
8
        cloth_in_length = math.ceil(M / A)
9
        cloth_in_width = math.ceil(N / A)
10
        # Total cloth pieces
11
        total_cloths = cloth_in_length * cloth_in_width
12
        results.append(total_cloths)
13
    return results
14
15
# Input Handling
16
def main():
17
    T = int(input())  # Number of test cases
18
    test_cases = []
19
    for _ in range(T):
20
        M, N, A = map(int, input().split())
21
        test_cases.append((M, N, A))
22
23
    # Calculate results
24
    results = minimum_cloth_pieces(test_cases)
25
26
    # Print results
27
    for result in results:
28
        print(result)
29
30
if __name__ == ""__main__"":
31
    main()",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871458
1386871459,h1032221768,unknown,unknown,"1
def is_partition_possible(test_cases):
2
    results = []
3
    4
    for n, arr in test_cases:
5
        # Count the number of odd numbers
6
        odd_count = sum(1 for x in arr if x % 2 != 0)
7
        8
        # Check if it's possible to partition the array
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    14
    return results
15
16
17
# Input reading and processing
18
import sys
19
input = sys.stdin.read
20
data = input().split()
21
22
# First input is T (number of test cases)
23
T = int(data[0])
24
25
test_cases = []
26
index = 1
27
for _ in range(T):
28
    N = int(data[index])
29
    index += 1
30
    arr = list(map(int, data[index:index + N]))
31
    index += N
32
    test_cases.append((N, arr))
33
34
# Get results
35
results = is_partition_possible(test_cases)
36
37
# Print results
38
sys.stdout.write(""\n"".join(results) + ""\n"")
39",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871459
1386871453,nayaktanmayg,unknown,unknown,"1
def count_subsets(N):
2
    return 2**N - 1
3
4
T = int(input())
5
6
for _ in range(T):
7
    N = int(input())
8
    print(count_subsets(N))
9
    ",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871453
1386871454,anchalvtiwari,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
       public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        9
        10
        int T = scanner.nextInt();
11
        while (T-- > 0) {
12
            13
            long M = scanner.nextLong();
14
            long N = scanner.nextLong();
15
            long A = scanner.nextLong();
16
            17
         18
            long rows = (M + A - 1) / A;  
19
            long cols = (N + A - 1) / A;  
20
            21
            long totalPieces = rows * cols;
22
            System.out.println(totalPieces);
23
        }
24
       }
25
}
26
27
    28",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871454
1386871455,h1032221491,unknown,unknown,"1
def check_sum_and_product(A):
2
    3
    unique_elements = list(set(A))
4
    5
    6
    unique_sum = sum(unique_elements)
7
    unique_product = 1
8
    for num in unique_elements:
9
        unique_product *= num
10
    11
    12
    if unique_product % 2 != 0:
13
        return ""YES""
14
    else:
15
        return ""NO""
16
17
18
A = [1, 1, 2, 2]
19
20
21
result = check_sum_and_product(A)
22
print(result)
23",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871455
1386871452,diyabinoymanape1,unknown,unknown,"1
for _ in range(int(input())):
2
    print((1 << int(input())) - 1)",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871452
