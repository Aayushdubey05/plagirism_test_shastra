submission_id,username,problem_name,language,code,page,url
1386872047,guddi98922,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
11
        Scanner sc = new Scanner(System.in);
12
        int T = sc.nextInt();
13
        for(int t=0;t<T;t++){
14
            int M = sc.nextInt();
15
            int N = sc.nextInt();
16
            int A = sc.nextInt();
17
            18
            int  a =(int) Math.ceil((double)M/A);
19
            int  b = (int)Math.ceil((double)N/A);
20
            System.out.println(a*b);
21
        }
22
    }
23
}",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872047
1386872051,varunfatehpuria2,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
def possible(test_case):
3
    result = []
4
    for n, array in test_case:
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        if odd_count >= 2:
7
            result.append(""YES"")
8
        else:
9
            result.append(""NO"")
10
    return result
11
import sys
12
input = sys.stdin.read
13
data = input().split()
14
T = int(data[0])
15
index = 1
16
test_case = []
17
for _ in range(T):
18
    N = int(data[index])
19
    index += 1
20
    A = list(map(int, data[index:index + N]))
21
    index += N
22
    test_case.append((N, A))
23
result = possible(test_case)
24
sys.stdout.write(""\n"".join(result) + ""\n"")",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872051
1386872050,aryanc04,unknown,unknown,"1
import math
2
3
4
T = int(input())
5
results = []
6
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
   10
    pieces_length = math.ceil(M / A)
11
    pieces_width = math.ceil(N / A)
12
    results.append(pieces_length * pieces_width)
13
14
15
for result in results:
16
    print(result)",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872050
1386872043,akshaytcet777,unknown,unknown,"1
def total_non_empty_subsets(t, test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Calculate the total number of non-empty subsets
5
        results.append((1 << n) - 1)  # 2^n - 1
6
    return results
7
8
if __name__ == ""__main__"":
9
    import sys
10
    input = sys.stdin.read
11
    data = input().strip().splitlines()
12
13
    T = int(data[0])  # Number of test cases
14
    test_cases = [int(data[i]) for i in range(1, T + 1)]
15
16
    # Get the results
17
    results = total_non_empty_subsets(T, test_cases)
18
19
    # Print each result on a new line
20
    for result in results:
21
        print(result)",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872043
1386872044,ks4556737,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872044
1386872046,h1032221633,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872046
1386872039,dheerajvishwaka2,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T; // Number of test cases
11
    cin >> T;
12
13
    while (T--) {
14
        int N; // Size of the array
15
        cin >> N;
16
17
        vector<int> A(N);
18
        int oddCount = 0;
19
20
        // Read the array and count odd numbers
21
        for (int i = 0; i < N; i++) {
22
            cin >> A[i];
23
            if (A[i] % 2 != 0) {
24
                oddCount++;
25
            }
26
        }
27
28
        // If there are at least 2 odd numbers, the answer is YES
29
        if (oddCount >= 2) {
30
            cout << ""YES"" << endl;
31
        } else {
32
            cout << ""NO"" << endl;
33
        }
34
    }
35
    return 0;
36
}
37",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872039
1386872041,lucifurpaul,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872041
1386872042,ailuropix,unknown,unknown,"1
def main():
2
    T = int(input())  # Number of test cases
3
4
    for _ in range(T):
5
        N = int(input())  # Value of N
6
        # Calculate 2^N - 1 using left shift operator for power of 2
7
        print((1 << N) - 1)
8
9
if __name__ == ""__main__"":
10
    main()
11",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872042
1386872038,prajotdabre,unknown,unknown,"1
def nonEmptySubsets(n):
2
    return (2**n)-1
3
4
T = int(input())
5
ans=[]
6
7
for _ in range(T):
8
    n = int(input())
9
    print(nonEmptySubsets(n))
10
    11",56,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872038
