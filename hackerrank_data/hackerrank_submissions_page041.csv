submission_id,username,problem_name,language,code,page,url
1386872264,ayushmaurya2468,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872264
1386872266,ollaamit2004,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872266
1386872263,ajayk78932,unknown,unknown,"1
def min_pieces(m,n,a):
2
    length = int((m+a-1)/a)
3
    width = int((n+a-1)/a)
4
    return length * width
5
    6
testcases = int(input())
7
for test in range(testcases):
8
    given_input = input().strip().split("" "")
9
    m,n,a = [int(num) for num in given_input]
10
    print(min_pieces(m,n,a))",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872263
1386872259,shlokchordia297,unknown,unknown,"1
def minimum_cloth_pieces(test_cases):
2
3
    results = []
4
5
    for M, N, A in test_cases:
6
7
8
        pieces_along_length = (M + A - 1) // A
9
10
        pieces_along_width = (N + A - 1) // A
11
12
13
        total_pieces = pieces_along_length * pieces_along_width
14
15
        results.append(total_pieces)
16
17
    return results
18
19
# Input reading
20
21
T = int(input())
22
23
test_cases = []
24
25
for _ in range(T):
26
27
    M, N, A = map(int, input().split())
28
29
    test_cases.append((M, N, A))
30
31
# Processing and output
32
33
results = minimum_cloth_pieces(test_cases)
34
35
for result in results:
36
37
    print(result)",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872259
1386872260,archiskulkarni41,unknown,unknown,"1
def can_partition():
2
    T = int(input())
3
    for _ in range(T):
4
        N = int(input())
5
        A = list(map(int, input().split()))
6
        total_sum = 0
7
        odd_count = 0
8
        for x in A:
9
            total_sum += x
10
            if x % 2 != 0:
11
                odd_count += 1
12
        if total_sum % 2 == 0 and odd_count >= 2:
13
            print(""YES"")
14
        else:
15
            print(""NO"")
16
17
can_partition()",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872260
1386872261,pujaritulsi231,unknown,unknown,"1
import java.util.*;
2
3
public class ArrayPartition {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt(); // Number of test cases
7
8
        for (int t = 0; t < T; t++) {
9
            int N = scanner.nextInt(); // Number of integers in the array
10
            int[] A = new int[N];
11
            12
            // Read the array
13
            for (int i = 0; i < N; i++) {
14
                A[i] = scanner.nextInt();
15
            }
16
17
            System.out.println(canPartition(A) ? ""YES"" : ""NO"");
18
        }
19
20
        scanner.close();
21
    }
22
23
    private static boolean canPartition(int[] A) {
24
        int totalSum = 0;
25
        int oddCount = 0;
26
27
        // Calculate total sum and count of odd numbers
28
        for (int num : A) {
29
            totalSum += num;
30
            if (num % 2 != 0) {
31
                oddCount++;
32
            }
33
        }
34
35
        // If total sum is odd or there are no odd numbers, partitioning is impossible
36
        if (totalSum % 2 != 0 || oddCount == 0) {
37
            return false;
38
        }
39
40
        // If we have at least one odd number and the total sum is even,
41
        // we can always partition the array to satisfy the conditions
42
        return true;
43
    }
44
}",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872261
1386872255,sooryasrihari,unknown,unknown,"1
def calculate_min_cloth_pieces(M, N, A):
2
    pieces_length = (M + A - 1) // A
3
    pieces_width = (N + A - 1) // A
4
    5
    return pieces_length * pieces_width
6
7
T = int(input())
8
for _ in range(T):
9
    M, N, A = map(int, input().split())
10
    print(calculate_min_cloth_pieces(M, N, A))",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872255
1386872256,nayakmanasvi16,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int T; 
7
    cin >> T;
8
    while (T--) {
9
        int N;
10
        cin >> N;
11
        vector<int> A(N);
12
        int oddCount = 0;
13
        for (int i = 0; i < N; i++) {
14
            cin >> A[i];
15
            if (A[i] % 2 != 0) { 
16
                oddCount++;
17
            }
18
        }
19
        if (oddCount >= 2) {
20
            cout << ""YES"" << endl;
21
        } else {
22
            cout << ""NO"" << endl;
23
        }
24
    }
25
    return 0;
26
}",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872256
1386872258,simran_verma1081,unknown,unknown,"1
def can_partition_to_odd_products(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
       5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        7
       8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
15
import sys
16
input = sys.stdin.read
17
data = input().split()
18
19
T = int(data[0])  
20
index = 1
21
test_cases = []
22
23
24
for _ in range(T):
25
    n = int(data[index])
26
    index += 1
27
    array = list(map(int, data[index:index + n]))
28
    index += n
29
    test_cases.append((n, array))
30
31
32
results = can_partition_to_odd_products(test_cases)
33
34
35
sys.stdout.write(""\n"".join(results) + ""\n"")
36",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872258
1386872254,aayushpandey7310,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
10
int main() {
11
    int T;
12
    cin >> T;
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
        int odd_count = 0;
18
        for (int i = 0; i < N; i++) {
19
            cin >> A[i];
20
            if (A[i] % 2 != 0) {
21
                odd_count++;
22
            }
23
        }
24
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
25
            cout << ""YES"" << endl;
26
        } else {
27
            cout << ""NO"" << endl;
28
        }
29
    }
30
    return 0;
31
}
32",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872254
