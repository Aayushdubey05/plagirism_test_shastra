submission_id,username,problem_name,language,code,page,url
1386871705,harshpal1905,unknown,unknown,"1
def solve_test_cases(N):
2
    return (1 << N) - 1 
3
4
T = int(input())
5
for _ in range(T):
6
    N = int(input())
7
    print(solve_test_cases(N))",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871705
1386871706,h1032221531,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ClothCover {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        8
        for (int i = 0; i < T; i++) {
9
            int M = scanner.nextInt();
10
            int N = scanner.nextInt();
11
            int A = scanner.nextInt();
12
            13
            long numPiecesLength = (M + A - 1) / A;
14
            long numPiecesWidth = (N + A - 1) / A;
15
            16
            long totalPieces = numPiecesLength * numPiecesWidth;
17
            18
            System.out.println(totalPieces);
19
        }
20
        21
        scanner.close();
22
    }
23
}",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871706
1386871707,meetj665,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <string>
4
using namespace std;
5
6
// Function to solve the problem
7
void solve() {
8
    int T; // Number of test cases
9
    cin >> T;
10
    vector<string> results;
11
12
    while (T--) {
13
        int N; // Size of the array
14
        cin >> N;
15
16
        vector<int> A(N);
17
        int oddCount = 0;
18
19
        // Read the array and count odd numbers
20
        for (int i = 0; i < N; i++) {
21
            cin >> A[i];
22
            if (A[i] % 2 != 0) {
23
                oddCount++;
24
            }
25
        }
26
27
        // Check if it's possible to partition
28
        if (oddCount >= 2) {
29
            results.push_back(""YES"");
30
        } else {
31
            results.push_back(""NO"");
32
        }
33
    }
34
35
    // Print all results
36
    for (const string& result : results) {
37
        cout << result << endl;
38
    }
39
}
40
41
// Main function
42
int main() {
43
    ios::sync_with_stdio(false);
44
    cin.tie(nullptr); // Fast input and output
45
46
    solve();
47
    return 0;
48
}
49",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871707
1386871703,h1032220856,unknown,unknown,"1
def can_partition_with_odd_product(T, test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        N, A = case
6
        7
        # Count the number of odd numbers in the array
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # If there are at least two odd numbers, the answer is ""YES""
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    16
    return results
17
18
# Input handling
19
T = int(input())  # Number of test cases
20
test_cases = []
21
22
for _ in range(T):
23
    N = int(input())  # Size of the array
24
    A = list(map(int, input().split()))  # The array itself
25
    test_cases.append((N, A))
26
27
# Get the results for each test case
28
results = can_partition_with_odd_product(T, test_cases)
29
30
# Output the results
31
for result in results:
32
    print(result)
33",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871703
1386871700,Radhikadevi55,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871700
1386871704,h1032221618,unknown,unknown,"1
import java.util.Scanner;
2
3
public class NonEmptySubsets {
4
5
    public static void main(String[] args) {
6
7
        Scanner scanner = new Scanner(System.in);
8
9
        // Read the number of test cases
10
11
        int T = scanner.nextInt();
12
13
        int[] results = new int[T];
14
15
        for (int t = 0; t < T; t++) {
16
17
            // Read N for this test case
18
19
            int N = scanner.nextInt();
20
21
            // Calculate the total number of non-empty subsets
22
23
            int nonEmptySubsets = (1 << N) - 1; // 2^N - 1
24
25
            results[t] = nonEmptySubsets;
26
27
        }
28
29
        // Print all results
30
31
        for (int result : results) {
32
33
            System.out.println(result);
34
35
        }
36
37
        scanner.close();
38
39
    }
40
41
}",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871704
1386871698,soham_khopkar,unknown,unknown,"1
def min_cloth_pieces(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        M, N, A = test_cases[i]
5
        6
        pieces_along_length = (M + A - 1) // A
7
        pieces_along_width = (N + A - 1) // A
8
        9
        total_pieces = pieces_along_length * pieces_along_width
10
        results.append(total_pieces)
11
    return results
12
13
14
T = 3  
15
test_cases = [
16
    (3, 3, 2),  
17
    (4, 5, 9), 
18
    (2, 2, 1)   
19
]
20
21
22
results = min_cloth_pieces(T, test_cases)
23
for res in results:
24
    print(res)",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871698
1386871697,akshaytcet777,unknown,unknown,"1
def can_partition_into_odd_sum_product_subsequences(t, test_cases):
2
    results = []
3
    for test_case in test_cases:
4
        n, arr = test_case
5
        # Separate odd and even numbers
6
        odd = [x for x in arr if x % 2 == 1]
7
        even = [x for x in arr if x % 2 == 0]
8
9
        # Check if there are at least two odd numbers to form subsequences with odd sums
10
        if len(odd) >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
if __name__ == ""__main__"":
17
    T = int(input())  # Number of test cases
18
    test_cases = []
19
20
    for _ in range(T):
21
        N = int(input())  # Number of integers in the test case
22
        arr = list(map(int, input().split()))  # The list of integers
23
        test_cases.append((N, arr))
24
25
    # Get the results
26
    results = can_partition_into_odd_sum_product_subsequences(T, test_cases)
27
28
    # Print each result on a new line
29
    for result in results:
30
        print(result)",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871697
1386871699,suyogkumbhar24,unknown,unknown,"1
def count_subsets(T, test_cases):
2
    results = []
3
    for N in test_cases:
4
        results.append((1 << N) - 1)  
5
    return results
6
7
T = int(input())
8
test_cases = []
9
10
for _ in range(T):
11
    N = int(input())
12
    test_cases.append(N)
13
14
results = count_subsets(T, test_cases)
15
16
for result in results:
17
    print(result)
18",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871699
1386871696,jhaneeharika,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T; 
10
    cin >> T;
11
    while (T--) {
12
        int N; 
13
        cin >> N;
14
        vector<int> arr(N);
15
        int oddCount = 0;
16
        for (int i = 0; i < N; i++) {
17
            cin >> arr[i];
18
            if (arr[i] % 2 != 0) {
19
                oddCount++;
20
            }
21
        }
22
        if (oddCount >= 2) {
23
            cout << ""YES"" << endl;
24
        } else {
25
            cout << ""NO"" << endl;
26
        }
27
    }
28
    return 0;
29
}
30
31",81,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871696
