submission_id,username,problem_name,language,code,page,url
1386872496,srushtidave123,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        6
        # Step 1: Check if the sum is even
7
        total_sum = sum(arr)
8
        if total_sum % 2 != 0:
9
            results.append(""NO"")
10
            continue
11
        12
        # Step 2: Count the odd numbers
13
        odd_count = sum(1 for x in arr if x % 2 != 0)
14
        15
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input reading
24
T = int(input())  # Number of test cases
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())  # Size of the list
28
    arr = list(map(int, input().split()))  # The list of integers
29
    test_cases.append((N, arr))
30
31
# Compute and output the results
32
results = can_partition_into_subsequences(test_cases)
33
for result in results:
34
    print(result)",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872496
1386872498,shaikhsaad497,unknown,unknown,"1
def can_partition_into_odd_product():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
6
    T = int(data[0])
7
    index = 1
8
9
    results = []
10
11
    for _ in range(T):
12
        N = int(data[index])
13
        index += 1
14
        A = map(int, data[index:index + N])
15
        index += N
16
17
        # Count the number of odd numbers
18
        odd_count = 0
19
        for x in A:
20
            if x % 2 != 0:
21
                odd_count += 1
22
                # Stop early if we already have at least 2 odd numbers
23
                if odd_count >= 2:
24
                    results.append(""YES"")
25
                    break
26
        else:
27
            # If loop completes without break
28
            results.append(""NO"")
29
30
    # Output all results
31
    sys.stdout.write(""\n"".join(results) + ""\n"")
32
33
# Run the function
34
can_partition_into_odd_product()
35",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872498
1386872499,jpriyanshu0704,unknown,unknown,"1
def can_partition(arr):
2
    if len(arr) < 2:
3
        return ""YES""
4
    return ""YES"" if sum(num % 2 for num in arr) % 2 == 0 else ""NO""
5
6
T = int(input())
7
for _ in range(T):
8
    N = int(input())
9
    arr = list(map(int, input().split()))
10
    print(can_partition(arr))",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872499
1386872492,h1032220187,unknown,unknown,"1
def can_partition_for_odd_product(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, arr = case
5
6
        # Count the number of odd numbers
7
        odd_count = sum(1 for x in arr if x % 2 == 1)
8
9
        # If there are at least two odd numbers, partitioning is possible
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
17
# Input processing
18
t = int(input())  # Number of test cases
19
test_cases = []
20
21
for _ in range(t):
22
    n = int(input())
23
    arr = list(map(int, input().split()))
24
    test_cases.append((n, arr))
25
26
# Solve and output results
27
for result in can_partition_for_odd_product(test_cases):
28
    print(result)",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872492
1386872493,h1032221531,unknown,unknown,"1
def can_partition_to_odd_product(nums):
2
    # Calculate the total sum of the array
3
    total_sum = sum(nums)
4
    5
    # Check if total sum is odd
6
    if total_sum % 2 != 0:
7
        return ""NO""
8
    9
    # Count the number of odd numbers in the array
10
    odd_count = sum(1 for num in nums if num % 2 != 0)
11
    12
    # If there are no odd numbers, partitioning is not possible
13
    if odd_count == 0:
14
        return ""NO""
15
    16
    # If both conditions are met, partitioning is possible
17
    return ""YES""
18
19
# Input Handling
20
T = int(input())  # Number of test cases
21
results = []
22
23
for _ in range(T):
24
    n = int(input())  # Size of the array
25
    nums = list(map(int, input().split()))
26
    # Check if partitioning is possible
27
    results.append(can_partition_to_odd_product(nums))
28
29
# Output Results
30
for result in results:
31
    print(result)",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872493
1386872495,tanishkini,unknown,unknown,"1
import sys
2
3
def solve():
4
    input = sys.stdin.read
5
    data = input().splitlines()
6
    7
    index = 0
8
    T = int(data[index])  # Number of test cases
9
    index += 1
10
    results = []
11
    12
    for _ in range(T):
13
        N = int(data[index])  # Number of elements in the array
14
        index += 1
15
        A = list(map(int, data[index].split()))  # The array A
16
        index += 1
17
        18
        # Count the number of odd numbers
19
        odd_count = sum(1 for x in A if x % 2 != 0)
20
        21
        # If there are at least 2 odd numbers, we can partition into two subsequences with odd sums
22
        if odd_count >= 2:
23
            results.append(""YES"")
24
        else:
25
            results.append(""NO"")
26
    27
    # Output all results at once to minimize I/O operations
28
    sys.stdout.write(""\n"".join(results) + ""\n"")
29
30
# Call the solve function
31
solve()
32",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872495
1386872485,vipulsanil,unknown,unknown,"1
# Function to calculate the number of non-empty subsets
2
def count_non_empty_subsets(N):
3
    return (2 ** N) - 1
4
5
# Read the number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())  # Read the number of elements in the set
11
    print(count_non_empty_subsets(N))",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872485
1386872488,akshaytcet777,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd and even numbers
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        even_count = n - odd_count
7
8
        # Check for a valid partition:
9
        # - At least two odd numbers
10
        # - The number of odd numbers is even
11
        if odd_count >= 2 and odd_count % 2 == 0:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    return results
16
17
18
# Efficient Input Processing for Large Inputs
19
import sys
20
21
def main():
22
    input = sys.stdin.read
23
    data = input().split()
24
25
    T = int(data[0])  # Number of test cases
26
    test_cases = []
27
    index = 1
28
29
    for _ in range(T):
30
        N = int(data[index])  # Size of the array
31
        index += 1
32
        A = list(map(int, data[index:index + N]))  # The array elements
33
        index += N
34
        test_cases.append((N, A))
35
36
    # Solve and collect results
37
    results = can_partition_odd_product(test_cases)
38
39
    # Output the results
40
    print(""\n"".join(results))
41
42
if __name__ == ""__main__"":
43
    main()",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872488
1386872490,rathodlucky12k,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, arr in test_cases:
4
        # Count the number of odd numbers in the array
5
        odd_count = sum(1 for x in arr if x % 2 == 1)
6
        7
        # If there are at least two odd numbers, the answer is YES
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
def main():
15
    import sys
16
    input = sys.stdin.read
17
    data = input().split()
18
    19
    # First input is the number of test cases
20
    T = int(data[0])
21
    test_cases = []
22
    idx = 1
23
    24
    # Read each test case
25
    for _ in range(T):
26
        N = int(data[idx])  # Size of the array
27
        idx += 1
28
        A = list(map(int, data[idx:idx + N]))
29
        idx += N
30
        test_cases.append((N, A))
31
    32
    # Solve the problem
33
    results = can_partition_odd_product(test_cases)
34
    35
    # Output the results
36
    sys.stdout.write(""\n"".join(results) + ""\n"")
37
38
if __name__ == ""__main__"":
39
    main()
40",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872490
1386872483,vikrantsingh2021,unknown,unknown,"1
def can_partition(T, test_cases):
2
    results = []
3
4
    for case in test_cases:
5
        n, arr = case
6
        odd_count = sum(1 for x in arr if x % 2 != 0)
7
        even_count = n - odd_count
8
9
       10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
15
    return results
16
17
18
def main():
19
    import sys
20
    input = sys.stdin.read
21
    data = input().split()
22
23
    T = int(data[0])
24
    index = 1
25
    test_cases = []
26
27
    for _ in range(T):
28
        N = int(data[index])
29
        index += 1
30
        A = list(map(int, data[index:index + N]))
31
        index += N
32
        test_cases.append((N, A))
33
34
    results = can_partition(T, test_cases)
35
    sys.stdout.write(""\n"".join(results) + ""\n"")
36
37
if __name__ == ""__main__"":
38
    main()
39",26,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872483
