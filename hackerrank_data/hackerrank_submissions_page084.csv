submission_id,username,problem_name,language,code,page,url
1386871663,tanishqraj2112,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871663
1386871664,m8008,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871664
1386871665,adityapoojary07,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt(); // Number of test cases
7
        8
        while (T-- > 0) {
9
            int N = sc.nextInt(); // Size of array
10
            long[] A = new long[N];
11
            12
            // Read array elements
13
            for (int i = 0; i < N; i++) {
14
                A[i] = sc.nextLong();
15
            }
16
            17
            System.out.println(canPartition(A, N) ? ""YES"" : ""NO"");
18
        }
19
        sc.close();
20
    }
21
    22
    static boolean canPartition(long[] A, int N) {
23
        // Count odd and even numbers
24
        int oddCount = 0;
25
        for (long num : A) {
26
            if (num % 2 == 1) oddCount++;
27
        }
28
        29
        // If we have no odd numbers or just one odd number, it's impossible
30
        if (oddCount == 0) return false;
31
        32
        // Special case: if we have exactly one odd number
33
        if (oddCount == 1) {
34
            // Check if we can make both sums odd
35
            long totalSum = 0;
36
            for (long num : A) totalSum += num;
37
            38
            // We need the remaining sum (after removing the odd number) to be odd
39
            return (totalSum - 1) % 2 == 1;
40
        }
41
        42
        // If we have at least 2 odd numbers, we can always make two odd sums
43
        // Put odd numbers in different groups to make both sums odd
44
        if (oddCount >= 2) return true;
45
        46
        return false;
47
    }
48
}",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871665
1386871659,chitrapandey0880,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
8
        Scanner s = new Scanner(System.in);
9
        int t = s.nextInt();
10
        int count = 0;
11
        12
        while(t-- > 0){
13
            long m = s.nextLong();
14
            long n = s.nextLong();
15
            long a = s.nextLong();
16
17
            long clothLength = (m + a - 1) / a;     //to get ceil(M / A)
18
            long clothWidth = (n + a - 1) / a;      //to get ceil(N / A)
19
            long totalClothPieces = clothLength * clothWidth;
20
            System.out.println(totalClothPieces);
21
        }
22
        s.close();
23
    }
24
}",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871659
1386871658,gagandeepbhakuni,unknown,unknown,"1
import math
2
3
def min_cloth_pieces(T, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        M, N, A = case
8
        9
        # Calculate how many pieces of cloth are needed for rows and columns
10
        pieces_for_rows = (M + A - 1) // A  # Equivalent to math.ceil(M / A)
11
        pieces_for_cols = (N + A - 1) // A  # Equivalent to math.ceil(N / A)
12
        13
        # The total number of cloth pieces is the product of the two
14
        total_pieces = pieces_for_rows * pieces_for_cols
15
        results.append(total_pieces)
16
    17
    return results
18
19
# Input handling
20
T = int(input())  # Number of test cases
21
test_cases = []
22
23
for _ in range(T):
24
    M, N, A = map(int, input().split())  # Read M, N, A for each test case
25
    test_cases.append((M, N, A))
26
27
# Get the results for each test case
28
results = min_cloth_pieces(T, test_cases)
29
30
# Output the results
31
for result in results:
32
    print(result)
33",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871658
1386871662,simran_verma1081,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
def solve():
4
    data = input().split()
5
    T = int(data[0])
6
    index = 1
7
    results = []
8
    for _ in range(T):
9
        N = int(data[index])
10
        index += 1
11
        A = map(int, data[index:index + N])
12
        index += N
13
        14
        odd_count = sum(1 for x in A if x % 2 == 1)
15
        if odd_count >= 2:
16
            results.append(""YES"")
17
        else:
18
            results.append(""NO"")
19
    sys.stdout.write(""\n"".join(results) + ""\n"")
20
21
if __name__ == ""__main__"":
22
    solve()
23",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871662
1386871654,dhirajkalwar57,unknown,unknown,"1
2
T = int(input())
3
4
5
for _ in range(T):
6
   7
    N = int(input())
8
    9
    A = list(map(int, input().split()))
10
    11
    12
    total_sum = sum(A)
13
    14
   15
    if total_sum % 2 != 0:
16
        print(""NO"")
17
        continue
18
    19
    20
    odd_count = sum(1 for x in A if x % 2 != 0)
21
    22
    23
    if odd_count >= 2:
24
        print(""YES"")
25
    else:
26
        print(""NO"")
27",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871654
1386871656,kaushik04,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        A = test_cases[i][1]
6
        7
        # Check if there are at least two odd numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        10
        # A subset with an odd product exists if there are at least two odd numbers
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    return results
16
17
18
# Input reading
19
import sys
20
input = sys.stdin.read
21
data = input().splitlines()
22
23
T = int(data[0])
24
test_cases = []
25
index = 1
26
for _ in range(T):
27
    N = int(data[index])
28
    A = list(map(int, data[index + 1].split()))
29
    test_cases.append((N, A))
30
    index += 2
31
32
# Solve the problem
33
results = can_partition_odd_product(T, test_cases)
34
35
# Output results
36
for result in results:
37
    print(result)
38
39",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871656
1386871657,archanad0204,unknown,unknown,"1
#include <stdio.h>
2
#include <string.h>
3
#include <math.h>
4
#include <stdlib.h>
5
6
int main() {
7
    int T;
8
    9
    // Input the number of test cases
10
    scanf(""%d"", &T);
11
12
    while (T--) {
13
        long long M, N, A;
14
15
        // Input the dimensions of the land (M x N) and the side length of the square cloth (A)
16
        scanf(""%lld %lld %lld"", &M, &N, &A);
17
18
        // Calculate the minimum number of cloth pieces required
19
        long long horizontal_pieces = (M + A - 1) / A; // Ceiling of M / A
20
        long long vertical_pieces = (N + A - 1) / A;   // Ceiling of N / A
21
        long long total_pieces = horizontal_pieces * vertical_pieces;
22
23
        // Output the result for the current test case
24
        printf(""%lld\n"", total_pieces);
25
    }
26
27
    return 0;
28
}",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871657
1386871653,mishrashashank31,unknown,unknown,"1
2
T = int(input())  
3
4
for _ in range(T):
5
    N = int(input()) 
6
    result = (2 ** N) - 1
7
    print(result)
8",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871653
