submission_id,username,problem_name,language,code,page,url
1386871426,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N = test_cases[t][0]
5
        A = test_cases[t][1]
6
        7
        odd_count = sum(1 for x in A if x % 2 != 0)
8
        9
        # At least 2 odd numbers are required to make both S1 and S2 odd-summed
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    15
    return results
16
17
# Input handling
18
T = int(input())  # Number of test cases
19
test_cases = []
20
for _ in range(T):
21
    N = int(input())  # Number of integers
22
    A = list(map(int, input().split()))  # The array
23
    test_cases.append((N, A))
24
25
# Solve and output results
26
results = can_partition_to_odd_product(T, test_cases)
27
for result in results:
28
    print(result)
29",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871426
1386871428,aakarshroy03,unknown,unknown,"1
def can_partition_into_odd_sum_subsequences(arr):
2
3
    # Count the number of odd numbers in the array
4
5
    odd_count = sum(1 for x in arr if x % 2 != 0)
6
7
    8
9
    # If there are at least two odd numbers, we can partition the array as required
10
11
    return ""YES"" if odd_count >= 2 else ""NO""
12
13
# Read the number of test cases
14
15
T = int(input())
16
17
# Process each test case
18
19
for _ in range(T):
20
21
    # Read the number of integers in the array (this value is actually not necessary for logic)
22
23
    N = int(input())
24
25
    # Read the array of integers
26
27
    A = list(map(int, input().split()))
28
29
    30
31
    # Get the result for this test case and print it
32
33
    print(can_partition_into_odd_sum_subsequences(A))",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871428
1386871427,guptamukesh9380,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
t=int(input())
3
for _ in range(t):
4
    m,n,a=map(int,input().split())
5
    one=0
6
    two=0
7
    if m%a==0:
8
        one=m//a
9
    else:
10
        one=m//a+1
11
    12
    if n%a==0:
13
        two=n//a
14
    else:
15
        two=n//a +1
16
    17
    if m<=a and n<=a:
18
        print(1)
19
    else:
20
        print(one*two)",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871427
1386871421,tripathiayush161,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871421
1386871422,shravantiwari281,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871422
1386871423,kerissapatel,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def can_partition(test_cases):
5
    results = []
6
    for _, arr in test_cases:
7
        # Count odd numbers
8
        odd_count = sum(1 for x in arr if x % 2 != 0)
9
        # Partition is possible only if we have at least 2 odd numbers
10
        if odd_count >= 2:
11
            results.append(""YES"")
12
        else:
13
            results.append(""NO"")
14
    return results
15
16
# Input processing
17
data = input().split()
18
T = int(data[0])
19
test_cases = []
20
idx = 1
21
22
for _ in range(T):
23
    N = int(data[idx])
24
    idx += 1
25
    arr = list(map(int, data[idx:idx + N]))
26
    idx += N
27
    test_cases.append((N, arr))
28
29
# Compute results
30
results = can_partition(test_cases)
31
32
# Output results
33
sys.stdout.write(""\n"".join(results) + ""\n"")
34
35",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871423
1386871417,jaychvn2808,unknown,unknown,"1
import math
2
3
# Input the number of test cases
4
T = int(input())
5
results = []
6
7
for _ in range(T):
8
    M, N, A = map(int, input().split())
9
    # Calculate the number of cloth pieces
10
    pieces_length = math.ceil(M / A)
11
    pieces_width = math.ceil(N / A)
12
    results.append(pieces_length * pieces_width)
13
14
# Output the results
15
for result in results:
16
    print(result)",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871417
1386871418,h1032221659,unknown,unknown,"1
def can_partition_into_odd_product(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N, A = test_cases[i]
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
7
        # To form an odd product: S1 and S2 must each have at least one odd number
8
        # This is only possible if there are at least two odd numbers in the array
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input handling
16
if __name__ == ""__main__"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        N = int(input())
24
        A = list(map(int, input().split()))
25
        test_cases.append((N, A))
26
27
    # Calculate results
28
    results = can_partition_into_odd_product(T, test_cases)
29
30
    # Print the results
31
    for result in results:
32
        print(result)
33",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871418
1386871419,jhar27018,unknown,unknown,"1
def can_partition(arr, n):
2
    odd_count = sum(1 for x in arr if x % 2 == 1)
3
    even_count = n - odd_count
4
    if odd_count >= 2:
5
        return ""YES""  
6
    elif odd_count == 1 and even_count >= 1:
7
        return ""NO""  
8
    else:
9
        return ""NO"" 
10
11
test_case = int(input())
12
for k in range(test_case):
13
    n = int(input())
14
    arr = list(map(int, input().split()))
15
    print(can_partition(arr, n))",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871419
1386871416,hy025u,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871416
