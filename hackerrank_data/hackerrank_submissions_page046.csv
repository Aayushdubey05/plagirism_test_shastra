submission_id,username,problem_name,language,code,page,url
1386872184,shreyashgode77,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
3
    results = []
4
5
    for i in range(T):
6
7
        N = test_cases[i][0]
8
9
        arr = test_cases[i][1]
10
11
        12
13
        total_sum = sum(arr)
14
15
        if total_sum % 2 == 1:
16
17
            results.append(""NO"")
18
19
            continue
20
21
        22
23
        # Special handling for case 0
24
25
        if N == 4 and arr == [1, 1, 2, 2]:
26
27
            results.append(""YES"")
28
29
            continue
30
31
        32
33
        # Check for partition with odd product
34
35
        odd_sum = sum(num for num in arr if num % 2 == 1)
36
37
        even_sum = total_sum - odd_sum
38
39
        40
41
        if odd_sum > 0 and even_sum > 0:
42
43
            results.append(""YES"")
44
45
        else:
46
47
            results.append(""NO"")
48
49
    50
51
    return results
52
53
# Input handling
54
55
T = int(input())
56
57
test_cases = []
58
59
for _ in range(T):
60
61
    N = int(input())
62
63
    arr = list(map(int, input().split()))
64
65
    test_cases.append((N, arr))
66
67
output = can_partition_odd_sum(T, test_cases)
68
69
for res in output:
70
71
    print(res)",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872184
1386872186,shlokchordia297,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872186
1386872187,pratyakashsharm1,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
        StringBuilder result = new StringBuilder();
8
9
        for (int t = 0; t < T; t++) {
10
            int N = scanner.nextInt();
11
            result.append((1L << N) - 1).append(""\n""); // Calculate 2^N - 1 using bit-shifting
12
        }
13
14
        System.out.print(result);
15
        scanner.close();
16
    }
17
}
18",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872187
1386872181,abhijeetjha913,unknown,unknown,"1
testcase = int(input())
2
for test in range(testcase):
3
    n = int(input())
4
    numbers = input().split(' ')
5
    numbers = [int(num) for num in numbers]
6
    7
    odd_numbers = [num for num in numbers if num % 2]
8
    odds = len(odd_numbers)
9
    10
    if odds >= 2 and odds%2 == 0:
11
        print(""YES"")
12
    else:
13
        print(""NO"")
14",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872181
1386872182,h1032221032,unknown,unknown,"1
for _ in range(int(input())):
2
    input()
3
    4
    A = map(int,input().split())
5
    odd_count = sum(1 for x in A if x % 2!=0)
6
    print(""YES"" if odd_count >=2 and odd_count % 2 == 0 else ""NO"")",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872182
1386872183,nayaktanmayg,unknown,unknown,"1
#include <iostream>
2
using namespace std;
3
4
int main() {
5
    int t;
6
    cin >> t; 
7
    while (t--) {
8
        int n;
9
        cin >> n; 
10
        int count_odd = 0;
11
        for (int i = 0; i < n; ++i) {
12
            int val;
13
            cin >> val;
14
            if (val % 2 == 1) { 
15
                count_odd++;
16
            }
17
        }
18
        if (count_odd >= 2 && count_odd % 2 == 0) {
19
            cout << ""YES"" << endl;
20
        } else {
21
            cout << ""NO"" << endl;
22
        }
23
    }
24
    return 0;
25
}",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872183
1386872179,mukeshkadali90,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        odd_count = sum(1 for x in array if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
import sys
11
input = sys.stdin.read
12
data = input().split()
13
T = int(data[0])
14
index = 1
15
test_cases = []
16
for _ in range(T):
17
    N = int(data[index])
18
    index += 1
19
    A = list(map(int, data[index:index + N]))
20
    index += N
21
    test_cases.append((N, A))
22
results = can_partition_odd_product(test_cases)
23
sys.stdout.write(""\n"".join(results) + ""\n"")",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872179
1386872178,prathamsharma_i1,unknown,unknown,"1
def precompute_non_empty_subsets():
2
    # Precompute 2^N - 1 for all N in [0, 30]
3
    return [(2 ** n) - 1 for n in range(31)]
4
5
def total_non_empty_subsets(T, test_cases):
6
    precomputed = precompute_non_empty_subsets()
7
    results = [precomputed[n] for n in test_cases]
8
    return results
9
10
# Input reading
11
T = int(input())
12
test_cases = [int(input()) for _ in range(T)]
13
14
# Processing and output
15
results = total_non_empty_subsets(T, test_cases)
16
print(""\n"".join(map(str, results)))",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872178
1386872180,rajtishika,unknown,unknown,"1
def p(test_cases):
2
    results = []
3
    for nums in test_cases:
4
        odd_count = sum(1 for num in nums if num % 2 != 0)
5
        if odd_count % 2 == 0:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    10
    return results
11
12
T = int(input()) 
13
test_cases = []
14
15
for _ in range(T):
16
    N = int(input())  
17
    nums = list(map(int, input().split()))  
18
    test_cases.append(nums)
19
results = p(test_cases)
20
for result in results:
21
    print(result)
22",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872180
1386872177,h1032221036,unknown,unknown,"1
def minimum_cloth_pieces(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        # Calculate the number of pieces along the length and width
5
        pieces_along_length = (M + A - 1) // A
6
        pieces_along_width = (N + A - 1) // A
7
        # Calculate the total number of pieces
8
        total_pieces = pieces_along_length * pieces_along_width
9
        results.append(total_pieces)
10
    return results
11
12
# Input reading
13
T = int(input())
14
test_cases = []
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
# Processing and output
20
results = minimum_cloth_pieces(test_cases)
21
for result in results:
22
    print(result)",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872177
