submission_id,username,problem_name,language,code,page,url
1386872663,bhooomikapal10,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    ios::sync_with_stdio(false);
7
    cin.tie(nullptr);
8
9
    int T; // Number of test cases
10
    cin >> T;
11
12
    while (T--) {
13
        int N; // Number of elements in the array
14
        cin >> N;
15
16
        int oddCount = 0;  // Count of odd numbers
17
        int evenCount = 0; // Count of even numbers
18
19
        for (int i = 0; i < N; i++) {
20
            int num;
21
            cin >> num;
22
23
            if (num % 2 == 0) {
24
                evenCount++;
25
            } else {
26
                oddCount++;
27
            }
28
        }
29
30
        // To have an odd product, we need at least one odd number in each subsequence
31
        if (oddCount >= 2) {
32
            cout << ""YES\n"";
33
        } else {
34
            cout << ""NO\n"";
35
        }
36
    }
37
38
    return 0;
39
}
40",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872663
1386872668,h1032220876,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def solve():
5
    data = input().splitlines()
6
    7
    output = []
8
    9
    index = 0
10
    T = int(data[index])  
11
    index += 1
12
    13
    for _ in range(T):
14
        N = int(data[index])  
15
        index += 1
16
        A = list(map(int, data[index].split()))  
17
        index += 1
18
        19
        odd_count = 0
20
        21
        for num in A:
22
            if num % 2 != 0:
23
                odd_count += 1
24
        25
        if odd_count >= 2:
26
            output.append(""YES"")
27
        else:
28
            output.append(""NO"")
29
    30
    sys.stdout.write(""\n"".join(output) + ""\n"")
31
32
solve()",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872668
1386872671,h1032221622,unknown,unknown,"1
2
import java.util.Scanner;
3
4
public class MinimumClothPieces {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
8
        // Read the number of test cases
9
        int T = scanner.nextInt();
10
11
        // Process each test case
12
        for (int t = 0; t < T; t++) {
13
            // Read M, N, and A
14
            long M = scanner.nextLong();
15
            long N = scanner.nextLong();
16
            long A = scanner.nextLong();
17
18
            // Calculate the number of cloth pieces needed
19
            long rows = (M + A - 1) / A; // Equivalent to Math.ceil(M / A)
20
            long cols = (N + A - 1) / A; // Equivalent to Math.ceil(N / A)
21
22
            // Output the result for the current test case
23
            System.out.println(rows * cols);
24
        }
25
26
        scanner.close();
27
    }
28
}",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872671
1386872658,h1032221667,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if __name__ == ""__main__"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
        print(result)",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872658
1386872659,h1032221105,unknown,unknown,"1
import math
2
3
def calculate_minimum_squares(T, test_cases):
4
    results = []
5
    for i in range(T):
6
        M, N, A = test_cases[i]
7
        # Calculate the number of squares needed in each dimension
8
        squares_in_row = math.ceil(M / A)
9
        squares_in_col = math.ceil(N / A)
10
        # Total number of squares needed
11
        total_squares = squares_in_row * squares_in_col
12
        results.append(total_squares)
13
    return results
14
15
# Input handling
16
if _name_ == ""_main_"":
17
    # Read the number of test cases
18
    T = int(input())
19
    test_cases = []
20
21
    # Read each test case
22
    for _ in range(T):
23
        M, N, A = map(int, input().split())
24
        test_cases.append((M, N, A))
25
26
    # Calculate results
27
    results = calculate_minimum_squares(T, test_cases)
28
29
    # Print the results
30
    for result in results:
31
     print(result)",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872659
1386872661,jashbarot05,unknown,unknown,"1
def solve():
2
    T = int(input())  # Number of test cases
3
    results = []
4
    5
    for _ in range(T):
6
        N = int(input())  # Size of array
7
        A = list(map(int, input().split()))  # Array elements
8
        9
        # Key insight: For sum1 * sum2 to be odd,
10
        # both sum1 and sum2 must be odd
11
        12
        # For a sum to be odd, need odd number of odd numbers
13
        odd_count = sum(1 for x in A if x % 2 == 1)
14
        even_count = N - odd_count
15
        16
        # Case 1: If there are no odd numbers, impossible to get odd sum
17
        # Case 2: If there is 1 odd number, impossible to get odd sum in both parts
18
        # Case 3: If there are 2 or more odd numbers, we can always partition to get odd sums
19
        20
        if odd_count >= 2:
21
            results.append(""YES"")
22
        else:
23
            results.append(""NO"")
24
    25
    print(""\n"".join(results))
26
27
if __name__ == ""__main__"":
28
    solve()",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872661
1386872653,ashishvarma0864,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        int t = scanner.nextInt();
9
10
        while (t > 0) {
11
            int m = scanner.nextInt();
12
            int n = scanner.nextInt();
13
            int a = scanner.nextInt();
14
15
            int r = (int) Math.ceil((double) m / a); 
16
            int s = (int) Math.ceil((double) n / a); 
17
            int result = r * s;
18
19
            System.out.println(result);
20
            t--; 
21
        }
22
    }
23
}",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872653
1386872656,praneelshah_ind1,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
int main() {
5
    int T; // Number of test cases
6
    scanf(""%d"", &T); // Reading number of test cases from stdin
7
    8
    while (T--) {
9
        int N; // Size of the array
10
        scanf(""%d"", &N); // Reading size of array from stdin
11
        12
        // Dynamically allocate memory for the array
13
        int *A = (int *)malloc(N * sizeof(int));
14
        if (A == NULL) {
15
            printf(""Memory allocation failed\n"");
16
            return 1; // Exit if memory allocation fails
17
        }
18
        19
        int odd_count = 0;
20
        21
        // Reading array elements from stdin and counting odd numbers
22
        for (int i = 0; i < N; i++) {
23
            scanf(""%d"", &A[i]);
24
            if (A[i] % 2 != 0) {
25
                odd_count++;
26
            }
27
        }
28
   // Printing the result to stdout
29
        if (odd_count >= 2) {
30
            printf(""YES\n"");
31
        } else {
32
            printf(""NO\n"");
33
        }
34
        35
        // Free dynamically allocated memory
36
        free(A);
37
    }
38
    39
    return 0;
40
}
41",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872656
1386872657,h1032220732,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
int main() {
8
    int T;
9
    cin >> T;
10
    while (T--) {
11
        int N;
12
        cin >> N;
13
        vector<int> A(N);
14
        int odd_count = 0;
15
        for (int i = 0; i < N; i++) {
16
            cin >> A[i];
17
            if (A[i] % 2 != 0) {
18
                odd_count++;
19
            }
20
        }
21
        22
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
23
            cout << ""YES\n"";
24
        } else {
25
            cout << ""NO\n"";
26
        }
27
    }
28
    return 0;
29
}
30",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872657
1386872651,akesherwani900,unknown,unknown,"1
def can_partition_to_odd_product(A):
2
    # Count the number of odd integers in the array
3
    odd_count = sum(1 for x in A if x % 2 != 0)
4
    5
    # We need at least two odd integers to form two subsequences with odd sums
6
    return odd_count >= 2
7
8
def main():
9
    import sys
10
    input = sys.stdin.read().splitlines()
11
    12
    index = 0
13
    T = int(input[index])
14
    index += 1
15
    16
    results = []
17
    for _ in range(T):
18
        N = int(input[index])
19
        index += 1
20
        A = list(map(int, input[index].split()))
21
        index += 1
22
        23
        if can_partition_to_odd_product(A):
24
            results.append(""YES"")
25
        else:
26
            results.append(""NO"")
27
    28
    for result in results:
29
        print(result)
30
31
if __name__ == ""__main__"":
32
    main()",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872651
