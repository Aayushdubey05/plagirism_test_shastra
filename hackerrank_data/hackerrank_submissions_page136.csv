submission_id,username,problem_name,language,code,page,url
1386871008,mishraaditya12a,unknown,unknown,"1
import math
2
T = int(input())
3
res = []
4
for _ in range(T):
5
    M, N, A = map(int, input().split())
6
    r = (M + A - 1) // A 
7
    c = (N + A - 1) // A 
8
    res.append(r * c)
9
for result in res:
10
    print(result)",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871008
1386871007,singhalokkumar61,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
       public static void main(String[] args) throws IOException {
7
        8
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
9
        int T = Integer.parseInt(br.readLine()); 
10
        11
        StringBuilder output = new StringBuilder();
12
        for (int t = 0; t < T; t++) {
13
            int N = Integer.parseInt(br.readLine());
14
            15
            16
            long result = (1L << N) - 1; 
17
            18
            output.append(result).append(""\n"");
19
        }
20
        21
        System.out.print(output);
22
    }
23
}",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871007
1386871009,ravi942004,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871009
1386871003,shreyaojha2,unknown,unknown,"1
def solve_test_cases(N):
2
    return (1 << N) - 1 
3
4
T = int(input())
5
for _ in range(T):
6
    N = int(input())
7
    print(solve_test_cases(N))",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871003
1386871005,parshadk04,unknown,unknown,"1
def can_partition(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        total_sum = sum(A)
6
        odd_count = sum(1 for x in A if x % 2 == 1)
7
        8
        if total_sum % 2 == 0 and odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
T = int(input())
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())
18
    A = list(map(int, input().split()))
19
    test_cases.append((N, A))
20
21
output = can_partition(T, test_cases)
22
for result in output:
23
    print(result)
24",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871005
1386871006,h1032221050,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
def min_cloth_pieces(T, test_cases):
3
    results = []
4
    for i in range(T):
5
        M, N, A = test_cases[i]
6
        rows = (M + A - 1) // A  # Ceiling of M / A
7
        cols = (N + A - 1) // A  # Ceiling of N / A
8
        results.append(rows * cols)
9
    return results
10
11
# Input
12
T = int(input())
13
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
14
15
# Solve and Output
16
results = min_cloth_pieces(T, test_cases)
17
print(""\n"".join(map(str, results)))",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871006
1386871000,nayaktanmayg,unknown,unknown,"1
def is_partition_possible(arr):
2
    odd_count = 0
3
    for num in arr:
4
        if num % 2 == 1:
5
            odd_count += 1
6
    return odd_count >= 2
7
8
t = int(input())
9
10
for _ in range(t):
11
    n = int(input())
12
    arr = list(map(int, input().split()))
13
    if is_partition_possible(arr):
14
        print(""YES"")
15
    else:
16
        print(""NO"")
17
        ",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871000
1386871002,neupanepratik65,unknown,unknown,"1
T = int(input())
2
3
for _ in range(T):
4
    M, N, A = map(int, input().split())
5
    rows_needed = (M + A - 1) // A
6
    cols_needed = (N + A - 1) // A
7
    print(rows_needed * cols_needed)",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871002
1386870999,ks4556737,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
7
    public static void main(String[] args) {
8
        Scanner scanner = new Scanner(System.in);
9
        int T = scanner.nextInt();
10
        for (int t = 0; t < T; t++) {
11
            long M = scanner.nextLong();
12
            long N = scanner.nextLong();
13
            long A = scanner.nextLong();
14
            long lengthPieces = (M + A - 1) / A;
15
            long widthPieces = (N + A - 1) / A;
16
            long totalPieces = lengthPieces * widthPieces;
17
            System.out.println(totalPieces);
18
        }
19
        scanner.close();
20
    21
}
22
}",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870999
1386870998,Radhikadevi55,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
    3
    aLength = (M + A - 1) // A
4
    aWidth = (N + A - 1) // A
5
    6
    return aLength * aWidth
7
8
T = int(input())
9
for _ in range(T):
10
    M, N, A = map(int, input().split())
11
    print(min_cloth_pieces(M, N, A))",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870998
