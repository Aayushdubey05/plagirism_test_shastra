submission_id,username,problem_name,language,code,page,url
1386871191,cabhishekpal,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) throws IOException {
6
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
7
        StringBuilder result = new StringBuilder();
8
9
        int T = Integer.parseInt(br.readLine()); // Number of test cases
10
        for (int t = 0; t < T; t++) {
11
            int N = Integer.parseInt(br.readLine()); // Number of elements in array
12
            String[] inputs = br.readLine().split("" "");
13
            int oddCount = 0;
14
15
            // Count odd numbers
16
            for (int i = 0; i < N; i++) {
17
                int num = Integer.parseInt(inputs[i]);
18
                if (num % 2 != 0) {
19
                    oddCount++;
20
                }
21
            }
22
23
            // At least two odd numbers are needed to satisfy the condition
24
            if (oddCount >= 2) {
25
                result.append(""YES\n"");
26
            } else {
27
                result.append(""NO\n"");
28
            }
29
        }
30
31
        // Print all results at once
32
        System.out.print(result.toString());
33
    }
34
}
35",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871191
1386871194,gharshit2502,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for N in test_cases:
4
        results.append(2**N - 1)
5
    return results
6
7
# Input reading
8
T = int(input())  # Number of test cases
9
test_cases = []
10
for _ in range(T):
11
    N = int(input())  # Number of elements in the set
12
    test_cases.append(N)
13
14
# Compute and output the results
15
results = count_non_empty_subsets(test_cases)
16
for result in results:
17
    print(result)
18
    ",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871194
1386871192,rheetiksharma601,unknown,unknown,"1
import java.io.BufferedReader;
2
import java.io.IOException;
3
import java.io.InputStreamReader;
4
import java.io.PrintWriter;
5
import java.math.BigDecimal;
6
import java.math.BigInteger;
7
import java.math.MathContext;
8
import java.nio.channels.Pipe.SourceChannel;
9
import java.rmi.StubNotFoundException;
10
import java.util.*;
11
12
public class cf {
13
    static int mod = (int) 1e9 + 7;
14
    static int N = (int) 2e5 + 5;
15
    static FastReader sc = new FastReader();
16
    static PrintWriter out = new PrintWriter(System.out);
17
    static int count = 0;
18
19
    public static void main(String[] args) {
20
21
        // boolean[] isPrime=prime(1000000009);
22
23
        int tCase = sc.nextInt();
24
25
        l1: 
26
        while (tCase-- > 0) {
27
28
            int n=sc.nextInt();
29
            int m=sc.nextInt();
30
            int a=sc.nextInt();
31
32
            if(a>=n && a>=m){
33
                System.out.println(1);
34
            }else{
35
                int ans=0;
36
                if(a<n){
37
                    ans+=(int)Math.ceil((double)n/a);
38
                }
39
                if(a<m){
40
                    ans+=(int)Math.ceil((double)m/a);
41
                }
42
                 43
                System.out.println(ans);
44
            }
45
            46
            47
48
49
        }
50
        out.flush();
51
52
    }
53
54
    public static long longSqrt(long n){
55
        if(n==0){
56
            return 0;
57
        }
58
        if(n==1){
59
            return 1;
60
        }
61
        return BigInteger.valueOf(n).sqrt().longValue();
62
    }
63
64
    public static long fact(int num) {
65
        if (num == 1 || num == 0)
66
            return 1;
67
        return (num  * fact(num - 1));
68
    }
69
70
    public static long powerMod(long base, long exp, long mod) {
71
        long res = 1;
72
        base = base % mod;
73
        if (base == 0)
74
            return 0;
75
76
        while (exp > 0) {
77
            if ((exp & 1) == 1) {
78
                res = (res * base) % mod;
79
            }
80
            exp = exp >> 1;
81
            base = (base * base) % mod;
82
        }
83
        return res;
84
    }
85
86
    // public static HashMap<String,Pair> sortMap(HashMap<String,Pair> m){
87
    // List<Map.Entry<String, Pair>> list = new ArrayList<>(m.entrySet());
88
89
    // list.sort((e1,e2) -> {
90
    // Pair p1=e1.getValue();
91
    // Pair p2=e2.getValue();
92
93
    // if (p1.i != p2.i) {
94
    // return Integer.compare(p1.i, p2.i);
95
    // } else {
96
    // return Integer.compare(p1.j, p2.j);
97
    // }
98
    // });
99
100
    // LinkedHashMap<String, Pair> sortedMap = new LinkedHashMap<>();
101
    // for (Map.Entry<String, Pair> entry : list) {
102
    // sortedMap.put(entry.getKey(), entry.getValue());
103
    // }
104
    // return sortedMap;
105
    // }
106
107
    public static <K> HashMap<K, Pair> sortMap(Map<K, Pair> map) {
108
        List<Map.Entry<K, Pair>> list = new ArrayList<>(map.entrySet());
109
110
        list.sort((e1, e2) -> {
111
            Pair p1 = e1.getValue();
112
            Pair p2 = e2.getValue();
113
114
            if (p1.i != p2.i) {
115
                return Integer.compare(p1.i, p2.i);
116
            } else {
117
                return Integer.compare(p1.j, p2.j);
118
            }
119
        });
120
121
        HashMap<K, Pair> sortedMap = new LinkedHashMap<>();
122
        for (Map.Entry<K, Pair> entry : list) {
123
            sortedMap.put(entry.getKey(), entry.getValue());
124
        }
125
        return sortedMap;
126
    }
127
128
    public static long sumOf2(int x, int y) {
129
        return (long) ((long) Math.pow(2, y + 1) - Math.pow(2, x));
130
    }
131
132
    static class Pair {
133
        int i;
134
        int j;
135
136
        public Pair(int i, int j) {
137
            this.i = i;
138
            this.j = j;
139
        }
140
    }
141
142
    public static BigDecimal sqrt(BigDecimal value, MathContext mc) {
143
        BigDecimal x = new BigDecimal(Math.sqrt(value.doubleValue()), mc);
144
        return x.add(new BigDecimal(value.subtract(x.multiply(x)).doubleValue() / (x.doubleValue() * 2.0), mc));
145
    }
146
147
    148
149
    public static BigDecimal distance(BigDecimal x1, BigDecimal y1, BigDecimal x2, BigDecimal y2) {
150
        BigDecimal deltaX = x2.subtract(x1);
151
        BigDecimal deltaY = y2.subtract(y1);
152
153
        BigDecimal sumOfSquares = deltaX.multiply(deltaX).add(deltaY.multiply(deltaY));
154
        return sqrt(sumOfSquares, MathContext.DECIMAL128);
155
    }
156
157
    public static int closestMultiple(int a, int b, int k) {
158
        int quotient = b / a;
159
        int multipleBelow = a * quotient;
160
        int multipleAbove = a * (quotient + 1);
161
162
        int distanceBelow = Math.abs(multipleBelow - b);
163
        int distanceAbove = Math.abs(multipleAbove - b);
164
        if (distanceBelow <= k && distanceAbove <= k) {
165
            return distanceBelow < distanceAbove ? multipleBelow : multipleAbove;
166
        } else if (distanceBelow <= k) {
167
            return multipleBelow;
168
        } else if (distanceAbove <= k) {
169
            return multipleAbove;
170
        } else {
171
            return -1;
172
        }
173
    }
174
175
    public static boolean[] prime(int limit) {
176
        boolean[] isPrime = new boolean[limit + 1];
177
        Arrays.fill(isPrime, true);
178
        isPrime[0] = false;
179
        isPrime[1] = false;
180
181
        for (int i = 2; i * i <= limit; i++) {
182
            if (isPrime[i]) {
183
                for (int j = i * i; j <= limit; j += i) {
184
                    isPrime[j] = false;
185
                }
186
            }
187
        }
188
        return isPrime;
189
190
    }
191
192
    public static boolean isPrime(int num) {
193
        if (num <= 1) {
194
            return false;
195
        }
196
        if (num <= 3) {
197
            return true;
198
        }
199
        if (num % 2 == 0 || num % 3 == 0) {
200
            return false;
201
        }
202
        for (int i = 5; i * i <= num; i += 6) {
203
            if (num % i == 0 || num % (i + 2) == 0) {
204
                return false;
205
            }
206
        }
207
        return true;
208
    }
209
210
    public static int gcd(int a, int b) {
211
        while (b != 0) {
212
            int temp = b;
213
            b = a % b;
214
            a = temp;
215
        }
216
        return a;
217
    }
218
219
    // public static long combination(int n, int k) {
220
    // if(n < k) return 0;
221
    // return (fact[n] * p((fact[n - k] * fact[k]) % mod, mod - 2)) % mod;
222
    // }
223
    public static long p(long a, long b) {
224
        long r = 1;
225
        while (b > 0) {
226
            long res = b & 1;
227
            if (res == 1)
228
                r = (r * a) % mod;
229
            b /= 2;
230
            a = (a * a) % mod;
231
        }
232
        return r;
233
    }
234
235
    public static long combination(int n, int k) {
236
        if (k > n) {
237
            return 0;
238
        }
239
        if (k == 0 || k == n) {
240
            return 1;
241
        }
242
        k = Math.min(k, n - k);
243
        long c = 1;
244
        for (int i = 0; i < k; i++) {
245
            c = c * (n - i) / (i + 1);
246
        }
247
        return c;
248
    }
249
250
    public static int findGCD(int[] arr) {
251
        int result = arr[0];
252
        for (int i = 1; i < arr.length; i++) {
253
            result = gcd(result, arr[i]);
254
            if (result == 1) {
255
                return 1;
256
            }
257
        }
258
        return result;
259
    }
260
261
    static class FastReader {
262
        BufferedReader br;
263
        StringTokenizer st;
264
265
        public FastReader() {
266
            br = new BufferedReader(
267
                    new InputStreamReader(System.in));
268
        }
269
270
        String next() {
271
            while (st == null || !st.hasMoreElements()) {
272
                try {
273
                    st = new StringTokenizer(br.readLine());
274
                } catch (IOException e) {
275
                    e.printStackTrace();
276
                }
277
            }
278
            return st.nextToken();
279
        }
280
281
        int nextInt() {
282
            return Integer.parseInt(next());
283
        }
284
285
        long nextLong() {
286
            return Long.parseLong(next());
287
        }
288
289
        double nextDouble() {
290
            return Double.parseDouble(next());
291
        }
292
293
        String nextLine() {
294
            String str = """";
295
            try {
296
                if (st.hasMoreTokens()) {
297
                    str = st.nextToken(""\n"");
298
                } else {
299
                    str = br.readLine();
300
                }
301
            } catch (IOException e) {
302
                e.printStackTrace();
303
            }
304
            return str;
305
        }
306
    }
307
308
}
309",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871192
1386871188,nj6097114,unknown,unknown,"1
2
#include <iostream>
3
#include <cmath> 
4
using namespace std;
5
6
7
int calculateSubsets(int num) {
8
    return pow(2, num) - 1;
9
}
10
11
int main() {
12
    int testCases;
13
    cin >> testCases; 
14
15
    while (testCases--) {
16
        int elements;
17
        cin >> elements; 
18
        cout << calculateSubsets(elements) << endl;
19
    }
20
21
    return 0;
22
}
23
24
25",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871188
1386871189,tiwarikhushi907,unknown,unknown,"1
def can_partition_odd_product(N, arr):
2
    # Try all possible partitions using bitmask
3
    for mask in range(1, (1 << N) - 1):  # -1 to ensure both subseqs non-empty
4
        sum_s1 = sum_s2 = 0
5
        has_s1 = has_s2 = False
6
        7
        # Generate subsequences based on bitmask
8
        for i in range(N):
9
            if mask & (1 << i):
10
                sum_s1 += arr[i]
11
                has_s1 = True
12
            else:
13
                sum_s2 += arr[i]
14
                has_s2 = True
15
        16
        # Check if both sums are odd and subsequences non-empty
17
        if has_s1 and has_s2 and sum_s1 % 2 == 1 and sum_s2 % 2 == 1:
18
            return True
19
    20
    return False
21
22
def solve():
23
    T = int(input())
24
    results = []
25
    26
    for _ in range(T):
27
        N = int(input())
28
        arr = list(map(int, input().split()))
29
        result = ""YES"" if can_partition_odd_product(N, arr) else ""NO""
30
        results.append(result)
31
    32
    # Print results
33
    for result in results:
34
        print(result)
35
36
if __name__ == ""__main__"":
37
    solve()",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871189
1386871190,nileshparmaroff1,unknown,unknown,"1
import java.util.Scanner;
2
3
public class PartitioningForOddMultiplication {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        int T = scanner.nextInt();
8
9
        for (int t = 0; t < T; t++) {
10
            int N = scanner.nextInt();
11
            int oddCount = 0;
12
13
            for (int i = 0; i < N; i++) {
14
                int number = scanner.nextInt();
15
                if (number % 2 != 0) {
16
                    oddCount++;
17
                }
18
            }
19
            if (oddCount >= 2) {
20
                System.out.println(""YES"");
21
            } else {
22
                System.out.println(""NO"");
23
            }
24
        }
25
26
        scanner.close();
27
    }
28
}
29",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871190
1386871185,dhanashrikuwar25,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        int T = scanner.nextInt();
9
        StringBuilder result = new StringBuilder();
10
11
        while (T-- > 0) {
12
            int N = scanner.nextInt();
13
            int oddCount = 0;
14
15
            for (int i = 0; i < N; i++) {
16
                if (scanner.nextInt() % 2 != 0) {
17
                    oddCount++;
18
                }
19
            }
20
21
            if (oddCount >= 2) {
22
                result.append(""YES\n"");
23
            } else {
24
                result.append(""NO\n"");
25
            }
26
        }
27
28
        System.out.print(result);
29
        scanner.close();
30
    }
31
}",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871185
1386871186,jaypsingh04,unknown,unknown,"1
import math
2
3
T = int(input())
4
for _ in range(T):
5
    N = int(input())
6
    print((1 << N) - 1)",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871186
1386871187,drashtitalia,unknown,unknown,"1
def minimum_cloth_pieces(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        # Calculate the number of pieces along the length and width
5
        pieces_along_length = (M + A - 1) // A
6
        pieces_along_width = (N + A - 1) // A
7
        # Calculate the total number of pieces
8
        total_pieces = pieces_along_length * pieces_along_width
9
        results.append(total_pieces)
10
    return results
11
12
# Input reading
13
T = int(input())
14
test_cases = []
15
for _ in range(T):
16
    M, N, A = map(int, input().split())
17
    test_cases.append((M, N, A))
18
19
# Processing and output
20
results = minimum_cloth_pieces(test_cases)
21
for result in results:
22
    print(result)
23",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871187
1386871184,h1032220187,unknown,unknown,"1
def squarescaping():
2
    # Read number of test cases
3
    T = int(input())
4
    results = []
5
    6
    for _ in range(T):
7
        # Read M, N, A for each test case
8
        M, N, A = map(int, input().split())
9
        # Calculate the number of tiles along the length and width
10
        tiles_length = (M + A - 1) // A
11
        tiles_width = (N + A - 1) // A
12
        # Calculate total number of tiles
13
        total_tiles = tiles_length * tiles_width
14
        results.append(total_tiles)
15
    16
    # Print the results for all test cases
17
    for result in results:
18
        print(result)
19
20
# Call the function
21
squarescaping()",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871184
