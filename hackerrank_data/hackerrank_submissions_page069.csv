submission_id,username,problem_name,language,code,page,url
1386871884,simran_verma1081,unknown,unknown,"1
def can_partition_to_odd_products(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        odd_count = sum(1 for x in array if x % 2 == 1)
5
        if odd_count >= 2:
6
            results.append(""YES"")
7
        else:
8
            results.append(""NO"")
9
    return results
10
11
12
import sys
13
input = sys.stdin.read
14
data = input().split()
15
16
T = int(data[0])
17
index = 1
18
test_cases = []
19
20
for _ in range(T):
21
    n = int(data[index])
22
    index += 1
23
    array = list(map(int, data[index:index + n]))
24
    index += n
25
    test_cases.append((n, array))
26
27
28
results = can_partition_to_odd_products(test_cases)
29
sys.stdout.write(""\n"".join(results) + ""\n"")
30",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871884
1386871886,prathameshsharm2,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
import java.util.Scanner;
7
8
public class Solution {
9
10
    public static void main(String[] args) {
11
    12
    Scanner scanner = new Scanner (System. in) ;
13
    int T = scanner.nextInt() ;
14
    for (int i = 0; i < T; i++) {
15
        int M = scanner.nextInt() ;
16
        int N = scanner.nextInt ();
17
        int A = scanner.nextInt ();
18
        long numPiecesLength = (M + A - 1) / A;
19
        long numPiecesWidth = (N + A - 1) / A;
20
        long totalPieces = numPiecesLength * numPiecesWidth;
21
    System.out.println(totalPieces);
22
}
23
scanner. close () ;
24
        25
    }
26
}",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871886
1386871887,tiwarikhushi907,unknown,unknown,"1
def partition_odd_multiplication():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
    6
    T = int(data[0])  # Number of test cases
7
    results = []
8
    index = 1
9
    10
    for _ in range(T):
11
        N = int(data[index])  # Number of integers in this test case
12
        index += 1
13
        odd_count = 0  # Initialize count of odd numbers
14
        15
        # Count odd numbers in this test case
16
        for i in range(index, index + N):
17
            if int(data[i]) % 2 != 0:
18
                odd_count += 1
19
                # Early exit if we already have at least two odd numbers
20
                if odd_count >= 2:
21
                    results.append(""YES"")
22
                    break
23
        else:
24
            results.append(""NO"")
25
        26
        index += N
27
    28
    # Print all results at once
29
    sys.stdout.write(""\n"".join(results) + ""\n"")
30
31
# Run the function
32
partition_odd_multiplication()
33",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871887
1386871881,h1032221105,unknown,unknown,"1
def min_cloth_pieces(M,N,A):
2
    """"""
3
    Calculates the minimum number of square cloth pieces needed to cover a rectangular land.
4
5
    Args:
6
      M: Length of the rectangular land.
7
      N: Width of the rectangular land.
8
      A: Side length of each square cloth piece.
9
10
    Returns:
11
      The minimum number of cloth pieces required.
12
    """"""
13
14
    # Calculate the number of pieces needed along each dimension
15
    rows = (M + A - 1) // A  # Ceiling division for rows
16
    cols = (N + A - 1) // A  # Ceiling division for columns
17
18
    # Total number of pieces is the product of rows and columns
19
    return rows * cols
20
21
# Get the number of test cases
22
T = int(input())
23
24
# Iterate through each test case
25
for _ in range(T):
26
    M, N, A = map(int, input().split())
27
    result = min_cloth_pieces(M, N, A)
28
    print(result)",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871881
1386871883,h1032221599,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871883
1386871882,h1032231310,unknown,unknown,"1
def can_partition_into_odd_sums(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        odd_count = sum(1 for x in A if x % 2 != 0)
6
        7
        8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    13
    return results
14
15
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    A = list(map(int, input().split()))
21
    test_cases.append((N, A))
22
23
24
results = can_partition_into_odd_sums(test_cases)
25
26
27
for result in results:
28
    print(result)
29
30
31
32",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871882
1386871878,saurabhpatel4589,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
7
        // Read the number of test cases
8
        int T = scanner.nextInt();
9
10
        for (int t = 0; t < T; t++) {
11
            // Read the value of N
12
            int N = scanner.nextInt();
13
            14
            // Calculate (1 << N) - 1
15
            long result = (1L << N) - 1;
16
            17
            // Print the result
18
            System.out.println(result);
19
        }
20
21
        scanner.close();
22
    }
23
}
24",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871878
1386871879,h1032221654,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int T;
5
    6
    // Input the number of test cases
7
    scanf(""%d"", &T);
8
9
    while (T--) {
10
        long long M, N, A;
11
12
        // Input the dimensions of the land (M x N) and the side length of the square cloth (A)
13
        scanf(""%lld %lld %lld"", &M, &N, &A);
14
15
        // Calculate the minimum number of cloth pieces required
16
        long long horizontal_pieces = (M + A - 1) / A; // Ceiling of M / A
17
        long long vertical_pieces = (N + A - 1) / A;   // Ceiling of N / A
18
        long long total_pieces = horizontal_pieces * vertical_pieces;
19
20
        // Output the result for the current test case
21
        printf(""%lld\n"", total_pieces);
22
    }
23
24
    return 0;
25
}
26",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871879
1386871880,h1032221052,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int t;
10
    cin >> t;
11
12
    while (t--) {
13
        int n, ctr=0;
14
        cin>>n;
15
        vector<int> arry(n);
16
        17
        for (int i = 0; i < n; i++) {
18
            cin >> arry[i];
19
            if (arry[i] % 2 != 0) {
20
                ctr++;
21
            }
22
        }
23
24
        25
        if((ctr>=2) && (ctr % 2 == 0)) {
26
            cout << ""YES""<<endl;
27
        } else {
28
            cout << ""NO""<<endl;
29
        }
30
    }
31
32
    return 0;
33
}
34",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871880
1386871877,soham_khopkar,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871877
