submission_id,username,problem_name,language,code,page,url
1386871674,harshgume17,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871674
1386871675,purvi_vishwakar1,unknown,unknown,"1
def num_subsets(N):
2
    """"""
3
    Calculates the total number of non-empty subsets 
4
    that can be formed from a set of N distinct elements.
5
6
    Args:
7
      N: The number of elements in the set.
8
9
    Returns:
10
      The total number of non-empty subsets.
11
    """"""
12
13
    # 2^N represents the total number of subsets (including the empty set)
14
    total_subsets = 2 ** N
15
16
    # Subtract 1 to exclude the empty set
17
    return total_subsets - 1
18
19
if __name__ == ""__main__"":
20
    T = int(input())
21
22
    for _ in range(T):
23
        N = int(input())
24
        print(num_subsets(N))",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871675
1386871676,jashbarot05,unknown,unknown,"1
def can_partition_for_odd_product(A):
2
    """"""
3
    Checks if the given array A can be partitioned into two subsequences 
4
    such that the product of their sums is odd.
5
6
    Args:
7
      A: The input array of integers.
8
9
    Returns:
10
      True if such a partition exists, False otherwise.
11
    """"""
12
13
    # Check if there are any odd numbers in the array
14
    has_odd = any(num % 2 == 1 for num in A)
15
16
    # If there are no odd numbers, it's impossible to have an odd product
17
    if not has_odd:
18
        return False
19
20
    return True
21
22
# Get the number of test cases
23
T = int(input())
24
25
for _ in range(T):
26
    N = int(input())
27
    A = list(map(int, input().split()))
28
29
    if can_partition_for_odd_product(A):
30
        print(""YES"")
31
    else:
32
        print(""NO"")",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871676
1386871671,khushbu1215,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871671
1386871672,neupanepratik65,unknown,unknown,"1
def answer():
2
    T = int(input())
3
    res = []
4
    for _ in range(T):
5
        N = int(input())
6
        r = (2 ** N) - 1
7
        res.append(r)
8
    for r in res:
9
        print(r)
10
answer()",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871672
1386871670,2bhaveshk,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871670
1386871667,divya_kini0,unknown,unknown,"1
def min_cloth_pieces(M, N, A):
2
    3
    rows = (M + A - 1) // A  
4
    cols = (N + A - 1) // A  
5
6
    return rows * cols
7
8
T = int(input())
9
10
for _ in range(T):
11
    M, N, A = map(int, input().split())
12
    result = min_cloth_pieces(M, N, A)
13
    print(result)",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871667
1386871668,h10322204571,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt(); 
8
        9
        while (T-- > 0) {
10
            int N = sc.nextInt();
11
            int[] A = new int[N];
12
            13
            int oddCount = 0;
14
            for (int i = 0; i < N; i++) {
15
                A[i] = sc.nextInt();
16
                if (A[i] % 2 != 0) {
17
                    oddCount++;
18
                }
19
            }
20
            21
            22
            if (oddCount >= 2 && oddCount % 2 == 0) {
23
                System.out.println(""YES"");
24
            } else {
25
                System.out.println(""NO"");
26
            }
27
        }
28
        sc.close();
29
    }
30
}
31",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871668
1386871669,anipatil5122003,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871669
1386871666,_youknowzair65,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        7
        // Number of test cases
8
        int T = sc.nextInt();
9
        10
        // For each test case
11
        for (int t = 0; t < T; t++) {
12
            int N = sc.nextInt();  // Number of elements in the array
13
            boolean hasOdd = false, hasEven = true;
14
            15
            // Read the array elements
16
            for (int i = 0; i < N; i++) {
17
                int num = sc.nextInt();
18
                19
                // Check if the current number is odd or even
20
                if (num % 2 == 0) {
21
                    hasEven = true;
22
                } else {
23
                    hasOdd = true;
24
                }
25
                26
                // If we already found both odd and even numbers, break early
27
                if (hasOdd && hasEven) {
28
                    break;
29
                }
30
            }
31
            32
            // If both odd and even numbers exist, print ""YES"", otherwise ""NO""
33
            if (hasOdd && hasEven) {
34
                System.out.println(""YES"");
35
            } else {
36
                System.out.println(""NO"");
37
            }
38
        }
39
        40
        sc.close();
41
    }
42
}",83,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871666
