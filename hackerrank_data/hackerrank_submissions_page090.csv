submission_id,username,problem_name,language,code,page,url
1386871587,prathameshjanug1,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    int T;
16
17
    cin >> T;
18
19
    while (T--) {
20
21
        int N;
22
23
        cin >> N;
24
25
        vector<int> A(N);
26
27
        int odd_count = 0;
28
29
        for (int i = 0; i < N; i++) {
30
31
            cin >> A[i];
32
33
            if (A[i] % 2 != 0) {
34
35
                odd_count++;
36
37
            }
38
39
        }
40
41
        42
43
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
44
45
            cout << ""YES\n"";
46
47
        } else {
48
49
            cout << ""NO\n"";
50
51
        }
52
53
    }
54
55
    return 0;
56
57
}",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871587
1386871588,ailuropix,unknown,unknown,"1
import math
2
3
def minimum_cloths(T, test_cases):
4
    results = []
5
    for case in test_cases:
6
        M, N, A = case
7
        # Calculate the number of cloths required along each dimension
8
        cloths_along_length = math.ceil(M / A)
9
        cloths_along_width = math.ceil(N / A)
10
        # Total cloths required
11
        results.append(cloths_along_length * cloths_along_width)
12
    return results
13
14
# Input reading
15
T = int(input())  # Number of test cases
16
test_cases = []
17
18
for _ in range(T):
19
    M, N, A = map(int, input().split())
20
    test_cases.append((M, N, A))
21
22
# Solve and print results
23
results = minimum_cloths(T, test_cases)
24
for result in results:
25
    print(result)
26",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871588
1386871589,tiwarirushabh59,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        # To form an odd product, there must be at least one odd number in each subsequence
9
        if odd_count >= 2:
10
            results.append(""YES"")
11
        else:
12
            results.append(""NO"")
13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
for _ in range(T):
19
    N = int(input())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((N, arr))
22
23
# Get results and print
24
results = can_partition_odd_product(T, test_cases)
25
for result in results:
26
    print(result)",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871589
1386871582,nikyadav456,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc= new Scanner(System.in);
8
        9
        int T= sc.nextInt();
10
        for(int t=0; t<T; t++){
11
            int N= sc.nextInt();
12
            13
            int[] A = new int[N];
14
            int oddCount=0;
15
            16
            for(int i=0; i<N; i++){
17
                A[i]= sc.nextInt();
18
                if(A[i]%2 != 0){
19
                    oddCount++;
20
                }
21
            }
22
            23
            if(oddCount >=2){
24
                System.out.println(""YES"");
25
            }else{
26
                System.out.println(""NO"");
27
            }
28
        }
29
        sc.close();
30
    }
31
}",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871582
1386871583,ank1020ita,unknown,unknown,"1
t = int(input().strip())
2
3
for _ in range(t):
4
5
    n = int(input().strip())
6
7
    # Number of non-empty subsets = 2^n - 1
8
9
    print((1 << n) - 1)",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871583
1386871585,dny9136833946,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc = new Scanner(System.in);
8
        9
        int t = sc.nextInt();  // Number of test cases
10
        11
        // To handle multiple test cases efficiently
12
        StringBuilder result = new StringBuilder();
13
        14
        for (int i = 0; i < t; i++) {
15
            int n = sc.nextInt();  // Size of the array for this test case
16
            int oddCount = 0;
17
            18
            // Loop through the array elements and count the odd numbers
19
            for (int j = 0; j < n; j++) {
20
                int num = sc.nextInt();
21
                if (num % 2 != 0) {
22
                    oddCount++;
23
                }
24
            }
25
            26
            // If there are at least two odd numbers, it's possible to partition
27
            if (oddCount >= 2) {
28
                result.append(""YES\n"");
29
            } else {
30
                result.append(""NO\n"");
31
            }
32
        }
33
        34
        // Output all results at once for efficiency
35
        System.out.print(result.toString());
36
        37
        // Close the scanner
38
        sc.close();
39
    }
40
}
41",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871585
1386871578,h1032221590,unknown,unknown,"1
#include <iostream>
2
3
using namespace std;
4
5
int main() {
6
    int T;
7
    cin >> T;
8
    9
    while (T--) {
10
        int N;
11
        cin >> N;
12
        // 2^N - 1 gives number of non-empty subsets
13
        // Using left shift for power of 2
14
        cout << (1LL << N) - 1 << endl;
15
    }
16
    17
    return 0;
18
}",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871578
1386871580,agrajat07,unknown,unknown,"1
def can_partition_odd_product(T, test_cases):
2
    resultt = []
3
    for case in test_cases:
4
        N, arr = case
5
        even_count = sum(1 for x in arr if x % 2 == 0)
6
        odd_count = N - even_count
7
8
        if odd_count >= 2:
9
            resultt.append(""YESSS"")
10
        else:
11
            resultt.append(""NOOO"")
12
    return results
13
14
T = int(input())
15
test_cases = []
16
for _ in range(T):
17
    N = int(input())
18
    arr = list(map(int, input().split()))
19
    test_cases.append((N, arr))
20
21
resultt = can_partition_odd_product(T, test_cases)
22
for result in resultt:
23
    print(result)",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871580
1386871581,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for _, array in test_cases:
4
        odd_count = 0
5
        for x in array:
6
            if x % 2 == 1:
7
                odd_count += 1
8
            # Stop counting if we already find 2 odd numbers
9
            if odd_count >= 2:
10
                break
11
        if odd_count >= 2:
12
            results.append(""YES"")
13
        else:
14
            results.append(""NO"")
15
    return results
16
17
# Input handling
18
T = int(input())
19
test_cases = []
20
for _ in range(T):
21
    N = int(input())
22
    A = list(map(int, input().split()))
23
    test_cases.append((N, A))
24
25
# Solve and print results
26
results = can_partition_odd_product(test_cases)
27
print(""\n"".join(results))
28",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871581
1386871576,shetty2004dhanu1,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
3
    results = []
4
5
    for N in test_cases:
6
7
        # Calculate total subsets excluding the empty set
8
9
        results.append(2**N - 1)
10
11
    return results
12
13
# Input handling
14
15
T = int(input())  # Number of test cases
16
17
test_cases = [int(input()) for _ in range(T)]
18
19
# Solve the problem
20
21
results = count_non_empty_subsets(test_cases)
22
23
# Output results
24
25
for result in results:
26
27
    print(result)
28
29",90,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871576
