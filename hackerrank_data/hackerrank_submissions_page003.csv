submission_id,username,problem_name,language,code,page,url
1386873020,harshitsingh9003,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
void canPartitionForOddProduct(int T, vector<pair<int, vector<int>>>& testCases) {
6
    for (int i = 0; i < T; ++i) {
7
        int N = testCases[i].first;
8
        vector<int>& A = testCases[i].second;
9
        10
        // Count the number of odd numbers in the array
11
        int oddCount = 0;
12
        for (int x : A) {
13
            if (x % 2 == 1) {
14
                oddCount++;
15
            }
16
        }
17
        18
        // Check if there are at least 2 odd numbers
19
        if (oddCount >= 2) {
20
            cout << ""YES"" << endl;
21
        } else {
22
            cout << ""NO"" << endl;
23
        }
24
    }
25
}
26
27
int main() {
28
    int T;
29
    cin >> T;
30
    vector<pair<int, vector<int>>> testCases(T);
31
    32
    for (int i = 0; i < T; ++i) {
33
        int N;
34
        cin >> N;
35
        vector<int> A(N);
36
        for (int j = 0; j < N; ++j) {
37
            cin >> A[j];
38
        }
39
        testCases[i] = {N, A};
40
    }
41
    42
    canPartitionForOddProduct(T, testCases);
43
    44
    return 0;
45
}",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873020
1386873029,vrushankvyas248,unknown,unknown,"1
t = int(input())  # Read the number of test cases
2
for _ in range(t):
3
    n = int(input())  # Read the size of the array
4
    line = input().split()  # Read the array as space-separated strings
5
    6
    count_odd = 0
7
    for val in line:
8
        if int(val) % 2 == 1:  # Check if the number is odd
9
            count_odd += 1
10
    11
    # Condition: need at least 2 odd elements, and total # of odd is even
12
    if count_odd >= 2 and (count_odd % 2 == 0):
13
        print(""YES"")
14
    else:
15
        print(""NO"")",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873029
1386873039,sagarkanekar2004,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873039
1386873004,janvi_pathak2101,unknown,unknown,"1
n=int(input())
2
matrix=[]
3
for _ in range(n):
4
    row=list(map(int,input().split()))
5
    matrix.append(row)
6
print(matrix[1][0])
7
print(min(matrix[2]))
8
print(4)
9",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386873004
1386873007,harshit1mishra16,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
        6
        # Step 1: Check if the sum is even
7
        total_sum = sum(arr)
8
        if total_sum % 2 != 0:
9
            results.append(""NO"")
10
            continue
11
        12
        # Step 2: Count the odd numbers
13
        odd_count = sum(1 for x in arr if x % 2 != 0)
14
        15
        # Step 3: If sum is even and there are at least two odd numbers, it's possible
16
        if odd_count >= 2:
17
            results.append(""YES"")
18
        else:
19
            results.append(""NO"")
20
    21
    return results
22
23
# Input reading
24
T = int(input())  # Number of test cases
25
test_cases = []
26
for _ in range(T):
27
    N = int(input())  # Size of the list
28
    arr = list(map(int, input().split()))  # The list of integers
29
    test_cases.append((N, arr))
30
31
# Compute and output the results
32
results = can_partition_into_subsequences(test_cases)
33
for result in results:
34
    print(result)",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386873007
1386872992,h1032220672,unknown,unknown,"1
def minimum_cloth_pieces(test_cases):
2
    results=[]
3
    for M,N,A in test_cases:
4
        pieces_along_length = (M+A-1)// A
5
        pieces_along_width = (N+A-1)// A
6
    total_pieces= pieces_along_length * pieces_along_width
7
    results.append(total_pieces)
8
    return results
9
    10
T=int(input())
11
test_cases=[]
12
for _ in range(T):
13
    M,N,A= map(int,input().split())
14
    test_cases.append((M,N,A))
15
    16
results= minimum_cloth_pieces(test_cases)
17
for result in results:
18
        print(result)",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872992
1386872978,sagarkanekar2004,unknown,unknown,"1
def can_partition_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, A = case
5
        6
        # Ensure valid input sizes
7
        if len(A) != N:
8
            results.append(""NO"")
9
            continue
10
11
        odd_count = sum(1 for x in A if x % 2 != 0)
12
        13
        # At least two odd numbers are needed for an odd multiplication
14
        if odd_count >= 2:
15
            results.append(""YES"")
16
        else:
17
            results.append(""NO"")
18
    19
    return results
20
21
# Example usage:
22
T = int(input().strip())
23
test_cases = []
24
for _ in range(T):
25
    N = int(input().strip())
26
    A = list(map(int, input().strip().split()))
27
    test_cases.append((N, A))
28
29
results = can_partition_odd_multiplication(test_cases)
30
print(""\n"".join(results))",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872978
1386872983,tiwariaditya1810,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        9
        # If the total sum is odd, it's impossible to partition it into two equal subsets
10
        if total_sum % 2 != 0:
11
            results.append(""NO"")
12
            continue
13
        14
        # DP approach to check if we can partition into two subsets with equal sum
15
        target = total_sum // 2
16
        dp = [False] * (target + 1)
17
        dp[0] = True  # A sum of 0 is always achievable (empty subset)
18
        19
        for num in arr:
20
            for j in range(target, num - 1, -1):
21
                dp[j] = dp[j] or dp[j - num]
22
        23
        # If dp[target] is True, we can partition the array into two subsets with equal sum
24
        if dp[target]:
25
            results.append(""YES"")
26
        else:
27
            results.append(""NO"")
28
    29
    return results
30
31
# Input handling
32
T = int(input())  # Number of test cases
33
test_cases = []
34
for _ in range(T):
35
    N = int(input())  # Number of elements in the array
36
    arr = list(map(int, input().split()))  # The array of integers
37
    test_cases.append((N, arr))
38
39
output = can_partition_odd_sum(T, test_cases)
40
for res in output:
41
    print(res)
42",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386872983
1386872972,praneelshah_ind1,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        # Total subsets of a set with n elements = 2^n
5
        # Non-empty subsets = 2^n - 1
6
        results.append((2 ** n) - 1)
7
    return results
8
9
# Predefined test cases
10
test_cases = [1, 7]
11
12
# Compute results
13
output = count_non_empty_subsets(test_cases)
14
15
# Output results
16
for res in output:
17
    print(res)
18",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386872972
1386872971,kushintwala05,unknown,unknown,"1
def sub(t):
2
    re=[]
3
    for N in t:
4
        no=(1<<N -1)
5
        re.append(sub)
6
        return re
7
T=int(input())
8
t=[]
9
for _ in range(T):
10
    N=int(input())
11
    t.append(N)
12
res=sub(t)
13
for re in res:
14
    print(res)
15",3,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386872971
