submission_id,username,problem_name,language,code,page,url
1386870927,rishabhstudy59,unknown,unknown,"1
T = int(input())
2
results = []
3
4
for _ in range(T):
5
    N = int(input())
6
    A = list(map(int, input().split()))
7
    8
    odd_count = sum(1 for x in A if x % 2 != 0)
9
    10
    if odd_count >= 2:
11
        results.append(""YES"")
12
    else:
13
        results.append(""NO"")
14
15
for result in results:
16
    print(result)
17",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870927
1386870928,nikyadav456,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
       Scanner sc= new Scanner(System.in);
8
        int T= sc.nextInt();
9
        for(int t=0; t<T; t++){
10
            int M=sc.nextInt();
11
            int N=sc.nextInt();
12
            int A=sc.nextInt();
13
            14
            long numPiecesLength=(M+A-1)/A;
15
            long numPiecesWidth=(N+A-1)/A;
16
            17
            long totalPieces= numPiecesLength*numPiecesWidth;
18
            19
            System.out.println(totalPieces);     
20
        }
21
        sc.close();
22
    }
23
}",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870928
1386870929,aryannimkar206,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870929
1386870923,h1032221642,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
11
    int t;
12
        cin>>t;
13
    while(t--){
14
        long long m, n, a;
15
        cin >> m >> n >> a;
16
        long long lengthPieces = (m+a-1)/a;
17
        long long widthPieces = (n+a-1)/a;
18
        long long result = lengthPieces * widthPieces;
19
        20
        cout << result << endl;
21
    }
22
}
23",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870923
1386870924,pandeyrishabh966,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
bool canPartition(vector<int>& arr) {
9
    int n = arr.size();
10
    11
    for(int mask = 1; mask < (1 << n) - 1; mask++) {
12
        long long sum1 = 0, sum2 = 0;
13
        bool valid = true;
14
        15
        for(int i = 0; i < n; i++) {
16
            if(mask & (1 << i)) {
17
                sum1 += arr[i];
18
            } else {
19
                sum2 += arr[i];
20
            }
21
        }
22
        23
        if((sum1 * sum2) % 2 == 1) {
24
            return true;
25
        }
26
    }
27
    return false;
28
}
29
30
int main() {
31
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
32
    int t;
33
    cin >> t;
34
    35
    while(t--) {
36
        int n;
37
        cin >> n;
38
        39
        vector<int> arr(n);
40
        for(int i = 0; i < n; i++) {
41
            cin >> arr[i];
42
        }
43
        44
        if(canPartition(arr)) {
45
            cout << ""YES\n"";
46
        } else {
47
            cout << ""NO\n"";
48
        }
49
    }
50
    51
    return 0;
52
}
53",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870924
1386870925,harshy8013698,unknown,unknown,"1
def squarescaping(inputs):
2
    results = []
3
    for case in inputs:
4
        M, N, A = case
5
        6
        rows = (M + A - 1) // A
7
        cols = (N + A - 1) // A
8
        results.append(rows * cols)
9
    return results
10
11
T = int(input())
12
inputs = [tuple(map(int, input().split())) for _ in range(T)]
13
14
results = squarescaping(inputs)
15
16
for result in results:
17
    print(result)",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870925
1386870918,sanskruti01thak1,unknown,unknown,"1
T = int(input())
2
results = []
3
4
for _ in range(T):
5
    M, N, A = map(int, input().split())
6
    squares_within_length = (M + A - 1) // A
7
    squares_within_width = (N + A - 1) // A
8
    total_number_squares = squares_within_length * squares_within_width
9
    results.append(total_number_squares)
10
11
for result in results:
12
    print(result)
13
14
    15",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870918
1386870921,h1032221690,unknown,unknown,"1
def can_partition(N, A):
2
    # Count odd and even numbers
3
    odd_count = sum(1 for x in A if x % 2 == 1)
4
    even_count = N - odd_count
5
    6
    # If there's exactly one odd number, we can't make an odd product
7
    # Because all possible partitions will have one odd sum and one even sum
8
    if odd_count <= 1:
9
        return False
10
        11
    # If we have 2 or more odd numbers, we can always make odd product
12
    # by putting two odd numbers in one partition and rest in another
13
    return True
14
15
# Process input
16
T = int(input())
17
for _ in range(T):
18
    N = int(input())
19
    A = list(map(int, input().split()))
20
    print(""YES"" if can_partition(N, A) else ""NO"")
21
22",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870921
1386870922,vikasmourya54321,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
10
int main() {
11
    int T;
12
    cin >> T;
13
14
    while (T--) {
15
        int N;
16
        cin >> N;
17
        vector<int> A(N);
18
        int odd_count = 0, even_count = 0;
19
20
        for (int i = 0; i < N; i++) {
21
            cin >> A[i];
22
            if (A[i] % 2 == 0)
23
                even_count++;
24
            else
25
                odd_count++;
26
        }
27
28
        if (odd_count > 1 && even_count > 1) {
29
            cout << ""YES"" << endl;
30
        } else {
31
            cout << ""NO"" << endl;
32
        }
33
    }
34
35
    return 0;
36
}
37",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386870922
1386870917,rayanubhav36,unknown,unknown,"1
def min_cloth(test_cases):
2
    results=[]
3
    for case in test_cases:
4
        M, N, A=case
5
        pieces_length=(M+A-1)//A
6
        pieces_width=(N+A-1)//A
7
        results.append(pieces_length*pieces_width)
8
    return results
9
10
T=int(input())
11
test_cases=[tuple(map(int,input().split())) for _ in range(T)]
12
results=min_cloth(test_cases)
13
for result in results:
14
    print(result)",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386870917
