submission_id,username,problem_name,language,code,page,url
1386871731,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for _, array in test_cases:
4
        # Count odd numbers in the array
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        7
        # Check if there are at least 2 odd numbers
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
def main():
15
    import sys
16
    input = sys.stdin.read
17
    data = input().splitlines()
18
    19
    T = int(data[0])  # Number of test cases
20
    test_cases = []
21
    line_index = 1
22
    for _ in range(T):
23
        N = int(data[line_index])  # Size of the array
24
        A = list(map(int, data[line_index + 1].split()))  # The array
25
        test_cases.append((N, A))
26
        line_index += 2
27
    28
    # Solve the problem
29
    results = can_partition_odd_product(test_cases)
30
    31
    # Output results
32
    sys.stdout.write(""\n"".join(results) + ""\n"")
33
34
if __name__ == ""__main__"":
35
    main()
36",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871731
1386871732,jaypsingh04,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871732
1386871733,anchalvtiwari,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    line = sys.stdin.readline().split()
7
    8
    count_odd = 0
9
    for val in line:
10
        if int(val) % 2 == 1:
11
            count_odd += 1
12
    if count_odd >= 2 and (count_odd % 2 == 0):
13
        print(""YES"")
14
    else:
15
        print(""NO"")",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871733
1386871728,sanketram75,unknown,unknown,"1
def count_non_empty_subsets(N):
2
    return (1 << N) - 1  # Same as 2^N - 1, but more efficient
3
4
def main():
5
    T = int(input())
6
    for _ in range(T):
7
        N = int(input())
8
        print(count_non_empty_subsets(N))
9
10
if __name__ == ""__main__"":
11
    main()",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871728
1386871729,sty9594,unknown,unknown,"1
import sys
2
3
t = int(sys.stdin.readline())
4
for _ in range(t):
5
    n = int(sys.stdin.readline())
6
    # Read the array as strings, no big list
7
    line = sys.stdin.readline().split()
8
    9
    count_odd = 0
10
    for val in line:
11
        if int(val) % 2 == 1:
12
            count_odd += 1
13
    14
    # Condition: need at least 2 odd elements, and total # of odd is even
15
    if count_odd >= 2 and (count_odd % 2 == 0):
16
        print(""YES"")
17
    else:
18
        print(""NO"")
19",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871729
1386871730,singh236dipti,unknown,unknown,"1
def can_partition_into_odd_products(t, test_cases):
2
3
    results = []
4
5
    for case in test_cases:
6
7
        N, A = case
8
9
        # Count the number of odd numbers
10
11
        odd_count = sum(1 for x in A if x % 2 != 0)
12
13
        # Check if we can partition into two odd-product subsequences
14
15
        if odd_count >= 2:
16
17
            results.append(""YES"")
18
19
        else:
20
21
            results.append(""NO"")
22
23
    return results
24
25
# Input handling
26
27
t = int(input())
28
29
test_cases = []
30
31
for _ in range(t):
32
33
    N = int(input())
34
35
    A = list(map(int, input().split()))
36
37
    test_cases.append((N, A))
38
39
# Calculate results
40
41
results = can_partition_into_odd_products(t, test_cases)
42
43
# Print results
44
45
for result in results:
46
47
    print(result)",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871730
1386871726,dny9136833946,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner sc = new Scanner(System.in);
8
        9
        int t = sc.nextInt();  // Number of test cases
10
        11
        // Using StringBuilder to accumulate results for efficient output
12
        StringBuilder result = new StringBuilder();
13
        14
        for (int i = 0; i < t; i++) {
15
            int n = sc.nextInt();  // Size of the array for this test case
16
            int oddCount = 0;
17
            18
            // Count the number of odd numbers in the array
19
            for (int j = 0; j < n; j++) {
20
                int num = sc.nextInt();
21
                if (num % 2 != 0) {
22
                    oddCount++;
23
                }
24
            }
25
            26
            // If there are at least two odd numbers, output ""YES"", else ""NO""
27
            if (oddCount >= 2) {
28
                result.append(""YES\n"");
29
            } else {
30
                result.append(""NO\n"");
31
            }
32
        }
33
        34
        // Output all results at once for efficiency
35
        System.out.print(result.toString());
36
        37
        // Close the scanner
38
        sc.close();
39
    }
40
}
41",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871726
1386871725,purvi_vishwakar1,unknown,unknown,"1
def num_subsets(N):
2
   3
    total_subsets = 2 ** N
4
5
    return total_subsets - 1
6
7
if __name__ == ""__main__"":
8
    T = int(input())
9
10
    for _ in range(T):
11
        N = int(input())
12
        print(num_subsets(N))",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871725
1386871727,jahaanvvi12,unknown,unknown,"1
def odd(): 
2
3
    t = int(input())  
4
5
    results = []
6
7
    8
9
    for _ in range(t): 
10
11
        n = int(input())   
12
13
        a = list(map(int, input().split()))   
14
15
        16
17
        total_sum = sum(a) 
18
19
        odd_count = sum(1 for x in a if x % 2 != 0)  
20
21
        22
23
        # Checking conditions 
24
25
        if total_sum % 2 == 0 and odd_count >= 2:
26
27
            results.append(""YES"")
28
29
        else:
30
31
            results.append(""NO"")
32
33
    for result in results:
34
35
        print(result)
36
37
odd()",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871727
1386871723,shlokpednekar_21,unknown,unknown,"1
T = int(input())
2
results = []
3
4
for _ in range(T):
5
    N = int(input())
6
    A = list(map(int, input().split()))
7
    8
    odd_count = sum(1 for x in A if x % 2 == 1)
9
    10
    if odd_count >= 2:
11
        results.append(""YES"")
12
    else:
13
        results.append(""NO"")
14
15
print(""\n"".join(results))
16",79,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871723
