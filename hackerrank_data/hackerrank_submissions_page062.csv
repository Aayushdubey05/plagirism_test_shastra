submission_id,username,problem_name,language,code,page,url
1386871973,h1032221768,unknown,unknown,"1
def can_partition_into_subsequences(test_cases):
2
    results = []
3
    for case in test_cases:
4
        N, arr = case
5
6
        total_sum = sum(arr)
7
        if total_sum % 2 != 0:
8
            results.append(""NO"")
9
            continue
10
11
        odd_count = sum(1 for x in arr if x % 2 != 0)
12
13
        if odd_count >= 2:
14
            results.append(""YES"")
15
        else:
16
            results.append(""NO"")
17
18
    return results
19
20
T = int(input())  
21
test_cases = []
22
for _ in range(T):
23
    N = int(input())  
24
    arr = list(map(int, input().split()))  
25
    test_cases.append((N, arr))
26
27
28
results = can_partition_into_subsequences(test_cases)
29
for result in results:
30
    print(result)
31",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871973
1386871974,h1032220732,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    def can_partition(arr):
3
        total_sum = sum(arr)
4
        5
        # If total sum is odd, partitioning into two subsets is impossible
6
        if total_sum % 2 == 1:
7
            return ""NO""
8
        9
        target = total_sum // 2  # Target sum for one subset
10
        11
        # DP approach to check if we can form a subset with the target sum
12
        dp = [False] * (target + 1)
13
        dp[0] = True  # A subset sum of 0 is always possible
14
        15
        for num in arr:
16
            for j in range(target, num - 1, -1):
17
                dp[j] = dp[j] or dp[j - num]
18
        19
        return ""YES"" if dp[target] else ""NO""
20
    21
    results = []
22
    for i in range(T):
23
        _, arr = test_cases[i]
24
        results.append(can_partition(arr))
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
# Output results
37
output = can_partition_odd_sum(T, test_cases)
38
for res in output:
39
    print(res)
40
41
42",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871974
1386871976,sahulsureshyada1,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    int T;
11
    cin >> T;
12
13
    while (T--) {
14
        int N;
15
        cin >> N;
16
        vector<int> A(N);
17
18
        int odd_count = 0;
19
        for (int i = 0; i < N; i++) {
20
            cin >> A[i];
21
            if (A[i] % 2 != 0) {
22
                odd_count++;
23
            }
24
        }
25
26
        27
        if (odd_count >= 2 && (odd_count % 2 == 0)) {
28
            cout << ""YES\n"";
29
        } else {
30
            cout << ""NO\n"";
31
        }
32
    }
33
34
    return 0;
35
}
36",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871976
1386871970,jashbarot05,unknown,unknown,"1
def count_nonempty_subsets(N):
2
    # For N elements, total non-empty subsets = 2^N - 1
3
    return (1 << N) - 1  # Using bit shift for efficient 2^N calculation
4
5
# Read number of test cases
6
T = int(input())
7
8
# Process each test case
9
for _ in range(T):
10
    N = int(input())
11
    result = count_nonempty_subsets(N)
12
    print(result)",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871970
1386871971,shreyashgode77,unknown,unknown,"1
def can_partition_for_odd_product(T, test_cases):
2
3
    results = []
4
5
    for case in test_cases:
6
7
        N = case[0]
8
9
        A = case[1:]
10
11
        # Count the number of odd and even numbers in the array
12
13
        odd_count = sum(1 for x in A if x % 2 != 0)
14
15
        # For the product of sums to be odd, both sums must be odd
16
17
        # This is only possible if there are at least two odd numbers
18
19
        if odd_count >= 2:
20
21
            results.append(""YES"")
22
23
        else:
24
25
            results.append(""NO"")
26
27
    return results
28
29
# Read input
30
31
import sys
32
33
input = sys.stdin.read
34
35
data = input().split()
36
37
T = int(data[0])
38
39
index = 1
40
41
test_cases = []
42
43
for _ in range(T):
44
45
    N = int(data[index])
46
47
    A = list(map(int, data[index + 1:index + 1 + N]))
48
49
    test_cases.append([N] + A)
50
51
    index += 1 + N
52
53
# Get the results
54
55
results = can_partition_for_odd_product(T, test_cases)
56
57
# Print the results
58
59
for result in results:
60
61
    print(result)
62
63",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871971
1386871972,tanishkini,unknown,unknown,"1
def can_partition_into_odd_subsequences(A):
2
    odd_count = sum(1 for x in A if x % 2 != 0)  # Count odd numbers
3
    return odd_count >= 2  # We need at least two odd numbers for a valid partition
4
5
def solve():
6
    T = int(input())  # Number of test cases
7
    for _ in range(T):
8
        N = int(input())  # Number of elements in the array
9
        A = list(map(int, input().split()))  # The array itself
10
        if can_partition_into_odd_subsequences(A):
11
            print(""YES"")
12
        else:
13
            print(""NO"")
14
15
# Call the solve function
16
solve()
17",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871972
1386871967,Radhikadevi55,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871967
1386871968,tanishrai,unknown,unknown,"1
def solve_test_case(N, A):
2
    odd_sum = sum(x for x in A if x % 2)
3
    even_sum = sum(x for x in A if x % 2 == 0)
4
    5
    for i in range(N):
6
        if A[i] % 2:  
7
            s1 = A[i]
8
            remaining_odd = odd_sum - s1
9
            if remaining_odd > 0 and s1 * remaining_odd % 2 == 1:
10
                return ""YES""
11
    12
    return ""NO""
13
14
T = int(input())
15
for _ in range(T):
16
    N = int(input())
17
    A = list(map(int, input().split()))
18
    print(solve_test_case(N, A))
19",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871968
1386871969,bhooomikapal10,unknown,unknown,"1
def can_partition_odd_product(test_cases):
2
    results = []
3
    for n, array in test_cases:
4
        # Count odd numbers in the array
5
        odd_count = sum(1 for x in array if x % 2 == 1)
6
        7
        # If there are at least two odd numbers, the answer is YES
8
        if odd_count >= 2:
9
            results.append(""YES"")
10
        else:
11
            results.append(""NO"")
12
    return results
13
14
def main():
15
    import sys
16
    input = sys.stdin.read
17
    data = input().splitlines()
18
    19
    T = int(data[0])  # Number of test cases
20
    test_cases = []
21
    index = 1
22
    for _ in range(T):
23
        N = int(data[index])  # Size of the array
24
        A = list(map(int, data[index + 1].split()))  # The array
25
        test_cases.append((N, A))
26
        index += 2
27
    28
    # Process test cases
29
    results = can_partition_odd_product(test_cases)
30
    31
    # Print results
32
    sys.stdout.write(""\n"".join(results) + ""\n"")
33
34
if __name__ == ""__main__"":
35
    main()
36",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871969
1386871965,sagarkanekar2004,unknown,unknown,"1
import math
2
def minimum_cloth_pieces(T, test_cases):
3
    results = []
4
    for case in test_cases:
5
        M, N, A = case
6
        num_squares_length = math.ceil(M / A)
7
        num_squares_width = math.ceil(N / A)
8
        total_squares = num_squares_length * num_squares_width
9
        results.append(total_squares)
10
    return results
11
T = int(input(""""))
12
test_cases = []
13
for _ in range(T):
14
    test_cases.append(tuple(map(int, input().split())))
15
results = minimum_cloth_pieces(T, test_cases)
16
for result in results:
17
    print(result)",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871965
