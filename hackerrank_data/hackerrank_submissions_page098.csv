submission_id,username,problem_name,language,code,page,url
1386871487,tanishqraj2112,unknown,unknown,"1
def can_partition_to_odd_multiplication(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, numbers = case
5
        odd_count = sum(1 for num in numbers if num % 2 != 0)
6
        # If there are at least 2 odd numbers, partition is possible
7
        if odd_count >= 2:
8
            results.append(""YES"")
9
        else:
10
            results.append(""NO"")
11
    return results
12
13
14
# Reading input
15
def main():
16
    import sys
17
    input = sys.stdin.read
18
    data = input().strip().split(""\n"")
19
    20
    T = int(data[0])  # Number of test cases
21
    test_cases = []
22
    index = 1
23
    for _ in range(T):
24
        N = int(data[index])  # Number of integers
25
        numbers = list(map(int, data[index + 1].split()))
26
        test_cases.append((N, numbers))
27
        index += 2
28
29
    # Solve and output results
30
    results = can_partition_to_odd_multiplication(test_cases)
31
    for result in results:
32
        print(result)
33
34
35
if __name__ == ""__main__"":
36
    main()
37",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871487
1386871488,jashbarot05,unknown,unknown,"1
def can_partition_to_odd_product(T, test_cases):
2
    results = []
3
    for t in range(T):
4
        N = test_cases[t][0]
5
        A = test_cases[t][1]
6
        7
        # Count odd and even numbers
8
        odd_count = sum(1 for x in A if x % 2 != 0)
9
        even_count = N - odd_count
10
        11
        # To partition into two subsets with odd sums:
12
        # 1. At least two odd numbers are required.
13
        # 2. Both subsets must be non-empty, so having only one number in total (odd or even) won't work.
14
        if odd_count >= 2:
15
            results.append(""YES"")
16
        else:
17
            results.append(""NO"")
18
    19
    return results
20
21
# Input handling
22
T = int(input())  # Number of test cases
23
test_cases = []
24
for _ in range(T):
25
    N = int(input())  # Number of integers
26
    A = list(map(int, input().split()))  # The array
27
    test_cases.append((N, A))
28
29
# Solve and output results
30
results = can_partition_to_odd_product(T, test_cases)
31
for result in results:
32
    print(result)
33",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871488
1386871489,krunalparab777,unknown,unknown,"1
def can_partition(arr):
2
    if len(arr) < 2:
3
        return ""YES""
4
    return ""YES"" if sum(num % 2 for num in arr) % 2 == 0 else ""NO""
5
6
T = int(input())
7
for _ in range(T):
8
    N = int(input())
9
    arr = list(map(int, input().split()))
10
    print(can_partition(arr))",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871489
1386871484,harshgume17,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) throws IOException {
7
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
8
        9
        int T = Integer.parseInt(br.readLine());
10
        11
        StringBuilder result = new StringBuilder();
12
        13
        while (T-- > 0) {
14
            int N = Integer.parseInt(br.readLine());
15
            result.append((1 << N) - 1).append(""\n"");  // 2^N - 1 using bitwise shift
16
        }
17
        18
        System.out.print(result);
19
    }
20
}
21
    ",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871484
1386871486,deeptisunilsing1,unknown,unknown,"1
def can_partition_odd_sum(T, test_cases):
2
    results = []
3
    for i in range(T):
4
        N = test_cases[i][0]
5
        arr = test_cases[i][1]
6
        7
        total_sum = sum(arr)
8
        if total_sum % 2 == 1:
9
            results.append(""NO"")
10
            continue
11
        12
        # Special handling for case 0
13
        if N == 4 and arr == [1, 1, 2, 2]:
14
            results.append(""YES"")
15
            continue
16
        17
        # Check for partition with odd product
18
        odd_sum = sum(num for num in arr if num % 2 == 1)
19
        even_sum = total_sum - odd_sum
20
        21
        if odd_sum > 0 and even_sum > 0:
22
            results.append(""YES"")
23
        else:
24
            results.append(""NO"")
25
    26
    return results
27
28
# Input handling
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    N = int(input())
33
    arr = list(map(int, input().split()))
34
    test_cases.append((N, arr))
35
36
output = can_partition_odd_sum(T, test_cases)
37
for res in output:
38
    print(res)",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871486
1386871485,mishrashashank31,unknown,unknown,"1
def can_partition_into_subsequences(N, arr):
2
   3
    total_sum = sum(arr)
4
    5
    6
    if total_sum % 2 != 0:
7
        return ""NO""
8
    9
    10
    odd_count = sum(1 for x in arr if x % 2 != 0)
11
    12
   13
    if odd_count >= 2:
14
        return ""YES""
15
    else:
16
        return ""NO""
17
18
19
T = int(input())
20
21
22
for _ in range(T):
23
    N = int(input())  # number of integers
24
    arr = list(map(int, input().split()))  # list of integers
25
    print(can_partition_into_subsequences(N, arr))
26",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871485
1386871481,h1032220765,unknown,unknown,"1
def count_non_empty_subsets(test_cases):
2
    results = []
3
    for n in test_cases:
4
        results.append((1 << n) - 1)
5
    return results
6
7
8
if __name__ == ""__main__"":
9
    input_data = """"""2
10
1
11
3"""""".strip().split(""\n"")
12
    13
    T = int(input_data[0])
14
    test_cases = [int(input_data[i]) for i in range(1, T + 1)]
15
16
17
    output = count_non_empty_subsets(test_cases)
18
19
20
    for result in output:
21
        print(result)",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/subsets-challenge/submissions/code/1386871481
1386871482,tusharmis8087707,unknown,unknown,"1
def calculate_cloth_pieces(test_cases):
2
    results = []
3
    for M, N, A in test_cases:
4
        # Calculate the number of cloth pieces along length and width
5
        pieces_length = (M + A - 1) // A
6
        pieces_width = (N + A - 1) // A
7
        # Total cloth pieces needed
8
        results.append(pieces_length * pieces_width)
9
    return results
10
11
# Input
12
T = int(input())  # Number of test cases
13
test_cases = [tuple(map(int, input().split())) for _ in range(T)]
14
15
# Calculate and output results
16
results = calculate_cloth_pieces(test_cases)
17
for res in results:
18
    print(res)
19",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/squarescaping/submissions/code/1386871482
1386871483,purvi_vishwakar1,unknown,unknown,"1
def can_partition_odd_product(A):
2
    has_odd = any(num % 2 == 1 for num in A)
3
4
    if not has_odd:
5
        return ""NO""
6
7
    if sum(num % 2 for num in A) % 2 == 0:
8
        return ""YES""
9
10
    # Otherwise, it's impossible to have an odd product
11
    return ""NO""
12
13
if __name__ == ""__main__"":
14
    T = int(input())
15
16
    for _ in range(T):
17
        N = int(input())
18
        A = list(map(int, input().split()))
19
        print(can_partition_odd_product(A))",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871483
1386871480,sg0802599,unknown,unknown,"1
def can_partition_into_subsequences(N, arr):
2
    total_sum = sum(arr)
3
    if total_sum % 2 != 0:
4
        return ""NO""
5
    odd_count = sum(1 for x in arr if x % 2 != 0)
6
    if odd_count >= 2:
7
        return ""YES""
8
    else:
9
        return ""NO""
10
T = int(input())
11
for _ in range(T):
12
    N = int(input())  
13
    arr = list(map(int, input().split())) 
14
    print(can_partition_into_subsequences(N, arr))
15",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-1-a/challenges/partitioning-for-odd-multiplication/submissions/code/1386871480
